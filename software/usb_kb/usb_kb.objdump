
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012564 memsz 0x00012564 flags r-x
    LOAD off    0x00013584 vaddr 0x00012584 paddr 0x00014070 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015b5c vaddr 0x00015b5c paddr 0x00015b5c align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000118b4  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000aa0  00011ae4  00011ae4  00012ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00012584  00014070  00013584  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  00015b5c  00015b5c  00015b5c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00015cc0  00015cc0  00015070  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08001090  08001090  00015070  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015070  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f18  00000000  00000000  00015098  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023712  00000000  00000000  00015fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000090d7  00000000  00000000  000396c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b834  00000000  00000000  00042799  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002388  00000000  00000000  0004dfd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000039f3  00000000  00000000  00050358  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00053d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006b5b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0006b5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00070266  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00070269  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00070275  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00070276  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00070277  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007027b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007027f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00070283  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007028e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00070299  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000702a4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000024  00000000  00000000  000702af  2**0
                  CONTENTS, READONLY
 30 .jdi          0000554a  00000000  00000000  000702d3  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000727ff  00000000  00000000  0007581d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00011ae4 l    d  .rodata	00000000 .rodata
00012584 l    d  .rwdata	00000000 .rwdata
00015b5c l    d  .bss	00000000 .bss
00015cc0 l    d  .sdram	00000000 .sdram
08001090 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
00015b5c l     O .bss	00000002 ctl_reg.3589
00015b5e l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000122ca l     O .rodata	00000010 zeroes.4404
00004854 l     F .text	000000bc __sbprintf
000122da l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004a64 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000065bc l     F .text	00000008 __fp_unlock
000065d0 l     F .text	0000019c __sinit.part.1
0000676c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012584 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000129c8 l     O .rwdata	00000020 lc_ctype_charset
000129a8 l     O .rwdata	00000020 lc_message_charset
000129e8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001230c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009c40 l     F .text	000000fc __sprint_r.part.0
00012430 l     O .rodata	00000010 zeroes.4349
0000b27c l     F .text	000000bc __sbprintf
00012440 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f2c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f3d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f404 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f4f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f5e0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f6cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f8a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014060 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000fb4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fc88 l     F .text	00000034 alt_dev_reg
00012fd0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ff64 l     F .text	0000020c altera_avalon_jtag_uart_irq
00010170 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010a4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010eac l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001100c l     F .text	0000003c alt_get_errno
00011048 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015b94 g     O .bss	00000004 alt_instruction_exception_handler
00009284 g     F .text	00000074 _mprec_log10
00009370 g     F .text	0000008c __any_on
0000b830 g     F .text	00000054 _isatty_r
00012318 g     O .rodata	00000028 __mprec_tinytens
0000f7e4 g     F .text	0000007c alt_main
000023f0 g     F .text	000000c0 _puts_r
00015bc0 g     O .bss	00000100 alt_irq
0000b884 g     F .text	00000060 _lseek_r
00014070 g       *ABS*	00000000 __flash_rwdata_start
0000dc9c g     F .text	00000088 .hidden __eqdf2
00015cc0 g       *ABS*	00000000 __alt_heap_start
000023b4 g     F .text	0000003c printf
0000ba9c g     F .text	0000009c _wcrtomb_r
00009b00 g     F .text	0000005c __sseek
0000691c g     F .text	00000010 __sinit
0000b944 g     F .text	00000140 __swbuf_r
000073f0 g     F .text	0000007c _setlocale_r
00006774 g     F .text	00000078 __sfmoreglue
0000f884 g     F .text	00000024 __malloc_unlock
00002284 g     F .text	00000080 UsbGetRetryCnt
000080c0 g     F .text	0000015c memmove
0000026c g     F .text	000000b0 IO_init
00006904 g     F .text	00000018 _cleanup
00008344 g     F .text	000000a8 _Balloc
0000dd24 g     F .text	000000dc .hidden __gtdf2
00011434 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000b7d4 g     F .text	0000005c _fstat_r
00015b78 g     O .bss	00000004 errno
00009a7c g     F .text	00000008 __seofread
00015b80 g     O .bss	00000004 alt_argv
0001c030 g       *ABS*	00000000 _gp
0000fb1c g     F .text	00000030 usleep
00012e50 g     O .rwdata	00000180 alt_fd_list
00011458 g     F .text	00000090 alt_find_dev
00007f78 g     F .text	00000148 memcpy
000065c4 g     F .text	0000000c _cleanup_r
0000f0dc g     F .text	000000dc .hidden __floatsidf
00010f90 g     F .text	0000007c alt_io_redirect
0000de00 g     F .text	000000f4 .hidden __ltdf2
00011ae4 g       *ABS*	00000000 __DTOR_END__
000024b0 g     F .text	00000014 puts
000116b4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009960 g     F .text	00000074 __fpclassifyd
000091e0 g     F .text	000000a4 __ratio
0000b260 g     F .text	0000001c __vfiprintf_internal
00010368 g     F .text	0000021c altera_avalon_jtag_uart_read
00002384 g     F .text	00000030 _printf_r
08001090 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000c93c g     F .text	00000064 .hidden __udivsi3
0000f534 g     F .text	000000ac isatty
00012368 g     O .rodata	000000c8 __mprec_tens
0000746c g     F .text	0000000c __locale_charset
00015b74 g     O .bss	00000004 __malloc_top_pad
00001910 g     F .text	00000268 UsbGetConfigDesc2
00014038 g     O .rwdata	00000004 __mb_cur_max
0000749c g     F .text	0000000c _localeconv_r
00008778 g     F .text	0000003c __i2b
00006da0 g     F .text	000004c8 __sfvwrite_r
000099d4 g     F .text	00000054 _sbrk_r
0000b8e4 g     F .text	00000060 _read_r
00014058 g     O .rwdata	00000004 alt_max_fd
0000b4c8 g     F .text	000000f0 _fclose_r
0000658c g     F .text	00000030 fflush
00015b70 g     O .bss	00000004 __malloc_max_sbrked_mem
0000ca20 g     F .text	000008ac .hidden __adddf3
00008f88 g     F .text	0000010c __b2d
0000c280 g     F .text	000005c4 .hidden __umoddi3
0000f708 g     F .text	000000dc lseek
00014030 g     O .rwdata	00000004 _global_impure_ptr
000093fc g     F .text	00000564 _realloc_r
00015cc0 g       *ABS*	00000000 __bss_end
00010dbc g     F .text	000000f0 alt_iic_isr_register
0001132c g     F .text	00000108 alt_tick
0000bc84 g     F .text	000005fc .hidden __udivdi3
0000b730 g     F .text	00000024 _fputwc_r
00012340 g     O .rodata	00000028 __mprec_bigtens
0000855c g     F .text	00000104 __s2b
0000f1b8 g     F .text	000000a8 .hidden __floatunsidf
00008cc8 g     F .text	00000060 __mcmp
00001360 g     F .text	00000100 UsbSetAddress
0000693c g     F .text	00000018 __fp_lock_all
00010d70 g     F .text	0000004c alt_ic_irq_enabled
00011290 g     F .text	0000009c alt_alarm_stop
00015b88 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012e28 g     O .rwdata	00000028 alt_dev_null
00010a2c g     F .text	00000020 alt_dcache_flush_all
00008660 g     F .text	00000068 __hi0bits
000003b4 g     F .text	000000ac IO_read
0000f05c g     F .text	00000080 .hidden __fixdfsi
00014070 g       *ABS*	00000000 __ram_rwdata_end
00014050 g     O .rwdata	00000008 alt_dev_list
0000fb88 g     F .text	00000100 write
00012584 g       *ABS*	00000000 __ram_rodata_end
0000f440 g     F .text	000000b8 fstat
0000de00 g     F .text	000000f4 .hidden __ledf2
00002304 g     F .text	00000080 UsbPrintMem
00008a40 g     F .text	00000140 __pow5mult
00009d54 g     F .text	0000150c ___vfiprintf_internal_r
00015b68 g     O .bss	00000004 __nlocale_changed
0000c9a0 g     F .text	00000058 .hidden __umodsi3
00015cc0 g       *ABS*	00000000 end
0000fea4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00011ae4 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000f260 g     F .text	00000064 .hidden __clzsi2
00010584 g     F .text	00000224 altera_avalon_jtag_uart_write
0000692c g     F .text	00000004 __sfp_lock_acquire
00007e94 g     F .text	000000e4 memchr
0000255c g     F .text	000022dc ___vfprintf_internal_r
00001c78 g     F .text	00000100 UsbClassRequest
00006a90 g     F .text	00000310 _free_r
00007478 g     F .text	00000010 __locale_mb_cur_max
00011930 g     F .text	00000180 __call_exitprocs
00015b64 g     O .bss	00000004 __mlocale_changed
0001403c g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00015b8c g     O .bss	00000004 _alt_tick_rate
00008b80 g     F .text	00000148 __lshift
00015b90 g     O .bss	00000004 _alt_nticks
0000f8e4 g     F .text	00000104 read
0000fcf4 g     F .text	0000004c alt_sys_init
00011818 g     F .text	00000118 __register_exitproc
000087b4 g     F .text	0000028c __multiply
00010210 g     F .text	00000068 altera_avalon_jtag_uart_close
0000c9f8 g     F .text	00000028 .hidden __mulsi3
00012584 g       *ABS*	00000000 __ram_rwdata_start
00011ae4 g       *ABS*	00000000 __ram_rodata_start
00015b98 g     O .bss	00000028 __malloc_current_mallinfo
00009094 g     F .text	0000014c __d2b
00001460 g     F .text	00000148 UsbGetDeviceDesc1
0000fd40 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000115f0 g     F .text	000000c4 alt_get_fd
000108d4 g     F .text	00000158 alt_busy_sleep
0000b398 g     F .text	00000054 _close_r
0001179c g     F .text	0000007c memcmp
0000fe00 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015cc0 g       *ABS*	00000000 __alt_stack_base
0000fe50 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004910 g     F .text	00000154 __swsetup_r
0000d2cc g     F .text	000009d0 .hidden __divdf3
000067ec g     F .text	00000118 __sfp
000092f8 g     F .text	00000078 __copybits
00012a20 g     O .rwdata	00000408 __malloc_av_
00006938 g     F .text	00000004 __sinit_lock_release
0000def4 g     F .text	0000086c .hidden __muldf3
00009a28 g     F .text	00000054 __sread
00002200 g     F .text	00000084 UsbWaitTDListDone
000114e8 g     F .text	00000108 alt_find_file
00010a88 g     F .text	000000a4 alt_dev_llist_insert
0000f860 g     F .text	00000024 __malloc_lock
0000fa6c g     F .text	000000b0 sbrk
00006530 g     F .text	0000005c _fflush_r
0000b3ec g     F .text	000000dc _calloc_r
00015b5c g       *ABS*	00000000 __bss_start
0000821c g     F .text	00000128 memset
00000460 g     F .text	00000da8 main
00015b84 g     O .bss	00000004 alt_envp
00015b6c g     O .bss	00000004 __malloc_max_total_mem
0000fda0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00001b78 g     F .text	00000100 UsbSetConfig
0000ba84 g     F .text	00000018 __swbuf
00009b5c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0000b5b8 g     F .text	00000014 fclose
00004c8c g     F .text	00001688 _dtoa_r
00007688 g     F .text	0000080c _malloc_r
0000bbf8 g     F .text	00000030 __ascii_wctomb
0001405c g     O .rwdata	00000004 alt_errno
00007268 g     F .text	000000c4 _fwalk
0000c844 g     F .text	00000084 .hidden __divsi3
0000696c g     F .text	00000124 _malloc_trim_r
00001d78 g     F .text	00000148 UsbGetHidDesc
00011ae4 g       *ABS*	00000000 __CTOR_END__
00009b64 g     F .text	000000dc strcmp
00011ae4 g       *ABS*	00000000 __flash_rodata_start
00011ae4 g       *ABS*	00000000 __DTOR_LIST__
0000dc9c g     F .text	00000088 .hidden __nedf2
00001260 g     F .text	0000004c UsbRead
0000fcbc g     F .text	00000038 alt_irq_init
0000f9e8 g     F .text	00000084 alt_release_fd
00012450 g     O .rodata	00000100 .hidden __clz_tab
00015b60 g     O .bss	00000004 _PathLocale
00011750 g     F .text	00000014 atexit
0000b338 g     F .text	00000060 _write_r
000074a8 g     F .text	00000018 setlocale
00014034 g     O .rwdata	00000004 _impure_ptr
00015b7c g     O .bss	00000004 alt_argc
00006314 g     F .text	0000021c __sflush_r
00010b8c g     F .text	00000060 _do_dtors
00007494 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00008f24 g     F .text	00000064 __ulp
00006954 g     F .text	00000018 __fp_unlock_all
00014048 g     O .rwdata	00000008 alt_fs_list
00001ec0 g     F .text	00000340 UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000074c0 g     F .text	0000000c localeconv
00010c0c g     F .text	00000050 alt_ic_isr_register
00014070 g       *ABS*	00000000 _edata
00015cc0 g       *ABS*	00000000 _end
00001208 g     F .text	00000058 UsbWrite
0000b5cc g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
00010278 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00010ce4 g     F .text	0000008c alt_ic_irq_disable
00009a84 g     F .text	0000007c __swrite
00014040 g     O .rwdata	00000004 __malloc_trim_threshold
00007488 g     F .text	0000000c __locale_msgcharset
00011764 g     F .text	00000038 exit
0000732c g     F .text	000000c4 _fwalk_reent
00008d28 g     F .text	000001fc __mdiff
0000c8c8 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006930 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000031c g     F .text	00000098 IO_write
00011ab0 g     F .text	00000034 _exit
000107a8 g     F .text	0000012c alt_alarm_start
000074cc g     F .text	000001bc __smakebuf_r
000024c4 g     F .text	00000098 strlen
00011134 g     F .text	0000015c open
0000dd24 g     F .text	000000dc .hidden __gedf2
00014044 g     O .rwdata	00000004 __wctomb
00009d3c g     F .text	00000018 __sprint_r
00010bec g     F .text	00000020 alt_icache_flush_all
00014064 g     O .rwdata	00000004 alt_priority_mask
00010c5c g     F .text	00000088 alt_ic_irq_enable
00004838 g     F .text	0000001c __vfprintf_internal
0000bc28 g     F .text	0000005c _wctomb_r
0000e760 g     F .text	000008fc .hidden __subdf3
000086c8 g     F .text	000000b0 __lo0bits
00001780 g     F .text	00000190 UsbGetConfigDesc1
00014068 g     O .rwdata	00000008 alt_alarm_list
00010b2c g     F .text	00000060 _do_ctors
000012ac g     F .text	000000b4 UsbSoftReset
0000bb38 g     F .text	000000c0 wcrtomb
0000f300 g     F .text	000000d8 close
000015a8 g     F .text	000001d8 UsbGetDeviceDesc2
0000f648 g     F .text	00000084 alt_load
0000b754 g     F .text	00000080 fputwc
00006934 g     F .text	00000004 __sinit_lock_acquire
00008414 g     F .text	00000148 __multadd
000083ec g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	1096f004 	addi	r2,r2,23488
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	1096f004 	addi	r2,r2,23488
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_onchip_memory2_0+0xf7fff09c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_onchip_memory2_0+0xf7fff090>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6d917 	ldw	r2,-25756(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6d917 	ldw	r2,-25756(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6b00c14 	ori	gp,gp,49200
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	1096d714 	ori	r2,r2,23388

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18d73014 	ori	r3,r3,23744

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_mem_onchip_memory2_0+0xf7fff1c4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000f6480 	call	f648 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000f7e40 	call	f7e4 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_mem_onchip_memory2_0+0xf7fff1d8>

0000026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
     26c:	deffff04 	addi	sp,sp,-4
     270:	df000015 	stw	fp,0(sp)
     274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
     278:	00820034 	movhi	r2,2048
     27c:	10842004 	addi	r2,r2,4224
     280:	00c00044 	movi	r3,1
     284:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     288:	00820034 	movhi	r2,2048
     28c:	10841c04 	addi	r2,r2,4208
     290:	00c00044 	movi	r3,1
     294:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
     298:	00820034 	movhi	r2,2048
     29c:	10841404 	addi	r2,r2,4176
     2a0:	00c00044 	movi	r3,1
     2a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     2a8:	00820034 	movhi	r2,2048
     2ac:	10841804 	addi	r2,r2,4192
     2b0:	00c00044 	movi	r3,1
     2b4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2b8:	00820034 	movhi	r2,2048
     2bc:	10840c04 	addi	r2,r2,4144
     2c0:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2c4:	00820034 	movhi	r2,2048
     2c8:	10841004 	addi	r2,r2,4160
     2cc:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
     2d0:	00820034 	movhi	r2,2048
     2d4:	10841c04 	addi	r2,r2,4208
     2d8:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
     2dc:	00820034 	movhi	r2,2048
     2e0:	10842004 	addi	r2,r2,4224
     2e4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
     2e8:	00820034 	movhi	r2,2048
     2ec:	10842004 	addi	r2,r2,4224
     2f0:	00c00044 	movi	r3,1
     2f4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     2f8:	00820034 	movhi	r2,2048
     2fc:	10841c04 	addi	r2,r2,4208
     300:	00c00044 	movi	r3,1
     304:	10c00005 	stb	r3,0(r2)
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	df000017 	ldw	fp,0(sp)
     314:	dec00104 	addi	sp,sp,4
     318:	f800283a 	ret

0000031c <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     31c:	defffd04 	addi	sp,sp,-12
     320:	df000215 	stw	fp,8(sp)
     324:	df000204 	addi	fp,sp,8
     328:	2007883a 	mov	r3,r4
     32c:	2805883a 	mov	r2,r5
     330:	e0fffe05 	stb	r3,-8(fp)
     334:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
*otg_hpi_r = 1;
     338:	00820034 	movhi	r2,2048
     33c:	10841404 	addi	r2,r2,4176
     340:	00c00044 	movi	r3,1
     344:	10c00005 	stb	r3,0(r2)
*otg_hpi_address = Address;
     348:	00820034 	movhi	r2,2048
     34c:	10840c04 	addi	r2,r2,4144
     350:	e0fffe03 	ldbu	r3,-8(fp)
     354:	10c00015 	stw	r3,0(r2)
*otg_hpi_cs = 0;
     358:	00820034 	movhi	r2,2048
     35c:	10841c04 	addi	r2,r2,4208
     360:	10000005 	stb	zero,0(r2)
*otg_hpi_w = 0;
     364:	00820034 	movhi	r2,2048
     368:	10841804 	addi	r2,r2,4192
     36c:	10000005 	stb	zero,0(r2)
*otg_hpi_data = Data;
     370:	00820034 	movhi	r2,2048
     374:	10841004 	addi	r2,r2,4160
     378:	e0ffff0b 	ldhu	r3,-4(fp)
     37c:	10c00015 	stw	r3,0(r2)
*otg_hpi_w = 1;
     380:	00820034 	movhi	r2,2048
     384:	10841804 	addi	r2,r2,4192
     388:	00c00044 	movi	r3,1
     38c:	10c00005 	stb	r3,0(r2)
*otg_hpi_cs = 1;
     390:	00820034 	movhi	r2,2048
     394:	10841c04 	addi	r2,r2,4208
     398:	00c00044 	movi	r3,1
     39c:	10c00005 	stb	r3,0(r2)
}
     3a0:	0001883a 	nop
     3a4:	e037883a 	mov	sp,fp
     3a8:	df000017 	ldw	fp,0(sp)
     3ac:	dec00104 	addi	sp,sp,4
     3b0:	f800283a 	ret

000003b4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     3b4:	defffc04 	addi	sp,sp,-16
     3b8:	dfc00315 	stw	ra,12(sp)
     3bc:	df000215 	stw	fp,8(sp)
     3c0:	df000204 	addi	fp,sp,8
     3c4:	2005883a 	mov	r2,r4
     3c8:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_w = 1;
     3cc:	00820034 	movhi	r2,2048
     3d0:	10841804 	addi	r2,r2,4192
     3d4:	00c00044 	movi	r3,1
     3d8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address;
     3dc:	00820034 	movhi	r2,2048
     3e0:	10840c04 	addi	r2,r2,4144
     3e4:	e0ffff03 	ldbu	r3,-4(fp)
     3e8:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
     3ec:	00820034 	movhi	r2,2048
     3f0:	10841c04 	addi	r2,r2,4208
     3f4:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
     3f8:	00820034 	movhi	r2,2048
     3fc:	10841404 	addi	r2,r2,4176
     400:	10000005 	stb	zero,0(r2)

	temp = *otg_hpi_data;
     404:	00820034 	movhi	r2,2048
     408:	10841004 	addi	r2,r2,4160
     40c:	10800017 	ldw	r2,0(r2)
     410:	e0bffe0d 	sth	r2,-8(fp)
	printf("%x\n",temp);
     414:	e0bffe0b 	ldhu	r2,-8(fp)
     418:	100b883a 	mov	r5,r2
     41c:	01000074 	movhi	r4,1
     420:	2106b904 	addi	r4,r4,6884
     424:	00023b40 	call	23b4 <printf>
	*otg_hpi_r = 1;	
     428:	00820034 	movhi	r2,2048
     42c:	10841404 	addi	r2,r2,4176
     430:	00c00044 	movi	r3,1
     434:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
     438:	00820034 	movhi	r2,2048
     43c:	10841c04 	addi	r2,r2,4208
     440:	00c00044 	movi	r3,1
     444:	10c00005 	stb	r3,0(r2)
	return temp;
     448:	e0bffe0b 	ldhu	r2,-8(fp)
}
     44c:	e037883a 	mov	sp,fp
     450:	dfc00117 	ldw	ra,4(sp)
     454:	df000017 	ldw	fp,0(sp)
     458:	dec00204 	addi	sp,sp,8
     45c:	f800283a 	ret

00000460 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
     460:	defff904 	addi	sp,sp,-28
     464:	dfc00615 	stw	ra,24(sp)
     468:	df000515 	stw	fp,20(sp)
     46c:	df000504 	addi	fp,sp,20
	IO_init();
     470:	000026c0 	call	26c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
     474:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
     478:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
     47c:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
     480:	01000074 	movhi	r4,1
     484:	2106ba04 	addi	r4,r4,6888
     488:	00024b00 	call	24b0 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     48c:	00012ac0 	call	12ac <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     490:	000b883a 	mov	r5,zero
     494:	01005104 	movi	r4,324
     498:	00012080 	call	1208 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     49c:	017fffd4 	movui	r5,65535
     4a0:	01302414 	movui	r4,49296
     4a4:	00012080 	call	1208 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     4a8:	01409604 	movi	r5,600
     4ac:	01006d04 	movi	r4,436
     4b0:	00012080 	call	1208 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     4b4:	00811004 	movi	r2,1088
     4b8:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     4bc:	e0bffb0b 	ldhu	r2,-20(fp)
     4c0:	100b883a 	mov	r5,r2
     4c4:	01005084 	movi	r4,322
     4c8:	00012080 	call	1208 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     4cc:	00808404 	movi	r2,528
     4d0:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     4d4:	e0bffe0b 	ldhu	r2,-8(fp)
     4d8:	100b883a 	mov	r5,r2
     4dc:	01302314 	movui	r4,49292
     4e0:	00012080 	call	1208 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     4e4:	000b883a 	mov	r5,zero
     4e8:	01007104 	movi	r4,452
     4ec:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     4f0:	000b883a 	mov	r5,zero
     4f4:	01007184 	movi	r4,454
     4f8:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     4fc:	000b883a 	mov	r5,zero
     500:	01007204 	movi	r4,456
     504:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     508:	000b883a 	mov	r5,zero
     50c:	01007284 	movi	r4,458
     510:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     514:	000b883a 	mov	r5,zero
     518:	01007304 	movi	r4,460
     51c:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     520:	000b883a 	mov	r5,zero
     524:	01007384 	movi	r4,462
     528:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     52c:	000b883a 	mov	r5,zero
     530:	01007404 	movi	r4,464
     534:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     538:	000b883a 	mov	r5,zero
     53c:	01007484 	movi	r4,466
     540:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     544:	000b883a 	mov	r5,zero
     548:	01007504 	movi	r4,468
     54c:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     550:	000b883a 	mov	r5,zero
     554:	01007584 	movi	r4,470
     558:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     55c:	000b883a 	mov	r5,zero
     560:	01007604 	movi	r4,472
     564:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     568:	000b883a 	mov	r5,zero
     56c:	01007684 	movi	r4,474
     570:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     574:	000b883a 	mov	r5,zero
     578:	01007704 	movi	r4,476
     57c:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     580:	000b883a 	mov	r5,zero
     584:	01007784 	movi	r4,478
     588:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     58c:	01401c84 	movi	r5,114
     590:	01007084 	movi	r4,450
     594:	00012080 	call	1208 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     598:	01738054 	movui	r5,52737
     59c:	01000044 	movi	r4,1
     5a0:	000031c0 	call	31c <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     5a4:	0001883a 	nop
     5a8:	010000c4 	movi	r4,3
     5ac:	00003b40 	call	3b4 <IO_read>
     5b0:	10bfffcc 	andi	r2,r2,65535
     5b4:	103ffc26 	beq	r2,zero,5a8 <__alt_mem_onchip_memory2_0+0xf7fff518>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     5b8:	00000806 	br	5dc <main+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     5bc:	01000044 	movi	r4,1
     5c0:	00003b40 	call	3b4 <IO_read>
     5c4:	10bfffcc 	andi	r2,r2,65535
     5c8:	100b883a 	mov	r5,r2
     5cc:	01000074 	movhi	r4,1
     5d0:	2106c004 	addi	r4,r4,6912
     5d4:	00023b40 	call	23b4 <printf>
		goto USB_HOT_PLUG;
     5d8:	003fac06 	br	48c <__alt_mem_onchip_memory2_0+0xf7fff3fc>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     5dc:	01000044 	movi	r4,1
     5e0:	00003b40 	call	3b4 <IO_read>
     5e4:	10bfffcc 	andi	r2,r2,65535
     5e8:	1083fb58 	cmpnei	r2,r2,4077
     5ec:	103ff31e 	bne	r2,zero,5bc <__alt_mem_onchip_memory2_0+0xf7fff52c>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     5f0:	01000074 	movhi	r4,1
     5f4:	2106c904 	addi	r4,r4,6948
     5f8:	00023b40 	call	23b4 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     5fc:	01401d04 	movi	r5,116
     600:	01007084 	movi	r4,450
     604:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     608:	01400f04 	movi	r5,60
     60c:	01007104 	movi	r4,452
     610:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     614:	000b883a 	mov	r5,zero
     618:	01007184 	movi	r4,454
     61c:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     620:	000b883a 	mov	r5,zero
     624:	01007204 	movi	r4,456
     628:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     62c:	000b883a 	mov	r5,zero
     630:	01007284 	movi	r4,458
     634:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     638:	000b883a 	mov	r5,zero
     63c:	01007304 	movi	r4,460
     640:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     644:	000b883a 	mov	r5,zero
     648:	01007384 	movi	r4,462
     64c:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     650:	000b883a 	mov	r5,zero
     654:	01007404 	movi	r4,464
     658:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     65c:	000b883a 	mov	r5,zero
     660:	01007484 	movi	r4,466
     664:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     668:	000b883a 	mov	r5,zero
     66c:	01007504 	movi	r4,468
     670:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     674:	000b883a 	mov	r5,zero
     678:	01007584 	movi	r4,470
     67c:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     680:	000b883a 	mov	r5,zero
     684:	01007604 	movi	r4,472
     688:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     68c:	000b883a 	mov	r5,zero
     690:	01007684 	movi	r4,474
     694:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     698:	000b883a 	mov	r5,zero
     69c:	01007704 	movi	r4,476
     6a0:	00012080 	call	1208 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     6a4:	000b883a 	mov	r5,zero
     6a8:	01007784 	movi	r4,478
     6ac:	00012080 	call	1208 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     6b0:	01738054 	movui	r5,52737
     6b4:	01000044 	movi	r4,1
     6b8:	000031c0 	call	31c <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     6bc:	0001883a 	nop
     6c0:	01000044 	movi	r4,1
     6c4:	00003b40 	call	3b4 <IO_read>
     6c8:	10bfffcc 	andi	r2,r2,65535
     6cc:	1083fb58 	cmpnei	r2,r2,4077
     6d0:	10000826 	beq	r2,zero,6f4 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     6d4:	01000044 	movi	r4,1
     6d8:	00003b40 	call	3b4 <IO_read>
     6dc:	10bfffcc 	andi	r2,r2,65535
     6e0:	100b883a 	mov	r5,r2
     6e4:	01000074 	movhi	r4,1
     6e8:	2106c004 	addi	r4,r4,6912
     6ec:	00023b40 	call	23b4 <printf>
		goto USB_HOT_PLUG;
     6f0:	003f6606 	br	48c <__alt_mem_onchip_memory2_0+0xf7fff3fc>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     6f4:	00b02284 	movi	r2,-16246
     6f8:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     6fc:	008c0004 	movi	r2,12288
     700:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
     704:	00880004 	movi	r2,8192
     708:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
     70c:	d0a6cb0b 	ldhu	r2,-25812(gp)
     710:	10bfffcc 	andi	r2,r2,65535
     714:	1009883a 	mov	r4,r2
     718:	00012600 	call	1260 <UsbRead>
     71c:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
     720:	d0a6cb8b 	ldhu	r2,-25810(gp)
     724:	e0fffb0b 	ldhu	r3,-20(fp)
     728:	1884703a 	and	r2,r3,r2
     72c:	10bfffcc 	andi	r2,r2,65535
     730:	1000351e 	bne	r2,zero,808 <main+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     734:	e03ffbc5 	stb	zero,-17(fp)
     738:	00000f06 	br	778 <main+0x318>
		{
			usleep(5*1000);
     73c:	0104e204 	movi	r4,5000
     740:	000fb1c0 	call	fb1c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     744:	d0a6cb0b 	ldhu	r2,-25812(gp)
     748:	10bfffcc 	andi	r2,r2,65535
     74c:	1009883a 	mov	r4,r2
     750:	00012600 	call	1260 <UsbRead>
     754:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
     758:	d0a6cb8b 	ldhu	r2,-25810(gp)
     75c:	e0fffb0b 	ldhu	r3,-20(fp)
     760:	1884703a 	and	r2,r3,r2
     764:	10bfffcc 	andi	r2,r2,65535
     768:	1000071e 	bne	r2,zero,788 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     76c:	e0bffbc3 	ldbu	r2,-17(fp)
     770:	10800044 	addi	r2,r2,1
     774:	e0bffbc5 	stb	r2,-17(fp)
     778:	e0bffbc3 	ldbu	r2,-17(fp)
     77c:	10800170 	cmpltui	r2,r2,5
     780:	103fee1e 	bne	r2,zero,73c <__alt_mem_onchip_memory2_0+0xf7fff6ac>
     784:	00000106 	br	78c <main+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     788:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     78c:	d0a6cb8b 	ldhu	r2,-25810(gp)
     790:	e0fffb0b 	ldhu	r3,-20(fp)
     794:	1884703a 	and	r2,r3,r2
     798:	10bfffcc 	andi	r2,r2,65535
     79c:	1000261e 	bne	r2,zero,838 <main+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
     7a0:	01000074 	movhi	r4,1
     7a4:	2106cd04 	addi	r4,r4,6964
     7a8:	00024b00 	call	24b0 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
     7ac:	01000074 	movhi	r4,1
     7b0:	2106d704 	addi	r4,r4,7004
     7b4:	00024b00 	call	24b0 <puts>
			while (!(usb_ctl_val & no_device))
     7b8:	00000d06 	br	7f0 <main+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
     7bc:	d0a6cb0b 	ldhu	r2,-25812(gp)
     7c0:	10bfffcc 	andi	r2,r2,65535
     7c4:	1009883a 	mov	r4,r2
     7c8:	00012600 	call	1260 <UsbRead>
     7cc:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
     7d0:	d0a6cb8b 	ldhu	r2,-25810(gp)
     7d4:	e0fffb0b 	ldhu	r3,-20(fp)
     7d8:	1884703a 	and	r2,r3,r2
     7dc:	10bfffcc 	andi	r2,r2,65535
     7e0:	10000126 	beq	r2,zero,7e8 <main+0x388>
					goto USB_HOT_PLUG;
     7e4:	003f2906 	br	48c <__alt_mem_onchip_memory2_0+0xf7fff3fc>

				usleep(2000);
     7e8:	0101f404 	movi	r4,2000
     7ec:	000fb1c0 	call	fb1c <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
     7f0:	d0a6cb8b 	ldhu	r2,-25810(gp)
     7f4:	e0fffb0b 	ldhu	r3,-20(fp)
     7f8:	1884703a 	and	r2,r3,r2
     7fc:	10bfffcc 	andi	r2,r2,65535
     800:	103fee26 	beq	r2,zero,7bc <__alt_mem_onchip_memory2_0+0xf7fff72c>
     804:	00000c06 	br	838 <main+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     808:	e0fffb0b 	ldhu	r3,-20(fp)
     80c:	e0bffc0b 	ldhu	r2,-16(fp)
     810:	1884703a 	and	r2,r3,r2
     814:	10bfffcc 	andi	r2,r2,65535
     818:	10000426 	beq	r2,zero,82c <main+0x3cc>
		{
			printf("[INFO]: full speed device\n");
     81c:	01000074 	movhi	r4,1
     820:	2106e304 	addi	r4,r4,7052
     824:	00024b00 	call	24b0 <puts>
     828:	00000306 	br	838 <main+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     82c:	01000074 	movhi	r4,1
     830:	2106ea04 	addi	r4,r4,7080
     834:	00024b00 	call	24b0 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     838:	00013600 	call	1360 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     83c:	00000306 	br	84c <main+0x3ec>
	{
		UsbSetAddress();
     840:	00013600 	call	1360 <UsbSetAddress>
		usleep(10*1000);
     844:	0109c404 	movi	r4,10000
     848:	000fb1c0 	call	fb1c <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     84c:	010000c4 	movi	r4,3
     850:	00003b40 	call	3b4 <IO_read>
     854:	10bfffcc 	andi	r2,r2,65535
     858:	1080040c 	andi	r2,r2,16
     85c:	103ff826 	beq	r2,zero,840 <__alt_mem_onchip_memory2_0+0xf7fff7b0>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     860:	00022000 	call	2200 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     864:	01414184 	movi	r5,1286
     868:	01000084 	movi	r4,2
     86c:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     870:	0009883a 	mov	r4,zero
     874:	00003b40 	call	3b4 <IO_read>
     878:	10bfffcc 	andi	r2,r2,65535
     87c:	100b883a 	mov	r5,r2
     880:	01000074 	movhi	r4,1
     884:	2106f104 	addi	r4,r4,7108
     888:	00023b40 	call	23b4 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     88c:	01414204 	movi	r5,1288
     890:	01000084 	movi	r4,2
     894:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     898:	0009883a 	mov	r4,zero
     89c:	00003b40 	call	3b4 <IO_read>
     8a0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     8a4:	e0bffb0b 	ldhu	r2,-20(fp)
     8a8:	100b883a 	mov	r5,r2
     8ac:	01000074 	movhi	r4,1
     8b0:	2106fc04 	addi	r4,r4,7152
     8b4:	00023b40 	call	23b4 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     8b8:	e0bffb0b 	ldhu	r2,-20(fp)
     8bc:	108000e0 	cmpeqi	r2,r2,3
     8c0:	1000031e 	bne	r2,zero,8d0 <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
     8c4:	00022840 	call	2284 <UsbGetRetryCnt>
     8c8:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
     8cc:	003eef06 	br	48c <__alt_mem_onchip_memory2_0+0xf7fff3fc>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     8d0:	01000074 	movhi	r4,1
     8d4:	21070804 	addi	r4,r4,7200
     8d8:	00024b00 	call	24b0 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     8dc:	00014600 	call	1460 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     8e0:	00000306 	br	8f0 <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     8e4:	00014600 	call	1460 <UsbGetDeviceDesc1>
		usleep(10*1000);
     8e8:	0109c404 	movi	r4,10000
     8ec:	000fb1c0 	call	fb1c <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     8f0:	010000c4 	movi	r4,3
     8f4:	00003b40 	call	3b4 <IO_read>
     8f8:	10bfffcc 	andi	r2,r2,65535
     8fc:	1080040c 	andi	r2,r2,16
     900:	103ff826 	beq	r2,zero,8e4 <__alt_mem_onchip_memory2_0+0xf7fff854>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     904:	00022000 	call	2200 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     908:	01414184 	movi	r5,1286
     90c:	01000084 	movi	r4,2
     910:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     914:	0009883a 	mov	r4,zero
     918:	00003b40 	call	3b4 <IO_read>
     91c:	10bfffcc 	andi	r2,r2,65535
     920:	100b883a 	mov	r5,r2
     924:	01000074 	movhi	r4,1
     928:	21071704 	addi	r4,r4,7260
     92c:	00023b40 	call	23b4 <printf>

	IO_write(HPI_ADDR,0x0508);
     930:	01414204 	movi	r5,1288
     934:	01000084 	movi	r4,2
     938:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     93c:	0009883a 	mov	r4,zero
     940:	00003b40 	call	3b4 <IO_read>
     944:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     948:	e0bffb0b 	ldhu	r2,-20(fp)
     94c:	100b883a 	mov	r5,r2
     950:	01000074 	movhi	r4,1
     954:	21072204 	addi	r4,r4,7304
     958:	00023b40 	call	23b4 <printf>
	while (usb_ctl_val != 0x03)
     95c:	e0bffb0b 	ldhu	r2,-20(fp)
     960:	108000e0 	cmpeqi	r2,r2,3
     964:	1000061e 	bne	r2,zero,980 <main+0x520>
	{
		usb_ctl_val = UsbGetRetryCnt();
     968:	00022840 	call	2284 <UsbGetRetryCnt>
     96c:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     970:	01000074 	movhi	r4,1
     974:	21072e04 	addi	r4,r4,7352
     978:	00024b00 	call	24b0 <puts>
		goto USB_HOT_PLUG;
     97c:	003ec306 	br	48c <__alt_mem_onchip_memory2_0+0xf7fff3fc>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     980:	01000074 	movhi	r4,1
     984:	21073704 	addi	r4,r4,7388
     988:	00024b00 	call	24b0 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     98c:	00015a80 	call	15a8 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     990:	00000306 	br	9a0 <main+0x540>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     994:	00015a80 	call	15a8 <UsbGetDeviceDesc2>
		usleep(10*1000);
     998:	0109c404 	movi	r4,10000
     99c:	000fb1c0 	call	fb1c <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     9a0:	010000c4 	movi	r4,3
     9a4:	00003b40 	call	3b4 <IO_read>
     9a8:	10bfffcc 	andi	r2,r2,65535
     9ac:	1080040c 	andi	r2,r2,16
     9b0:	103ff826 	beq	r2,zero,994 <__alt_mem_onchip_memory2_0+0xf7fff904>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     9b4:	00022000 	call	2200 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     9b8:	01414184 	movi	r5,1286
     9bc:	01000084 	movi	r4,2
     9c0:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     9c4:	0009883a 	mov	r4,zero
     9c8:	00003b40 	call	3b4 <IO_read>
     9cc:	10bfffcc 	andi	r2,r2,65535
     9d0:	100b883a 	mov	r5,r2
     9d4:	01000074 	movhi	r4,1
     9d8:	21071704 	addi	r4,r4,7260
     9dc:	00023b40 	call	23b4 <printf>

	IO_write(HPI_ADDR,0x0508);
     9e0:	01414204 	movi	r5,1288
     9e4:	01000084 	movi	r4,2
     9e8:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     9ec:	0009883a 	mov	r4,zero
     9f0:	00003b40 	call	3b4 <IO_read>
     9f4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     9f8:	e0bffb0b 	ldhu	r2,-20(fp)
     9fc:	100b883a 	mov	r5,r2
     a00:	01000074 	movhi	r4,1
     a04:	21072204 	addi	r4,r4,7304
     a08:	00023b40 	call	23b4 <printf>
	while (usb_ctl_val != 0x03)
     a0c:	e0bffb0b 	ldhu	r2,-20(fp)
     a10:	108000e0 	cmpeqi	r2,r2,3
     a14:	1000061e 	bne	r2,zero,a30 <main+0x5d0>
	{
		usb_ctl_val = UsbGetRetryCnt();
     a18:	00022840 	call	2284 <UsbGetRetryCnt>
     a1c:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     a20:	01000074 	movhi	r4,1
     a24:	21072e04 	addi	r4,r4,7352
     a28:	00024b00 	call	24b0 <puts>
		goto USB_HOT_PLUG;
     a2c:	003e9706 	br	48c <__alt_mem_onchip_memory2_0+0xf7fff3fc>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     a30:	01000074 	movhi	r4,1
     a34:	21074b04 	addi	r4,r4,7468
     a38:	00024b00 	call	24b0 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     a3c:	00017800 	call	1780 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a40:	00000306 	br	a50 <main+0x5f0>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     a44:	00017800 	call	1780 <UsbGetConfigDesc1>
		usleep(10*1000);
     a48:	0109c404 	movi	r4,10000
     a4c:	000fb1c0 	call	fb1c <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a50:	010000c4 	movi	r4,3
     a54:	00003b40 	call	3b4 <IO_read>
     a58:	10bfffcc 	andi	r2,r2,65535
     a5c:	1080040c 	andi	r2,r2,16
     a60:	103ff826 	beq	r2,zero,a44 <__alt_mem_onchip_memory2_0+0xf7fff9b4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     a64:	00022000 	call	2200 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     a68:	01414184 	movi	r5,1286
     a6c:	01000084 	movi	r4,2
     a70:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     a74:	0009883a 	mov	r4,zero
     a78:	00003b40 	call	3b4 <IO_read>
     a7c:	10bfffcc 	andi	r2,r2,65535
     a80:	100b883a 	mov	r5,r2
     a84:	01000074 	movhi	r4,1
     a88:	21075d04 	addi	r4,r4,7540
     a8c:	00023b40 	call	23b4 <printf>

	IO_write(HPI_ADDR,0x0508);
     a90:	01414204 	movi	r5,1288
     a94:	01000084 	movi	r4,2
     a98:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     a9c:	0009883a 	mov	r4,zero
     aa0:	00003b40 	call	3b4 <IO_read>
     aa4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     aa8:	e0bffb0b 	ldhu	r2,-20(fp)
     aac:	100b883a 	mov	r5,r2
     ab0:	01000074 	movhi	r4,1
     ab4:	21076804 	addi	r4,r4,7584
     ab8:	00023b40 	call	23b4 <printf>
	while (usb_ctl_val != 0x03)
     abc:	e0bffb0b 	ldhu	r2,-20(fp)
     ac0:	108000e0 	cmpeqi	r2,r2,3
     ac4:	1000061e 	bne	r2,zero,ae0 <main+0x680>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ac8:	00022840 	call	2284 <UsbGetRetryCnt>
     acc:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     ad0:	01000074 	movhi	r4,1
     ad4:	21072e04 	addi	r4,r4,7352
     ad8:	00024b00 	call	24b0 <puts>
		goto USB_HOT_PLUG;
     adc:	003e6b06 	br	48c <__alt_mem_onchip_memory2_0+0xf7fff3fc>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     ae0:	01000074 	movhi	r4,1
     ae4:	21077404 	addi	r4,r4,7632
     ae8:	00024b00 	call	24b0 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     aec:	00019100 	call	1910 <UsbGetConfigDesc2>

	usleep(100*1000);
     af0:	010000b4 	movhi	r4,2
     af4:	2121a804 	addi	r4,r4,-31072
     af8:	000fb1c0 	call	fb1c <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     afc:	00000306 	br	b0c <main+0x6ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     b00:	00019100 	call	1910 <UsbGetConfigDesc2>
		usleep(10*1000);
     b04:	0109c404 	movi	r4,10000
     b08:	000fb1c0 	call	fb1c <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b0c:	010000c4 	movi	r4,3
     b10:	00003b40 	call	3b4 <IO_read>
     b14:	10bfffcc 	andi	r2,r2,65535
     b18:	1080040c 	andi	r2,r2,16
     b1c:	103ff826 	beq	r2,zero,b00 <__alt_mem_onchip_memory2_0+0xf7fffa70>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     b20:	00022000 	call	2200 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     b24:	01414184 	movi	r5,1286
     b28:	01000084 	movi	r4,2
     b2c:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     b30:	0009883a 	mov	r4,zero
     b34:	00003b40 	call	3b4 <IO_read>
     b38:	10bfffcc 	andi	r2,r2,65535
     b3c:	100b883a 	mov	r5,r2
     b40:	01000074 	movhi	r4,1
     b44:	21078704 	addi	r4,r4,7708
     b48:	00023b40 	call	23b4 <printf>

	IO_write(HPI_ADDR,0x0508);
     b4c:	01414204 	movi	r5,1288
     b50:	01000084 	movi	r4,2
     b54:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     b58:	0009883a 	mov	r4,zero
     b5c:	00003b40 	call	3b4 <IO_read>
     b60:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     b64:	e0bffb0b 	ldhu	r2,-20(fp)
     b68:	100b883a 	mov	r5,r2
     b6c:	01000074 	movhi	r4,1
     b70:	21079204 	addi	r4,r4,7752
     b74:	00023b40 	call	23b4 <printf>
	while (usb_ctl_val != 0x03)
     b78:	e0bffb0b 	ldhu	r2,-20(fp)
     b7c:	108000e0 	cmpeqi	r2,r2,3
     b80:	1000061e 	bne	r2,zero,b9c <main+0x73c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     b84:	00022840 	call	2284 <UsbGetRetryCnt>
     b88:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     b8c:	01000074 	movhi	r4,1
     b90:	21072e04 	addi	r4,r4,7352
     b94:	00024b00 	call	24b0 <puts>
		goto USB_HOT_PLUG;
     b98:	003e3c06 	br	48c <__alt_mem_onchip_memory2_0+0xf7fff3fc>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     b9c:	01000074 	movhi	r4,1
     ba0:	21079e04 	addi	r4,r4,7800
     ba4:	00024b00 	call	24b0 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     ba8:	01415b04 	movi	r5,1388
     bac:	01000084 	movi	r4,2
     bb0:	000031c0 	call	31c <IO_write>
	code = IO_read(HPI_DATA);
     bb4:	0009883a 	mov	r4,zero
     bb8:	00003b40 	call	3b4 <IO_read>
     bbc:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
     bc0:	e0bffe8b 	ldhu	r2,-6(fp)
     bc4:	108000cc 	andi	r2,r2,3
     bc8:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
     bcc:	e0bffe8b 	ldhu	r2,-6(fp)
     bd0:	100b883a 	mov	r5,r2
     bd4:	01000074 	movhi	r4,1
     bd8:	2107b104 	addi	r4,r4,7876
     bdc:	00023b40 	call	23b4 <printf>

	if (code == 0x01)
     be0:	e0bffe8b 	ldhu	r2,-6(fp)
     be4:	10800058 	cmpnei	r2,r2,1
     be8:	1000041e 	bne	r2,zero,bfc <main+0x79c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     bec:	01000074 	movhi	r4,1
     bf0:	2107b404 	addi	r4,r4,7888
     bf4:	00024b00 	call	24b0 <puts>
     bf8:	00000306 	br	c08 <main+0x7a8>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     bfc:	01000074 	movhi	r4,1
     c00:	2107c304 	addi	r4,r4,7948
     c04:	00024b00 	call	24b0 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     c08:	01415d84 	movi	r5,1398
     c0c:	01000084 	movi	r4,2
     c10:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x073F);
     c14:	0141cfc4 	movi	r5,1855
     c18:	0009883a 	mov	r4,zero
     c1c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x8105);
     c20:	01604154 	movui	r5,33029
     c24:	0009883a 	mov	r4,zero
     c28:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0003);
     c2c:	014000c4 	movi	r5,3
     c30:	0009883a 	mov	r4,zero
     c34:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);
     c38:	01400204 	movi	r5,8
     c3c:	0009883a 	mov	r4,zero
     c40:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     c44:	016b0294 	movui	r5,44042
     c48:	0009883a 	mov	r4,zero
     c4c:	000031c0 	call	31c <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     c50:	01415d84 	movi	r5,1398
     c54:	01006c04 	movi	r4,432
     c58:	00012080 	call	1208 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     c5c:	01415f04 	movi	r5,1404
     c60:	01000084 	movi	r4,2
     c64:	000031c0 	call	31c <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     c68:	0009883a 	mov	r4,zero
     c6c:	00003b40 	call	3b4 <IO_read>
     c70:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     c74:	e0bfff03 	ldbu	r2,-4(fp)
     c78:	100b883a 	mov	r5,r2
     c7c:	01000074 	movhi	r4,1
     c80:	2107cc04 	addi	r4,r4,7984
     c84:	00023b40 	call	23b4 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     c88:	0001b780 	call	1b78 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c8c:	00000306 	br	c9c <main+0x83c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     c90:	0001b780 	call	1b78 <UsbSetConfig>
		usleep(10*1000);
     c94:	0109c404 	movi	r4,10000
     c98:	000fb1c0 	call	fb1c <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c9c:	010000c4 	movi	r4,3
     ca0:	00003b40 	call	3b4 <IO_read>
     ca4:	10bfffcc 	andi	r2,r2,65535
     ca8:	1080040c 	andi	r2,r2,16
     cac:	103ff826 	beq	r2,zero,c90 <__alt_mem_onchip_memory2_0+0xf7fffc00>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     cb0:	00022000 	call	2200 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     cb4:	01414184 	movi	r5,1286
     cb8:	01000084 	movi	r4,2
     cbc:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     cc0:	0009883a 	mov	r4,zero
     cc4:	00003b40 	call	3b4 <IO_read>
     cc8:	10bfffcc 	andi	r2,r2,65535
     ccc:	100b883a 	mov	r5,r2
     cd0:	01000074 	movhi	r4,1
     cd4:	2107d604 	addi	r4,r4,8024
     cd8:	00023b40 	call	23b4 <printf>

	IO_write(HPI_ADDR,0x0508);
     cdc:	01414204 	movi	r5,1288
     ce0:	01000084 	movi	r4,2
     ce4:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     ce8:	0009883a 	mov	r4,zero
     cec:	00003b40 	call	3b4 <IO_read>
     cf0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
     cf4:	e0bffb0b 	ldhu	r2,-20(fp)
     cf8:	100b883a 	mov	r5,r2
     cfc:	01000074 	movhi	r4,1
     d00:	2107e104 	addi	r4,r4,8068
     d04:	00023b40 	call	23b4 <printf>
	while (usb_ctl_val != 0x03)
     d08:	e0bffb0b 	ldhu	r2,-20(fp)
     d0c:	108000e0 	cmpeqi	r2,r2,3
     d10:	1000061e 	bne	r2,zero,d2c <main+0x8cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
     d14:	00022840 	call	2284 <UsbGetRetryCnt>
     d18:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     d1c:	01000074 	movhi	r4,1
     d20:	21072e04 	addi	r4,r4,7352
     d24:	00024b00 	call	24b0 <puts>
		goto USB_HOT_PLUG;
     d28:	003dd806 	br	48c <__alt_mem_onchip_memory2_0+0xf7fff3fc>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
     d2c:	01000074 	movhi	r4,1
     d30:	2107ed04 	addi	r4,r4,8116
     d34:	00024b00 	call	24b0 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
     d38:	0001c780 	call	1c78 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d3c:	00000306 	br	d4c <main+0x8ec>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
     d40:	0001c780 	call	1c78 <UsbClassRequest>
		usleep(10*1000);
     d44:	0109c404 	movi	r4,10000
     d48:	000fb1c0 	call	fb1c <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d4c:	010000c4 	movi	r4,3
     d50:	00003b40 	call	3b4 <IO_read>
     d54:	10bfffcc 	andi	r2,r2,65535
     d58:	1080040c 	andi	r2,r2,16
     d5c:	103ff826 	beq	r2,zero,d40 <__alt_mem_onchip_memory2_0+0xf7fffcb0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     d60:	00022000 	call	2200 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     d64:	01414184 	movi	r5,1286
     d68:	01000084 	movi	r4,2
     d6c:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     d70:	0009883a 	mov	r4,zero
     d74:	00003b40 	call	3b4 <IO_read>
     d78:	10bfffcc 	andi	r2,r2,65535
     d7c:	100b883a 	mov	r5,r2
     d80:	01000074 	movhi	r4,1
     d84:	2107ff04 	addi	r4,r4,8188
     d88:	00023b40 	call	23b4 <printf>

	IO_write(HPI_ADDR,0x0508);
     d8c:	01414204 	movi	r5,1288
     d90:	01000084 	movi	r4,2
     d94:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     d98:	0009883a 	mov	r4,zero
     d9c:	00003b40 	call	3b4 <IO_read>
     da0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     da4:	e0bffb0b 	ldhu	r2,-20(fp)
     da8:	100b883a 	mov	r5,r2
     dac:	01000074 	movhi	r4,1
     db0:	21080a04 	addi	r4,r4,8232
     db4:	00023b40 	call	23b4 <printf>
	while (usb_ctl_val != 0x03)
     db8:	e0bffb0b 	ldhu	r2,-20(fp)
     dbc:	108000e0 	cmpeqi	r2,r2,3
     dc0:	1000061e 	bne	r2,zero,ddc <main+0x97c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     dc4:	00022840 	call	2284 <UsbGetRetryCnt>
     dc8:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     dcc:	01000074 	movhi	r4,1
     dd0:	21072e04 	addi	r4,r4,7352
     dd4:	00024b00 	call	24b0 <puts>
		goto USB_HOT_PLUG;
     dd8:	003dac06 	br	48c <__alt_mem_onchip_memory2_0+0xf7fff3fc>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
     ddc:	01000074 	movhi	r4,1
     de0:	21081604 	addi	r4,r4,8280
     de4:	00024b00 	call	24b0 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
     de8:	0001d780 	call	1d78 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     dec:	00000306 	br	dfc <main+0x99c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
     df0:	0001d780 	call	1d78 <UsbGetHidDesc>
		usleep(10*1000);
     df4:	0109c404 	movi	r4,10000
     df8:	000fb1c0 	call	fb1c <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     dfc:	010000c4 	movi	r4,3
     e00:	00003b40 	call	3b4 <IO_read>
     e04:	10bfffcc 	andi	r2,r2,65535
     e08:	1080040c 	andi	r2,r2,16
     e0c:	103ff826 	beq	r2,zero,df0 <__alt_mem_onchip_memory2_0+0xf7fffd60>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     e10:	00022000 	call	2200 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     e14:	01414184 	movi	r5,1286
     e18:	01000084 	movi	r4,2
     e1c:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     e20:	0009883a 	mov	r4,zero
     e24:	00003b40 	call	3b4 <IO_read>
     e28:	10bfffcc 	andi	r2,r2,65535
     e2c:	100b883a 	mov	r5,r2
     e30:	01000074 	movhi	r4,1
     e34:	2107ff04 	addi	r4,r4,8188
     e38:	00023b40 	call	23b4 <printf>

	IO_write(HPI_ADDR,0x0508);
     e3c:	01414204 	movi	r5,1288
     e40:	01000084 	movi	r4,2
     e44:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     e48:	0009883a 	mov	r4,zero
     e4c:	00003b40 	call	3b4 <IO_read>
     e50:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     e54:	e0bffb0b 	ldhu	r2,-20(fp)
     e58:	100b883a 	mov	r5,r2
     e5c:	01000074 	movhi	r4,1
     e60:	21080a04 	addi	r4,r4,8232
     e64:	00023b40 	call	23b4 <printf>
	while (usb_ctl_val != 0x03)
     e68:	e0bffb0b 	ldhu	r2,-20(fp)
     e6c:	108000e0 	cmpeqi	r2,r2,3
     e70:	1000061e 	bne	r2,zero,e8c <main+0xa2c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e74:	00022840 	call	2284 <UsbGetRetryCnt>
     e78:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     e7c:	01000074 	movhi	r4,1
     e80:	21072e04 	addi	r4,r4,7352
     e84:	00024b00 	call	24b0 <puts>
		goto USB_HOT_PLUG;
     e88:	003d8006 	br	48c <__alt_mem_onchip_memory2_0+0xf7fff3fc>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
     e8c:	01000074 	movhi	r4,1
     e90:	21082804 	addi	r4,r4,8352
     e94:	00024b00 	call	24b0 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
     e98:	0001ec00 	call	1ec0 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e9c:	00000306 	br	eac <main+0xa4c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
     ea0:	0001ec00 	call	1ec0 <UsbGetReportDesc>
		usleep(10*1000);
     ea4:	0109c404 	movi	r4,10000
     ea8:	000fb1c0 	call	fb1c <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     eac:	010000c4 	movi	r4,3
     eb0:	00003b40 	call	3b4 <IO_read>
     eb4:	10bfffcc 	andi	r2,r2,65535
     eb8:	1080040c 	andi	r2,r2,16
     ebc:	103ff826 	beq	r2,zero,ea0 <__alt_mem_onchip_memory2_0+0xf7fffe10>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     ec0:	00022000 	call	2200 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     ec4:	01414184 	movi	r5,1286
     ec8:	01000084 	movi	r4,2
     ecc:	000031c0 	call	31c <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
     ed0:	0009883a 	mov	r4,zero
     ed4:	00003b40 	call	3b4 <IO_read>
     ed8:	10bfffcc 	andi	r2,r2,65535
     edc:	100b883a 	mov	r5,r2
     ee0:	01000074 	movhi	r4,1
     ee4:	21083c04 	addi	r4,r4,8432
     ee8:	00023b40 	call	23b4 <printf>

	IO_write(HPI_ADDR,0x0508);
     eec:	01414204 	movi	r5,1288
     ef0:	01000084 	movi	r4,2
     ef4:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     ef8:	0009883a 	mov	r4,zero
     efc:	00003b40 	call	3b4 <IO_read>
     f00:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
     f04:	e0bffb0b 	ldhu	r2,-20(fp)
     f08:	100b883a 	mov	r5,r2
     f0c:	01000074 	movhi	r4,1
     f10:	21084804 	addi	r4,r4,8480
     f14:	00023b40 	call	23b4 <printf>
	while (usb_ctl_val != 0x03)
     f18:	e0bffb0b 	ldhu	r2,-20(fp)
     f1c:	108000e0 	cmpeqi	r2,r2,3
     f20:	1000061e 	bne	r2,zero,f3c <main+0xadc>
	{
		usb_ctl_val = UsbGetRetryCnt();
     f24:	00022840 	call	2284 <UsbGetRetryCnt>
     f28:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
     f2c:	01000074 	movhi	r4,1
     f30:	21072e04 	addi	r4,r4,7352
     f34:	00024b00 	call	24b0 <puts>
		goto USB_HOT_PLUG;
     f38:	003d5406 	br	48c <__alt_mem_onchip_memory2_0+0xf7fff3fc>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
     f3c:	01000074 	movhi	r4,1
     f40:	21085404 	addi	r4,r4,8528
     f44:	00024b00 	call	24b0 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
     f48:	0109c404 	movi	r4,10000
     f4c:	000fb1c0 	call	fb1c <usleep>
	while(1)
	{
		toggle++;
     f50:	e0bffb83 	ldbu	r2,-18(fp)
     f54:	10800044 	addi	r2,r2,1
     f58:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
     f5c:	01414004 	movi	r5,1280
     f60:	01000084 	movi	r4,2
     f64:	000031c0 	call	31c <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
     f68:	01414704 	movi	r5,1308
     f6c:	0009883a 	mov	r4,zero
     f70:	000031c0 	call	31c <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
     f74:	e0bfff03 	ldbu	r2,-4(fp)
     f78:	108003cc 	andi	r2,r2,15
     f7c:	100b883a 	mov	r5,r2
     f80:	0009883a 	mov	r4,zero
     f84:	000031c0 	call	31c <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     f88:	0140a444 	movi	r5,657
     f8c:	0009883a 	mov	r4,zero
     f90:	000031c0 	call	31c <IO_write>
		if(toggle%2)
     f94:	e0bffb83 	ldbu	r2,-18(fp)
     f98:	1080004c 	andi	r2,r2,1
     f9c:	10803fcc 	andi	r2,r2,255
     fa0:	10000426 	beq	r2,zero,fb4 <main+0xb54>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
     fa4:	01400044 	movi	r5,1
     fa8:	0009883a 	mov	r4,zero
     fac:	000031c0 	call	31c <IO_write>
     fb0:	00000306 	br	fc0 <main+0xb60>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
     fb4:	01401044 	movi	r5,65
     fb8:	0009883a 	mov	r4,zero
     fbc:	000031c0 	call	31c <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
     fc0:	014004c4 	movi	r5,19
     fc4:	0009883a 	mov	r4,zero
     fc8:	000031c0 	call	31c <IO_write>
		IO_write(HPI_DATA,0x0000);//a
     fcc:	000b883a 	mov	r5,zero
     fd0:	0009883a 	mov	r4,zero
     fd4:	000031c0 	call	31c <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     fd8:	01414004 	movi	r5,1280
     fdc:	01006c04 	movi	r4,432
     fe0:	00012080 	call	1208 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     fe4:	00002406 	br	1078 <main+0xc18>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
     fe8:	01414004 	movi	r5,1280
     fec:	01000084 	movi	r4,2
     ff0:	000031c0 	call	31c <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
     ff4:	01414704 	movi	r5,1308
     ff8:	0009883a 	mov	r4,zero
     ffc:	000031c0 	call	31c <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
    1000:	e0bfff03 	ldbu	r2,-4(fp)
    1004:	108003cc 	andi	r2,r2,15
    1008:	100b883a 	mov	r5,r2
    100c:	0009883a 	mov	r4,zero
    1010:	000031c0 	call	31c <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
    1014:	0140a444 	movi	r5,657
    1018:	0009883a 	mov	r4,zero
    101c:	000031c0 	call	31c <IO_write>
			if(toggle%2)
    1020:	e0bffb83 	ldbu	r2,-18(fp)
    1024:	1080004c 	andi	r2,r2,1
    1028:	10803fcc 	andi	r2,r2,255
    102c:	10000426 	beq	r2,zero,1040 <main+0xbe0>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
    1030:	01400044 	movi	r5,1
    1034:	0009883a 	mov	r4,zero
    1038:	000031c0 	call	31c <IO_write>
    103c:	00000306 	br	104c <main+0xbec>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
    1040:	01401044 	movi	r5,65
    1044:	0009883a 	mov	r4,zero
    1048:	000031c0 	call	31c <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
    104c:	014004c4 	movi	r5,19
    1050:	0009883a 	mov	r4,zero
    1054:	000031c0 	call	31c <IO_write>
			IO_write(HPI_DATA,0x0000);//
    1058:	000b883a 	mov	r5,zero
    105c:	0009883a 	mov	r4,zero
    1060:	000031c0 	call	31c <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1064:	01414004 	movi	r5,1280
    1068:	01006c04 	movi	r4,432
    106c:	00012080 	call	1208 <UsbWrite>
			usleep(10*1000);
    1070:	0109c404 	movi	r4,10000
    1074:	000fb1c0 	call	fb1c <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1078:	010000c4 	movi	r4,3
    107c:	00003b40 	call	3b4 <IO_read>
    1080:	10bfffcc 	andi	r2,r2,65535
    1084:	1080040c 	andi	r2,r2,16
    1088:	103fd726 	beq	r2,zero,fe8 <__alt_mem_onchip_memory2_0+0xf7ffff58>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
    108c:	00022000 	call	2200 <UsbWaitTDListDone>
    1090:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
    1094:	01014784 	movi	r4,1310
    1098:	00012600 	call	1260 <UsbRead>
    109c:	10bfffcc 	andi	r2,r2,65535
    10a0:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
    10a4:	e17ffd17 	ldw	r5,-12(fp)
    10a8:	01000074 	movhi	r4,1
    10ac:	21086804 	addi	r4,r4,8608
    10b0:	00023b40 	call	23b4 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
    10b4:	00820034 	movhi	r2,2048
    10b8:	10840804 	addi	r2,r2,4128
    10bc:	e0fffd17 	ldw	r3,-12(fp)
    10c0:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
    10c4:	01003204 	movi	r4,200
    10c8:	000fb1c0 	call	fb1c <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
    10cc:	d0a6cb0b 	ldhu	r2,-25812(gp)
    10d0:	10bfffcc 	andi	r2,r2,65535
    10d4:	1009883a 	mov	r4,r2
    10d8:	00012600 	call	1260 <UsbRead>
    10dc:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
    10e0:	d0a6cb8b 	ldhu	r2,-25810(gp)
    10e4:	e0fffb0b 	ldhu	r3,-20(fp)
    10e8:	1884703a 	and	r2,r3,r2
    10ec:	10bfffcc 	andi	r2,r2,65535
    10f0:	10003f1e 	bne	r2,zero,11f0 <main+0xd90>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
    10f4:	e03ffbc5 	stb	zero,-17(fp)
    10f8:	00000f06 	br	1138 <main+0xcd8>
			{
				usleep(5*1000);
    10fc:	0104e204 	movi	r4,5000
    1100:	000fb1c0 	call	fb1c <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
    1104:	d0a6cb0b 	ldhu	r2,-25812(gp)
    1108:	10bfffcc 	andi	r2,r2,65535
    110c:	1009883a 	mov	r4,r2
    1110:	00012600 	call	1260 <UsbRead>
    1114:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
    1118:	d0a6cb8b 	ldhu	r2,-25810(gp)
    111c:	e0fffb0b 	ldhu	r3,-20(fp)
    1120:	1884703a 	and	r2,r3,r2
    1124:	10bfffcc 	andi	r2,r2,65535
    1128:	1000071e 	bne	r2,zero,1148 <main+0xce8>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
    112c:	e0bffbc3 	ldbu	r2,-17(fp)
    1130:	10800044 	addi	r2,r2,1
    1134:	e0bffbc5 	stb	r2,-17(fp)
    1138:	e0bffbc3 	ldbu	r2,-17(fp)
    113c:	108001f0 	cmpltui	r2,r2,7
    1140:	103fee1e 	bne	r2,zero,10fc <__alt_mem_onchip_memory2_0+0xf800006c>
    1144:	00000106 	br	114c <main+0xcec>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
    1148:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
    114c:	d0a6cb8b 	ldhu	r2,-25810(gp)
    1150:	e0fffb0b 	ldhu	r3,-20(fp)
    1154:	1884703a 	and	r2,r3,r2
    1158:	10bfffcc 	andi	r2,r2,65535
    115c:	1000241e 	bne	r2,zero,11f0 <main+0xd90>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
    1160:	01000074 	movhi	r4,1
    1164:	21087104 	addi	r4,r4,8644
    1168:	00024b00 	call	24b0 <puts>
				printf("[INFO]: please insert again!!! \n");
    116c:	01000074 	movhi	r4,1
    1170:	21087c04 	addi	r4,r4,8688
    1174:	00024b00 	call	24b0 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
    1178:	00001d06 	br	11f0 <main+0xd90>
		{

			usb_ctl_val = UsbRead(ctl_reg);
    117c:	d0a6cb0b 	ldhu	r2,-25812(gp)
    1180:	10bfffcc 	andi	r2,r2,65535
    1184:	1009883a 	mov	r4,r2
    1188:	00012600 	call	1260 <UsbRead>
    118c:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
    1190:	0104e204 	movi	r4,5000
    1194:	000fb1c0 	call	fb1c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
    1198:	d0a6cb0b 	ldhu	r2,-25812(gp)
    119c:	10bfffcc 	andi	r2,r2,65535
    11a0:	1009883a 	mov	r4,r2
    11a4:	00012600 	call	1260 <UsbRead>
    11a8:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
    11ac:	0104e204 	movi	r4,5000
    11b0:	000fb1c0 	call	fb1c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
    11b4:	d0a6cb0b 	ldhu	r2,-25812(gp)
    11b8:	10bfffcc 	andi	r2,r2,65535
    11bc:	1009883a 	mov	r4,r2
    11c0:	00012600 	call	1260 <UsbRead>
    11c4:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
    11c8:	0104e204 	movi	r4,5000
    11cc:	000fb1c0 	call	fb1c <usleep>

			if(usb_ctl_val & no_device)
    11d0:	d0a6cb8b 	ldhu	r2,-25810(gp)
    11d4:	e0fffb0b 	ldhu	r3,-20(fp)
    11d8:	1884703a 	and	r2,r3,r2
    11dc:	10bfffcc 	andi	r2,r2,65535
    11e0:	10000126 	beq	r2,zero,11e8 <main+0xd88>
				goto USB_HOT_PLUG;
    11e4:	003ca906 	br	48c <__alt_mem_onchip_memory2_0+0xf7fff3fc>

			usleep(200);
    11e8:	01003204 	movi	r4,200
    11ec:	000fb1c0 	call	fb1c <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
    11f0:	d0a6cb8b 	ldhu	r2,-25810(gp)
    11f4:	e0fffb0b 	ldhu	r3,-20(fp)
    11f8:	1884703a 	and	r2,r3,r2
    11fc:	10bfffcc 	andi	r2,r2,65535
    1200:	103fde26 	beq	r2,zero,117c <__alt_mem_onchip_memory2_0+0xf80000ec>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
    1204:	003f5206 	br	f50 <__alt_mem_onchip_memory2_0+0xf7fffec0>

00001208 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    1208:	defffc04 	addi	sp,sp,-16
    120c:	dfc00315 	stw	ra,12(sp)
    1210:	df000215 	stw	fp,8(sp)
    1214:	df000204 	addi	fp,sp,8
    1218:	2007883a 	mov	r3,r4
    121c:	2805883a 	mov	r2,r5
    1220:	e0fffe0d 	sth	r3,-8(fp)
    1224:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
    1228:	e0bffe0b 	ldhu	r2,-8(fp)
    122c:	100b883a 	mov	r5,r2
    1230:	01000084 	movi	r4,2
    1234:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA, Data);
    1238:	e0bfff0b 	ldhu	r2,-4(fp)
    123c:	100b883a 	mov	r5,r2
    1240:	0009883a 	mov	r4,zero
    1244:	000031c0 	call	31c <IO_write>
}
    1248:	0001883a 	nop
    124c:	e037883a 	mov	sp,fp
    1250:	dfc00117 	ldw	ra,4(sp)
    1254:	df000017 	ldw	fp,0(sp)
    1258:	dec00204 	addi	sp,sp,8
    125c:	f800283a 	ret

00001260 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    1260:	defffc04 	addi	sp,sp,-16
    1264:	dfc00315 	stw	ra,12(sp)
    1268:	df000215 	stw	fp,8(sp)
    126c:	df000204 	addi	fp,sp,8
    1270:	2005883a 	mov	r2,r4
    1274:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
    1278:	e0bfff0b 	ldhu	r2,-4(fp)
    127c:	100b883a 	mov	r5,r2
    1280:	01000084 	movi	r4,2
    1284:	000031c0 	call	31c <IO_write>
	alt_u16 temp = IO_read(HPI_DATA);
    1288:	0009883a 	mov	r4,zero
    128c:	00003b40 	call	3b4 <IO_read>
    1290:	e0bffe0d 	sth	r2,-8(fp)
	return temp;
    1294:	e0bffe0b 	ldhu	r2,-8(fp)
}
    1298:	e037883a 	mov	sp,fp
    129c:	dfc00117 	ldw	ra,4(sp)
    12a0:	df000017 	ldw	fp,0(sp)
    12a4:	dec00204 	addi	sp,sp,8
    12a8:	f800283a 	ret

000012ac <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    12ac:	defffe04 	addi	sp,sp,-8
    12b0:	dfc00115 	stw	ra,4(sp)
    12b4:	df000015 	stw	fp,0(sp)
    12b8:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    12bc:	017e9414 	movui	r5,64080
    12c0:	01000044 	movi	r4,1
    12c4:	000031c0 	call	31c <IO_write>
	usleep(100000);
    12c8:	010000b4 	movhi	r4,2
    12cc:	2121a804 	addi	r4,r4,-31072
    12d0:	000fb1c0 	call	fb1c <usleep>
	printf("[USB INIT]:reset finished!\n");
    12d4:	01000074 	movhi	r4,1
    12d8:	21088404 	addi	r4,r4,8720
    12dc:	00024b00 	call	24b0 <puts>

	usleep(500000);
    12e0:	01000234 	movhi	r4,8
    12e4:	21284804 	addi	r4,r4,-24288
    12e8:	000fb1c0 	call	fb1c <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    12ec:	01000074 	movhi	r4,1
    12f0:	21088b04 	addi	r4,r4,8748
    12f4:	00024b00 	call	24b0 <puts>
	IO_read(HPI_MAILBOX);
    12f8:	01000044 	movi	r4,1
    12fc:	00003b40 	call	3b4 <IO_read>
	IO_read(HPI_STATUS);
    1300:	010000c4 	movi	r4,3
    1304:	00003b40 	call	3b4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    1308:	01005104 	movi	r4,324
    130c:	00012600 	call	1260 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1310:	000b883a 	mov	r5,zero
    1314:	01005104 	movi	r4,324
    1318:	00012080 	call	1208 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    131c:	01005204 	movi	r4,328
    1320:	00012600 	call	1260 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    1324:	000b883a 	mov	r5,zero
    1328:	01005204 	movi	r4,328
    132c:	00012080 	call	1208 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1330:	017fffd4 	movui	r5,65535
    1334:	01302414 	movui	r4,49296
    1338:	00012080 	call	1208 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    133c:	017fffd4 	movui	r5,65535
    1340:	01302c14 	movui	r4,49328
    1344:	00012080 	call	1208 <UsbWrite>
}
    1348:	0001883a 	nop
    134c:	e037883a 	mov	sp,fp
    1350:	dfc00117 	ldw	ra,4(sp)
    1354:	df000017 	ldw	fp,0(sp)
    1358:	dec00204 	addi	sp,sp,8
    135c:	f800283a 	ret

00001360 <UsbSetAddress>:


void UsbSetAddress()
{
    1360:	defffe04 	addi	sp,sp,-8
    1364:	dfc00115 	stw	ra,4(sp)
    1368:	df000015 	stw	fp,0(sp)
    136c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1370:	01414004 	movi	r5,1280
    1374:	01000084 	movi	r4,2
    1378:	000031c0 	call	31c <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    137c:	01414304 	movi	r5,1292
    1380:	0009883a 	mov	r4,zero
    1384:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1388:	01400204 	movi	r5,8
    138c:	0009883a 	mov	r4,zero
    1390:	000031c0 	call	31c <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    1394:	01403404 	movi	r5,208
    1398:	0009883a 	mov	r4,zero
    139c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    13a0:	01400044 	movi	r5,1
    13a4:	0009883a 	mov	r4,zero
    13a8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    13ac:	014004c4 	movi	r5,19
    13b0:	0009883a 	mov	r4,zero
    13b4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    13b8:	01414504 	movi	r5,1300
    13bc:	0009883a 	mov	r4,zero
    13c0:	000031c0 	call	31c <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    13c4:	01414004 	movi	r5,1280
    13c8:	0009883a 	mov	r4,zero
    13cc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0002);
    13d0:	01400084 	movi	r5,2
    13d4:	0009883a 	mov	r4,zero
    13d8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    13dc:	000b883a 	mov	r5,zero
    13e0:	0009883a 	mov	r4,zero
    13e4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    13e8:	000b883a 	mov	r5,zero
    13ec:	0009883a 	mov	r4,zero
    13f0:	000031c0 	call	31c <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    13f4:	000b883a 	mov	r5,zero
    13f8:	0009883a 	mov	r4,zero
    13fc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//
    1400:	000b883a 	mov	r5,zero
    1404:	0009883a 	mov	r4,zero
    1408:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0090);//
    140c:	01402404 	movi	r5,144
    1410:	0009883a 	mov	r4,zero
    1414:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);
    1418:	01401044 	movi	r5,65
    141c:	0009883a 	mov	r4,zero
    1420:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1424:	014004c4 	movi	r5,19
    1428:	0009883a 	mov	r4,zero
    142c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1430:	000b883a 	mov	r5,zero
    1434:	0009883a 	mov	r4,zero
    1438:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    143c:	01414004 	movi	r5,1280
    1440:	01006c04 	movi	r4,432
    1444:	00012080 	call	1208 <UsbWrite>
}
    1448:	0001883a 	nop
    144c:	e037883a 	mov	sp,fp
    1450:	dfc00117 	ldw	ra,4(sp)
    1454:	df000017 	ldw	fp,0(sp)
    1458:	dec00204 	addi	sp,sp,8
    145c:	f800283a 	ret

00001460 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    1460:	defffe04 	addi	sp,sp,-8
    1464:	dfc00115 	stw	ra,4(sp)
    1468:	df000015 	stw	fp,0(sp)
    146c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1470:	01414004 	movi	r5,1280
    1474:	01000084 	movi	r4,2
    1478:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    147c:	01414304 	movi	r5,1292
    1480:	0009883a 	mov	r4,zero
    1484:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1488:	01400204 	movi	r5,8
    148c:	0009883a 	mov	r4,zero
    1490:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1494:	0140b404 	movi	r5,720
    1498:	0009883a 	mov	r4,zero
    149c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    14a0:	01400044 	movi	r5,1
    14a4:	0009883a 	mov	r4,zero
    14a8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    14ac:	014004c4 	movi	r5,19
    14b0:	0009883a 	mov	r4,zero
    14b4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    14b8:	01414504 	movi	r5,1300
    14bc:	0009883a 	mov	r4,zero
    14c0:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    14c4:	0141a004 	movi	r5,1664
    14c8:	0009883a 	mov	r4,zero
    14cc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    14d0:	01404004 	movi	r5,256
    14d4:	0009883a 	mov	r4,zero
    14d8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    14dc:	000b883a 	mov	r5,zero
    14e0:	0009883a 	mov	r4,zero
    14e4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);
    14e8:	01400204 	movi	r5,8
    14ec:	0009883a 	mov	r4,zero
    14f0:	000031c0 	call	31c <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    14f4:	01414b04 	movi	r5,1324
    14f8:	0009883a 	mov	r4,zero
    14fc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//
    1500:	01400204 	movi	r5,8
    1504:	0009883a 	mov	r4,zero
    1508:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//
    150c:	0140a404 	movi	r5,656
    1510:	0009883a 	mov	r4,zero
    1514:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);
    1518:	01401044 	movi	r5,65
    151c:	0009883a 	mov	r4,zero
    1520:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1524:	014004c4 	movi	r5,19
    1528:	0009883a 	mov	r4,zero
    152c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);
    1530:	01414804 	movi	r5,1312
    1534:	0009883a 	mov	r4,zero
    1538:	000031c0 	call	31c <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    153c:	000b883a 	mov	r5,zero
    1540:	0009883a 	mov	r4,zero
    1544:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1548:	000b883a 	mov	r5,zero
    154c:	0009883a 	mov	r4,zero
    1550:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    1554:	01408404 	movi	r5,528
    1558:	0009883a 	mov	r4,zero
    155c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);
    1560:	01401044 	movi	r5,65
    1564:	0009883a 	mov	r4,zero
    1568:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    156c:	014004c4 	movi	r5,19
    1570:	0009883a 	mov	r4,zero
    1574:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1578:	000b883a 	mov	r5,zero
    157c:	0009883a 	mov	r4,zero
    1580:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1584:	01414004 	movi	r5,1280
    1588:	01006c04 	movi	r4,432
    158c:	00012080 	call	1208 <UsbWrite>
}
    1590:	0001883a 	nop
    1594:	e037883a 	mov	sp,fp
    1598:	dfc00117 	ldw	ra,4(sp)
    159c:	df000017 	ldw	fp,0(sp)
    15a0:	dec00204 	addi	sp,sp,8
    15a4:	f800283a 	ret

000015a8 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    15a8:	defffe04 	addi	sp,sp,-8
    15ac:	dfc00115 	stw	ra,4(sp)
    15b0:	df000015 	stw	fp,0(sp)
    15b4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    15b8:	01414004 	movi	r5,1280
    15bc:	01000084 	movi	r4,2
    15c0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    15c4:	01414304 	movi	r5,1292
    15c8:	0009883a 	mov	r4,zero
    15cc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    15d0:	01400204 	movi	r5,8
    15d4:	0009883a 	mov	r4,zero
    15d8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    15dc:	0140b404 	movi	r5,720
    15e0:	0009883a 	mov	r4,zero
    15e4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    15e8:	01400044 	movi	r5,1
    15ec:	0009883a 	mov	r4,zero
    15f0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    15f4:	014004c4 	movi	r5,19
    15f8:	0009883a 	mov	r4,zero
    15fc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1600:	01414504 	movi	r5,1300
    1604:	0009883a 	mov	r4,zero
    1608:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    160c:	0141a004 	movi	r5,1664
    1610:	0009883a 	mov	r4,zero
    1614:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    1618:	01404004 	movi	r5,256
    161c:	0009883a 	mov	r4,zero
    1620:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1624:	000b883a 	mov	r5,zero
    1628:	0009883a 	mov	r4,zero
    162c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    1630:	01400484 	movi	r5,18
    1634:	0009883a 	mov	r4,zero
    1638:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    163c:	01415104 	movi	r5,1348
    1640:	0009883a 	mov	r4,zero
    1644:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1648:	01400204 	movi	r5,8
    164c:	0009883a 	mov	r4,zero
    1650:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1654:	0140a404 	movi	r5,656
    1658:	0009883a 	mov	r4,zero
    165c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1660:	01401044 	movi	r5,65
    1664:	0009883a 	mov	r4,zero
    1668:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    166c:	014004c4 	movi	r5,19
    1670:	0009883a 	mov	r4,zero
    1674:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1678:	01414804 	movi	r5,1312
    167c:	0009883a 	mov	r4,zero
    1680:	000031c0 	call	31c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1684:	01415304 	movi	r5,1356
    1688:	0009883a 	mov	r4,zero
    168c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1690:	01400204 	movi	r5,8
    1694:	0009883a 	mov	r4,zero
    1698:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    169c:	0140a404 	movi	r5,656
    16a0:	0009883a 	mov	r4,zero
    16a4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    16a8:	01400044 	movi	r5,1
    16ac:	0009883a 	mov	r4,zero
    16b0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    16b4:	014004c4 	movi	r5,19
    16b8:	0009883a 	mov	r4,zero
    16bc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    16c0:	01414b04 	movi	r5,1324
    16c4:	0009883a 	mov	r4,zero
    16c8:	000031c0 	call	31c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    16cc:	01415504 	movi	r5,1364
    16d0:	0009883a 	mov	r4,zero
    16d4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    16d8:	01400084 	movi	r5,2
    16dc:	0009883a 	mov	r4,zero
    16e0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    16e4:	0140a404 	movi	r5,656
    16e8:	0009883a 	mov	r4,zero
    16ec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    16f0:	01401044 	movi	r5,65
    16f4:	0009883a 	mov	r4,zero
    16f8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    16fc:	014004c4 	movi	r5,19
    1700:	0009883a 	mov	r4,zero
    1704:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1708:	01414e04 	movi	r5,1336
    170c:	0009883a 	mov	r4,zero
    1710:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1714:	000b883a 	mov	r5,zero
    1718:	0009883a 	mov	r4,zero
    171c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1720:	000b883a 	mov	r5,zero
    1724:	0009883a 	mov	r4,zero
    1728:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    172c:	01408404 	movi	r5,528
    1730:	0009883a 	mov	r4,zero
    1734:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    1738:	01401044 	movi	r5,65
    173c:	0009883a 	mov	r4,zero
    1740:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1744:	014004c4 	movi	r5,19
    1748:	0009883a 	mov	r4,zero
    174c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1750:	000b883a 	mov	r5,zero
    1754:	0009883a 	mov	r4,zero
    1758:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    175c:	01414004 	movi	r5,1280
    1760:	01006c04 	movi	r4,432
    1764:	00012080 	call	1208 <UsbWrite>
}
    1768:	0001883a 	nop
    176c:	e037883a 	mov	sp,fp
    1770:	dfc00117 	ldw	ra,4(sp)
    1774:	df000017 	ldw	fp,0(sp)
    1778:	dec00204 	addi	sp,sp,8
    177c:	f800283a 	ret

00001780 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    1780:	defffe04 	addi	sp,sp,-8
    1784:	dfc00115 	stw	ra,4(sp)
    1788:	df000015 	stw	fp,0(sp)
    178c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1790:	01414004 	movi	r5,1280
    1794:	01000084 	movi	r4,2
    1798:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    179c:	01414304 	movi	r5,1292
    17a0:	0009883a 	mov	r4,zero
    17a4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    17a8:	01400204 	movi	r5,8
    17ac:	0009883a 	mov	r4,zero
    17b0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    17b4:	0140b404 	movi	r5,720
    17b8:	0009883a 	mov	r4,zero
    17bc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    17c0:	01400044 	movi	r5,1
    17c4:	0009883a 	mov	r4,zero
    17c8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    17cc:	014004c4 	movi	r5,19
    17d0:	0009883a 	mov	r4,zero
    17d4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    17d8:	01414504 	movi	r5,1300
    17dc:	0009883a 	mov	r4,zero
    17e0:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    17e4:	0141a004 	movi	r5,1664
    17e8:	0009883a 	mov	r4,zero
    17ec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    17f0:	01408004 	movi	r5,512
    17f4:	0009883a 	mov	r4,zero
    17f8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    17fc:	000b883a 	mov	r5,zero
    1800:	0009883a 	mov	r4,zero
    1804:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    1808:	01400244 	movi	r5,9
    180c:	0009883a 	mov	r4,zero
    1810:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1814:	01415104 	movi	r5,1348
    1818:	0009883a 	mov	r4,zero
    181c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1820:	01400204 	movi	r5,8
    1824:	0009883a 	mov	r4,zero
    1828:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    182c:	0140a404 	movi	r5,656
    1830:	0009883a 	mov	r4,zero
    1834:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1838:	01401044 	movi	r5,65
    183c:	0009883a 	mov	r4,zero
    1840:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1844:	014004c4 	movi	r5,19
    1848:	0009883a 	mov	r4,zero
    184c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1850:	01414804 	movi	r5,1312
    1854:	0009883a 	mov	r4,zero
    1858:	000031c0 	call	31c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    185c:	01415304 	movi	r5,1356
    1860:	0009883a 	mov	r4,zero
    1864:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    1868:	01400044 	movi	r5,1
    186c:	0009883a 	mov	r4,zero
    1870:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1874:	0140a404 	movi	r5,656
    1878:	0009883a 	mov	r4,zero
    187c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1880:	01400044 	movi	r5,1
    1884:	0009883a 	mov	r4,zero
    1888:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    188c:	014004c4 	movi	r5,19
    1890:	0009883a 	mov	r4,zero
    1894:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1898:	01414b04 	movi	r5,1324
    189c:	0009883a 	mov	r4,zero
    18a0:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    18a4:	000b883a 	mov	r5,zero
    18a8:	0009883a 	mov	r4,zero
    18ac:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    18b0:	000b883a 	mov	r5,zero
    18b4:	0009883a 	mov	r4,zero
    18b8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    18bc:	01408404 	movi	r5,528
    18c0:	0009883a 	mov	r4,zero
    18c4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    18c8:	01401044 	movi	r5,65
    18cc:	0009883a 	mov	r4,zero
    18d0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    18d4:	014004c4 	movi	r5,19
    18d8:	0009883a 	mov	r4,zero
    18dc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    18e0:	000b883a 	mov	r5,zero
    18e4:	0009883a 	mov	r4,zero
    18e8:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    18ec:	01414004 	movi	r5,1280
    18f0:	01006c04 	movi	r4,432
    18f4:	00012080 	call	1208 <UsbWrite>
}
    18f8:	0001883a 	nop
    18fc:	e037883a 	mov	sp,fp
    1900:	dfc00117 	ldw	ra,4(sp)
    1904:	df000017 	ldw	fp,0(sp)
    1908:	dec00204 	addi	sp,sp,8
    190c:	f800283a 	ret

00001910 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    1910:	defffe04 	addi	sp,sp,-8
    1914:	dfc00115 	stw	ra,4(sp)
    1918:	df000015 	stw	fp,0(sp)
    191c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1920:	01414004 	movi	r5,1280
    1924:	01000084 	movi	r4,2
    1928:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    192c:	01414304 	movi	r5,1292
    1930:	0009883a 	mov	r4,zero
    1934:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1938:	01400204 	movi	r5,8
    193c:	0009883a 	mov	r4,zero
    1940:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1944:	0140b404 	movi	r5,720
    1948:	0009883a 	mov	r4,zero
    194c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1950:	01400044 	movi	r5,1
    1954:	0009883a 	mov	r4,zero
    1958:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    195c:	014004c4 	movi	r5,19
    1960:	0009883a 	mov	r4,zero
    1964:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1968:	01414504 	movi	r5,1300
    196c:	0009883a 	mov	r4,zero
    1970:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1974:	0141a004 	movi	r5,1664
    1978:	0009883a 	mov	r4,zero
    197c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1980:	01408004 	movi	r5,512
    1984:	0009883a 	mov	r4,zero
    1988:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    198c:	000b883a 	mov	r5,zero
    1990:	0009883a 	mov	r4,zero
    1994:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    1998:	01403fc4 	movi	r5,255
    199c:	0009883a 	mov	r4,zero
    19a0:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    19a4:	01415704 	movi	r5,1372
    19a8:	0009883a 	mov	r4,zero
    19ac:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    19b0:	01400204 	movi	r5,8
    19b4:	0009883a 	mov	r4,zero
    19b8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    19bc:	0140a404 	movi	r5,656
    19c0:	0009883a 	mov	r4,zero
    19c4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    19c8:	01401044 	movi	r5,65
    19cc:	0009883a 	mov	r4,zero
    19d0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    19d4:	014004c4 	movi	r5,19
    19d8:	0009883a 	mov	r4,zero
    19dc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    19e0:	01414804 	movi	r5,1312
    19e4:	0009883a 	mov	r4,zero
    19e8:	000031c0 	call	31c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    19ec:	01415904 	movi	r5,1380
    19f0:	0009883a 	mov	r4,zero
    19f4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    19f8:	01400204 	movi	r5,8
    19fc:	0009883a 	mov	r4,zero
    1a00:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1a04:	0140a404 	movi	r5,656
    1a08:	0009883a 	mov	r4,zero
    1a0c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1a10:	01400044 	movi	r5,1
    1a14:	0009883a 	mov	r4,zero
    1a18:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1a1c:	014004c4 	movi	r5,19
    1a20:	0009883a 	mov	r4,zero
    1a24:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1a28:	01414b04 	movi	r5,1324
    1a2c:	0009883a 	mov	r4,zero
    1a30:	000031c0 	call	31c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    1a34:	01415b04 	movi	r5,1388
    1a38:	0009883a 	mov	r4,zero
    1a3c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1a40:	01400204 	movi	r5,8
    1a44:	0009883a 	mov	r4,zero
    1a48:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1a4c:	0140a404 	movi	r5,656
    1a50:	0009883a 	mov	r4,zero
    1a54:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1a58:	01401044 	movi	r5,65
    1a5c:	0009883a 	mov	r4,zero
    1a60:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1a64:	014004c4 	movi	r5,19
    1a68:	0009883a 	mov	r4,zero
    1a6c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1a70:	01414e04 	movi	r5,1336
    1a74:	0009883a 	mov	r4,zero
    1a78:	000031c0 	call	31c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    1a7c:	01415d04 	movi	r5,1396
    1a80:	0009883a 	mov	r4,zero
    1a84:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    1a88:	01400204 	movi	r5,8
    1a8c:	0009883a 	mov	r4,zero
    1a90:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    1a94:	0140a404 	movi	r5,656
    1a98:	0009883a 	mov	r4,zero
    1a9c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    1aa0:	01400044 	movi	r5,1
    1aa4:	0009883a 	mov	r4,zero
    1aa8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1aac:	014004c4 	movi	r5,19
    1ab0:	0009883a 	mov	r4,zero
    1ab4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    1ab8:	01415104 	movi	r5,1348
    1abc:	0009883a 	mov	r4,zero
    1ac0:	000031c0 	call	31c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    1ac4:	01415f04 	movi	r5,1404
    1ac8:	0009883a 	mov	r4,zero
    1acc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    1ad0:	01400084 	movi	r5,2
    1ad4:	0009883a 	mov	r4,zero
    1ad8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1adc:	0140a404 	movi	r5,656
    1ae0:	0009883a 	mov	r4,zero
    1ae4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    1ae8:	01401044 	movi	r5,65
    1aec:	0009883a 	mov	r4,zero
    1af0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1af4:	014004c4 	movi	r5,19
    1af8:	0009883a 	mov	r4,zero
    1afc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    1b00:	01415404 	movi	r5,1360
    1b04:	0009883a 	mov	r4,zero
    1b08:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    1b0c:	000b883a 	mov	r5,zero
    1b10:	0009883a 	mov	r4,zero
    1b14:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1b18:	000b883a 	mov	r5,zero
    1b1c:	0009883a 	mov	r4,zero
    1b20:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    1b24:	01408404 	movi	r5,528
    1b28:	0009883a 	mov	r4,zero
    1b2c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    1b30:	01401044 	movi	r5,65
    1b34:	0009883a 	mov	r4,zero
    1b38:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1b3c:	014004c4 	movi	r5,19
    1b40:	0009883a 	mov	r4,zero
    1b44:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1b48:	000b883a 	mov	r5,zero
    1b4c:	0009883a 	mov	r4,zero
    1b50:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1b54:	01414004 	movi	r5,1280
    1b58:	01006c04 	movi	r4,432
    1b5c:	00012080 	call	1208 <UsbWrite>
}
    1b60:	0001883a 	nop
    1b64:	e037883a 	mov	sp,fp
    1b68:	dfc00117 	ldw	ra,4(sp)
    1b6c:	df000017 	ldw	fp,0(sp)
    1b70:	dec00204 	addi	sp,sp,8
    1b74:	f800283a 	ret

00001b78 <UsbSetConfig>:

void UsbSetConfig()
{
    1b78:	defffe04 	addi	sp,sp,-8
    1b7c:	dfc00115 	stw	ra,4(sp)
    1b80:	df000015 	stw	fp,0(sp)
    1b84:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1b88:	01414004 	movi	r5,1280
    1b8c:	01000084 	movi	r4,2
    1b90:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    1b94:	01414304 	movi	r5,1292
    1b98:	0009883a 	mov	r4,zero
    1b9c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1ba0:	01400204 	movi	r5,8
    1ba4:	0009883a 	mov	r4,zero
    1ba8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1bac:	0140b404 	movi	r5,720
    1bb0:	0009883a 	mov	r4,zero
    1bb4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1bb8:	01400044 	movi	r5,1
    1bbc:	0009883a 	mov	r4,zero
    1bc0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1bc4:	014004c4 	movi	r5,19
    1bc8:	0009883a 	mov	r4,zero
    1bcc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1bd0:	01414504 	movi	r5,1300
    1bd4:	0009883a 	mov	r4,zero
    1bd8:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    1bdc:	01424004 	movi	r5,2304
    1be0:	0009883a 	mov	r4,zero
    1be4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    1be8:	01400044 	movi	r5,1
    1bec:	0009883a 	mov	r4,zero
    1bf0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1bf4:	000b883a 	mov	r5,zero
    1bf8:	0009883a 	mov	r4,zero
    1bfc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1c00:	000b883a 	mov	r5,zero
    1c04:	0009883a 	mov	r4,zero
    1c08:	000031c0 	call	31c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    1c0c:	000b883a 	mov	r5,zero
    1c10:	0009883a 	mov	r4,zero
    1c14:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1c18:	000b883a 	mov	r5,zero
    1c1c:	0009883a 	mov	r4,zero
    1c20:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    1c24:	0140a404 	movi	r5,656
    1c28:	0009883a 	mov	r4,zero
    1c2c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    1c30:	01401044 	movi	r5,65
    1c34:	0009883a 	mov	r4,zero
    1c38:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1c3c:	014004c4 	movi	r5,19
    1c40:	0009883a 	mov	r4,zero
    1c44:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1c48:	000b883a 	mov	r5,zero
    1c4c:	0009883a 	mov	r4,zero
    1c50:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1c54:	01414004 	movi	r5,1280
    1c58:	01006c04 	movi	r4,432
    1c5c:	00012080 	call	1208 <UsbWrite>

}
    1c60:	0001883a 	nop
    1c64:	e037883a 	mov	sp,fp
    1c68:	dfc00117 	ldw	ra,4(sp)
    1c6c:	df000017 	ldw	fp,0(sp)
    1c70:	dec00204 	addi	sp,sp,8
    1c74:	f800283a 	ret

00001c78 <UsbClassRequest>:

void UsbClassRequest()
{
    1c78:	defffe04 	addi	sp,sp,-8
    1c7c:	dfc00115 	stw	ra,4(sp)
    1c80:	df000015 	stw	fp,0(sp)
    1c84:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1c88:	01414004 	movi	r5,1280
    1c8c:	01000084 	movi	r4,2
    1c90:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    1c94:	01414304 	movi	r5,1292
    1c98:	0009883a 	mov	r4,zero
    1c9c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1ca0:	01400204 	movi	r5,8
    1ca4:	0009883a 	mov	r4,zero
    1ca8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1cac:	0140b404 	movi	r5,720
    1cb0:	0009883a 	mov	r4,zero
    1cb4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1cb8:	01400044 	movi	r5,1
    1cbc:	0009883a 	mov	r4,zero
    1cc0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1cc4:	014004c4 	movi	r5,19
    1cc8:	0009883a 	mov	r4,zero
    1ccc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1cd0:	01414504 	movi	r5,1300
    1cd4:	0009883a 	mov	r4,zero
    1cd8:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    1cdc:	01428844 	movi	r5,2593
    1ce0:	0009883a 	mov	r4,zero
    1ce4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    1ce8:	000b883a 	mov	r5,zero
    1cec:	0009883a 	mov	r4,zero
    1cf0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1cf4:	000b883a 	mov	r5,zero
    1cf8:	0009883a 	mov	r4,zero
    1cfc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1d00:	000b883a 	mov	r5,zero
    1d04:	0009883a 	mov	r4,zero
    1d08:	000031c0 	call	31c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    1d0c:	000b883a 	mov	r5,zero
    1d10:	0009883a 	mov	r4,zero
    1d14:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    1d18:	000b883a 	mov	r5,zero
    1d1c:	0009883a 	mov	r4,zero
    1d20:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    1d24:	0140a404 	movi	r5,656
    1d28:	0009883a 	mov	r4,zero
    1d2c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    1d30:	01401044 	movi	r5,65
    1d34:	0009883a 	mov	r4,zero
    1d38:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1d3c:	014004c4 	movi	r5,19
    1d40:	0009883a 	mov	r4,zero
    1d44:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);
    1d48:	000b883a 	mov	r5,zero
    1d4c:	0009883a 	mov	r4,zero
    1d50:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1d54:	01414004 	movi	r5,1280
    1d58:	01006c04 	movi	r4,432
    1d5c:	00012080 	call	1208 <UsbWrite>
}
    1d60:	0001883a 	nop
    1d64:	e037883a 	mov	sp,fp
    1d68:	dfc00117 	ldw	ra,4(sp)
    1d6c:	df000017 	ldw	fp,0(sp)
    1d70:	dec00204 	addi	sp,sp,8
    1d74:	f800283a 	ret

00001d78 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    1d78:	defffe04 	addi	sp,sp,-8
    1d7c:	dfc00115 	stw	ra,4(sp)
    1d80:	df000015 	stw	fp,0(sp)
    1d84:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1d88:	01414004 	movi	r5,1280
    1d8c:	01000084 	movi	r4,2
    1d90:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    1d94:	01414304 	movi	r5,1292
    1d98:	0009883a 	mov	r4,zero
    1d9c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1da0:	01400204 	movi	r5,8
    1da4:	0009883a 	mov	r4,zero
    1da8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1dac:	0140b404 	movi	r5,720
    1db0:	0009883a 	mov	r4,zero
    1db4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1db8:	01400044 	movi	r5,1
    1dbc:	0009883a 	mov	r4,zero
    1dc0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1dc4:	014004c4 	movi	r5,19
    1dc8:	0009883a 	mov	r4,zero
    1dcc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1dd0:	01414504 	movi	r5,1300
    1dd4:	0009883a 	mov	r4,zero
    1dd8:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    1ddc:	0141a044 	movi	r5,1665
    1de0:	0009883a 	mov	r4,zero
    1de4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    1de8:	01484004 	movi	r5,8448
    1dec:	0009883a 	mov	r4,zero
    1df0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1df4:	000b883a 	mov	r5,zero
    1df8:	0009883a 	mov	r4,zero
    1dfc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    1e00:	01401ec4 	movi	r5,123
    1e04:	0009883a 	mov	r4,zero
    1e08:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1e0c:	01415104 	movi	r5,1348
    1e10:	0009883a 	mov	r4,zero
    1e14:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1e18:	01400204 	movi	r5,8
    1e1c:	0009883a 	mov	r4,zero
    1e20:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1e24:	0140a404 	movi	r5,656
    1e28:	0009883a 	mov	r4,zero
    1e2c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1e30:	01401044 	movi	r5,65
    1e34:	0009883a 	mov	r4,zero
    1e38:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1e3c:	014004c4 	movi	r5,19
    1e40:	0009883a 	mov	r4,zero
    1e44:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1e48:	01414804 	movi	r5,1312
    1e4c:	0009883a 	mov	r4,zero
    1e50:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1e54:	000b883a 	mov	r5,zero
    1e58:	0009883a 	mov	r4,zero
    1e5c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    1e60:	000b883a 	mov	r5,zero
    1e64:	0009883a 	mov	r4,zero
    1e68:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    1e6c:	01408404 	movi	r5,528
    1e70:	0009883a 	mov	r4,zero
    1e74:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1e78:	01401044 	movi	r5,65
    1e7c:	0009883a 	mov	r4,zero
    1e80:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1e84:	014004c4 	movi	r5,19
    1e88:	0009883a 	mov	r4,zero
    1e8c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    1e90:	000b883a 	mov	r5,zero
    1e94:	0009883a 	mov	r4,zero
    1e98:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1e9c:	01414004 	movi	r5,1280
    1ea0:	01006c04 	movi	r4,432
    1ea4:	00012080 	call	1208 <UsbWrite>

}
    1ea8:	0001883a 	nop
    1eac:	e037883a 	mov	sp,fp
    1eb0:	dfc00117 	ldw	ra,4(sp)
    1eb4:	df000017 	ldw	fp,0(sp)
    1eb8:	dec00204 	addi	sp,sp,8
    1ebc:	f800283a 	ret

00001ec0 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    1ec0:	defffe04 	addi	sp,sp,-8
    1ec4:	dfc00115 	stw	ra,4(sp)
    1ec8:	df000015 	stw	fp,0(sp)
    1ecc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1ed0:	01414004 	movi	r5,1280
    1ed4:	01000084 	movi	r4,2
    1ed8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x050C);
    1edc:	01414304 	movi	r5,1292
    1ee0:	0009883a 	mov	r4,zero
    1ee4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1ee8:	01400204 	movi	r5,8
    1eec:	0009883a 	mov	r4,zero
    1ef0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1ef4:	0140b404 	movi	r5,720
    1ef8:	0009883a 	mov	r4,zero
    1efc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);
    1f00:	01400044 	movi	r5,1
    1f04:	0009883a 	mov	r4,zero
    1f08:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);
    1f0c:	014004c4 	movi	r5,19
    1f10:	0009883a 	mov	r4,zero
    1f14:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0514);
    1f18:	01414504 	movi	r5,1300
    1f1c:	0009883a 	mov	r4,zero
    1f20:	000031c0 	call	31c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    1f24:	0141a044 	movi	r5,1665
    1f28:	0009883a 	mov	r4,zero
    1f2c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    1f30:	01488004 	movi	r5,8704
    1f34:	0009883a 	mov	r4,zero
    1f38:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1f3c:	000b883a 	mov	r5,zero
    1f40:	0009883a 	mov	r4,zero
    1f44:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    1f48:	01401ec4 	movi	r5,123
    1f4c:	0009883a 	mov	r4,zero
    1f50:	000031c0 	call	31c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    1f54:	01416004 	movi	r5,1408
    1f58:	0009883a 	mov	r4,zero
    1f5c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1f60:	01400204 	movi	r5,8
    1f64:	0009883a 	mov	r4,zero
    1f68:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1f6c:	0140a404 	movi	r5,656
    1f70:	0009883a 	mov	r4,zero
    1f74:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1f78:	01401044 	movi	r5,65
    1f7c:	0009883a 	mov	r4,zero
    1f80:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1f84:	014004c4 	movi	r5,19
    1f88:	0009883a 	mov	r4,zero
    1f8c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1f90:	01414804 	movi	r5,1312
    1f94:	0009883a 	mov	r4,zero
    1f98:	000031c0 	call	31c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    1f9c:	01416204 	movi	r5,1416
    1fa0:	0009883a 	mov	r4,zero
    1fa4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1fa8:	01400204 	movi	r5,8
    1fac:	0009883a 	mov	r4,zero
    1fb0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1fb4:	0140a404 	movi	r5,656
    1fb8:	0009883a 	mov	r4,zero
    1fbc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1fc0:	01400044 	movi	r5,1
    1fc4:	0009883a 	mov	r4,zero
    1fc8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1fcc:	014004c4 	movi	r5,19
    1fd0:	0009883a 	mov	r4,zero
    1fd4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1fd8:	01414b04 	movi	r5,1324
    1fdc:	0009883a 	mov	r4,zero
    1fe0:	000031c0 	call	31c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    1fe4:	01416404 	movi	r5,1424
    1fe8:	0009883a 	mov	r4,zero
    1fec:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1ff0:	01400204 	movi	r5,8
    1ff4:	0009883a 	mov	r4,zero
    1ff8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1ffc:	0140a404 	movi	r5,656
    2000:	0009883a 	mov	r4,zero
    2004:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    2008:	01401044 	movi	r5,65
    200c:	0009883a 	mov	r4,zero
    2010:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2014:	014004c4 	movi	r5,19
    2018:	0009883a 	mov	r4,zero
    201c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    2020:	01414e04 	movi	r5,1336
    2024:	0009883a 	mov	r4,zero
    2028:	000031c0 	call	31c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    202c:	01416604 	movi	r5,1432
    2030:	0009883a 	mov	r4,zero
    2034:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    2038:	01400204 	movi	r5,8
    203c:	0009883a 	mov	r4,zero
    2040:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2044:	0140a404 	movi	r5,656
    2048:	0009883a 	mov	r4,zero
    204c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2050:	01400044 	movi	r5,1
    2054:	0009883a 	mov	r4,zero
    2058:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    205c:	014004c4 	movi	r5,19
    2060:	0009883a 	mov	r4,zero
    2064:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    2068:	01415104 	movi	r5,1348
    206c:	0009883a 	mov	r4,zero
    2070:	000031c0 	call	31c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    2074:	01416804 	movi	r5,1440
    2078:	0009883a 	mov	r4,zero
    207c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    2080:	01400204 	movi	r5,8
    2084:	0009883a 	mov	r4,zero
    2088:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    208c:	0140a404 	movi	r5,656
    2090:	0009883a 	mov	r4,zero
    2094:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    2098:	01401044 	movi	r5,65
    209c:	0009883a 	mov	r4,zero
    20a0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    20a4:	014004c4 	movi	r5,19
    20a8:	0009883a 	mov	r4,zero
    20ac:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    20b0:	01415404 	movi	r5,1360
    20b4:	0009883a 	mov	r4,zero
    20b8:	000031c0 	call	31c <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    20bc:	01416a04 	movi	r5,1448
    20c0:	0009883a 	mov	r4,zero
    20c4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    20c8:	01400204 	movi	r5,8
    20cc:	0009883a 	mov	r4,zero
    20d0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    20d4:	0140a404 	movi	r5,656
    20d8:	0009883a 	mov	r4,zero
    20dc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    20e0:	01400044 	movi	r5,1
    20e4:	0009883a 	mov	r4,zero
    20e8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    20ec:	014004c4 	movi	r5,19
    20f0:	0009883a 	mov	r4,zero
    20f4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    20f8:	01415704 	movi	r5,1372
    20fc:	0009883a 	mov	r4,zero
    2100:	000031c0 	call	31c <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    2104:	01416c04 	movi	r5,1456
    2108:	0009883a 	mov	r4,zero
    210c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2110:	01400204 	movi	r5,8
    2114:	0009883a 	mov	r4,zero
    2118:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    211c:	0140a404 	movi	r5,656
    2120:	0009883a 	mov	r4,zero
    2124:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    2128:	01401044 	movi	r5,65
    212c:	0009883a 	mov	r4,zero
    2130:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2134:	014004c4 	movi	r5,19
    2138:	0009883a 	mov	r4,zero
    213c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    2140:	01415a04 	movi	r5,1384
    2144:	0009883a 	mov	r4,zero
    2148:	000031c0 	call	31c <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    214c:	01416e04 	movi	r5,1464
    2150:	0009883a 	mov	r4,zero
    2154:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    2158:	014000c4 	movi	r5,3
    215c:	0009883a 	mov	r4,zero
    2160:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2164:	0140a404 	movi	r5,656
    2168:	0009883a 	mov	r4,zero
    216c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2170:	01400044 	movi	r5,1
    2174:	0009883a 	mov	r4,zero
    2178:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    217c:	014004c4 	movi	r5,19
    2180:	0009883a 	mov	r4,zero
    2184:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    2188:	01415d04 	movi	r5,1396
    218c:	0009883a 	mov	r4,zero
    2190:	000031c0 	call	31c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    2194:	000b883a 	mov	r5,zero
    2198:	0009883a 	mov	r4,zero
    219c:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    21a0:	000b883a 	mov	r5,zero
    21a4:	0009883a 	mov	r4,zero
    21a8:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    21ac:	01408404 	movi	r5,528
    21b0:	0009883a 	mov	r4,zero
    21b4:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    21b8:	01401044 	movi	r5,65
    21bc:	0009883a 	mov	r4,zero
    21c0:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    21c4:	014004c4 	movi	r5,19
    21c8:	0009883a 	mov	r4,zero
    21cc:	000031c0 	call	31c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    21d0:	000b883a 	mov	r5,zero
    21d4:	0009883a 	mov	r4,zero
    21d8:	000031c0 	call	31c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    21dc:	01414004 	movi	r5,1280
    21e0:	01006c04 	movi	r4,432
    21e4:	00012080 	call	1208 <UsbWrite>

}
    21e8:	0001883a 	nop
    21ec:	e037883a 	mov	sp,fp
    21f0:	dfc00117 	ldw	ra,4(sp)
    21f4:	df000017 	ldw	fp,0(sp)
    21f8:	dec00204 	addi	sp,sp,8
    21fc:	f800283a 	ret

00002200 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    2200:	defffd04 	addi	sp,sp,-12
    2204:	dfc00215 	stw	ra,8(sp)
    2208:	df000115 	stw	fp,4(sp)
    220c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    2210:	01005104 	movi	r4,324
    2214:	00012600 	call	1260 <UsbRead>
    2218:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    221c:	000b883a 	mov	r5,zero
    2220:	01005104 	movi	r4,324
    2224:	00012080 	call	1208 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2228:	00000d06 	br	2260 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    222c:	e0bfff0b 	ldhu	r2,-4(fp)
    2230:	10000526 	beq	r2,zero,2248 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2234:	e0bfff0b 	ldhu	r2,-4(fp)
    2238:	100b883a 	mov	r5,r2
    223c:	01000074 	movhi	r4,1
    2240:	21089404 	addi	r4,r4,8784
    2244:	00023b40 	call	23b4 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2248:	01005104 	movi	r4,324
    224c:	00012600 	call	1260 <UsbRead>
    2250:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2254:	000b883a 	mov	r5,zero
    2258:	01005104 	movi	r4,324
    225c:	00012080 	call	1208 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2260:	e0bfff0b 	ldhu	r2,-4(fp)
    2264:	10840018 	cmpnei	r2,r2,4096
    2268:	103ff01e 	bne	r2,zero,222c <__alt_mem_onchip_memory2_0+0xf800119c>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    226c:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2270:	e037883a 	mov	sp,fp
    2274:	dfc00117 	ldw	ra,4(sp)
    2278:	df000017 	ldw	fp,0(sp)
    227c:	dec00204 	addi	sp,sp,8
    2280:	f800283a 	ret

00002284 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    2284:	defffd04 	addi	sp,sp,-12
    2288:	dfc00215 	stw	ra,8(sp)
    228c:	df000115 	stw	fp,4(sp)
    2290:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    2294:	010000c4 	movi	r4,3
    2298:	00003b40 	call	3b4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    229c:	01005104 	movi	r4,324
    22a0:	00012600 	call	1260 <UsbRead>
    22a4:	10bfffcc 	andi	r2,r2,65535
    22a8:	10840018 	cmpnei	r2,r2,4096
    22ac:	1000091e 	bne	r2,zero,22d4 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    22b0:	000b883a 	mov	r5,zero
    22b4:	01005104 	movi	r4,324
    22b8:	00012080 	call	1208 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    22bc:	0001883a 	nop
    22c0:	010000c4 	movi	r4,3
    22c4:	00003b40 	call	3b4 <IO_read>
    22c8:	10bfffcc 	andi	r2,r2,65535
    22cc:	1080040c 	andi	r2,r2,16
    22d0:	103ffb26 	beq	r2,zero,22c0 <__alt_mem_onchip_memory2_0+0xf8001230>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    22d4:	01414204 	movi	r5,1288
    22d8:	01000084 	movi	r4,2
    22dc:	000031c0 	call	31c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    22e0:	0009883a 	mov	r4,zero
    22e4:	00003b40 	call	3b4 <IO_read>
    22e8:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    22ec:	e0bfff0b 	ldhu	r2,-4(fp)
}
    22f0:	e037883a 	mov	sp,fp
    22f4:	dfc00117 	ldw	ra,4(sp)
    22f8:	df000017 	ldw	fp,0(sp)
    22fc:	dec00204 	addi	sp,sp,8
    2300:	f800283a 	ret

00002304 <UsbPrintMem>:


void UsbPrintMem()
{
    2304:	defffc04 	addi	sp,sp,-16
    2308:	dfc00315 	stw	ra,12(sp)
    230c:	df000215 	stw	fp,8(sp)
    2310:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    2314:	01414004 	movi	r5,1280
    2318:	01000084 	movi	r4,2
    231c:	000031c0 	call	31c <IO_write>
	for (i = 0; i <= 200; i += 2)
    2320:	e03ffe15 	stw	zero,-8(fp)
    2324:	00000e06 	br	2360 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    2328:	0009883a 	mov	r4,zero
    232c:	00003b40 	call	3b4 <IO_read>
    2330:	10bfffcc 	andi	r2,r2,65535
    2334:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    2338:	e0bffe17 	ldw	r2,-8(fp)
    233c:	10814004 	addi	r2,r2,1280
    2340:	e1bfff17 	ldw	r6,-4(fp)
    2344:	100b883a 	mov	r5,r2
    2348:	01000074 	movhi	r4,1
    234c:	21089c04 	addi	r4,r4,8816
    2350:	00023b40 	call	23b4 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    2354:	e0bffe17 	ldw	r2,-8(fp)
    2358:	10800084 	addi	r2,r2,2
    235c:	e0bffe15 	stw	r2,-8(fp)
    2360:	e0bffe17 	ldw	r2,-8(fp)
    2364:	10803250 	cmplti	r2,r2,201
    2368:	103fef1e 	bne	r2,zero,2328 <__alt_mem_onchip_memory2_0+0xf8001298>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    236c:	0001883a 	nop
    2370:	e037883a 	mov	sp,fp
    2374:	dfc00117 	ldw	ra,4(sp)
    2378:	df000017 	ldw	fp,0(sp)
    237c:	dec00204 	addi	sp,sp,8
    2380:	f800283a 	ret

00002384 <_printf_r>:
    2384:	defffd04 	addi	sp,sp,-12
    2388:	2805883a 	mov	r2,r5
    238c:	dfc00015 	stw	ra,0(sp)
    2390:	d9800115 	stw	r6,4(sp)
    2394:	d9c00215 	stw	r7,8(sp)
    2398:	21400217 	ldw	r5,8(r4)
    239c:	d9c00104 	addi	r7,sp,4
    23a0:	100d883a 	mov	r6,r2
    23a4:	000255c0 	call	255c <___vfprintf_internal_r>
    23a8:	dfc00017 	ldw	ra,0(sp)
    23ac:	dec00304 	addi	sp,sp,12
    23b0:	f800283a 	ret

000023b4 <printf>:
    23b4:	defffc04 	addi	sp,sp,-16
    23b8:	dfc00015 	stw	ra,0(sp)
    23bc:	d9400115 	stw	r5,4(sp)
    23c0:	d9800215 	stw	r6,8(sp)
    23c4:	d9c00315 	stw	r7,12(sp)
    23c8:	00800074 	movhi	r2,1
    23cc:	10900d04 	addi	r2,r2,16436
    23d0:	10800017 	ldw	r2,0(r2)
    23d4:	200b883a 	mov	r5,r4
    23d8:	d9800104 	addi	r6,sp,4
    23dc:	11000217 	ldw	r4,8(r2)
    23e0:	00048380 	call	4838 <__vfprintf_internal>
    23e4:	dfc00017 	ldw	ra,0(sp)
    23e8:	dec00404 	addi	sp,sp,16
    23ec:	f800283a 	ret

000023f0 <_puts_r>:
    23f0:	defff604 	addi	sp,sp,-40
    23f4:	dc000715 	stw	r16,28(sp)
    23f8:	2021883a 	mov	r16,r4
    23fc:	2809883a 	mov	r4,r5
    2400:	dc400815 	stw	r17,32(sp)
    2404:	dfc00915 	stw	ra,36(sp)
    2408:	2823883a 	mov	r17,r5
    240c:	00024c40 	call	24c4 <strlen>
    2410:	10c00044 	addi	r3,r2,1
    2414:	d8800115 	stw	r2,4(sp)
    2418:	00800074 	movhi	r2,1
    241c:	1088a104 	addi	r2,r2,8836
    2420:	d8800215 	stw	r2,8(sp)
    2424:	00800044 	movi	r2,1
    2428:	d8800315 	stw	r2,12(sp)
    242c:	00800084 	movi	r2,2
    2430:	dc400015 	stw	r17,0(sp)
    2434:	d8c00615 	stw	r3,24(sp)
    2438:	dec00415 	stw	sp,16(sp)
    243c:	d8800515 	stw	r2,20(sp)
    2440:	80000226 	beq	r16,zero,244c <_puts_r+0x5c>
    2444:	80800e17 	ldw	r2,56(r16)
    2448:	10001426 	beq	r2,zero,249c <_puts_r+0xac>
    244c:	81400217 	ldw	r5,8(r16)
    2450:	2880030b 	ldhu	r2,12(r5)
    2454:	10c8000c 	andi	r3,r2,8192
    2458:	1800061e 	bne	r3,zero,2474 <_puts_r+0x84>
    245c:	29001917 	ldw	r4,100(r5)
    2460:	00f7ffc4 	movi	r3,-8193
    2464:	10880014 	ori	r2,r2,8192
    2468:	20c6703a 	and	r3,r4,r3
    246c:	2880030d 	sth	r2,12(r5)
    2470:	28c01915 	stw	r3,100(r5)
    2474:	d9800404 	addi	r6,sp,16
    2478:	8009883a 	mov	r4,r16
    247c:	0006da00 	call	6da0 <__sfvwrite_r>
    2480:	1000091e 	bne	r2,zero,24a8 <_puts_r+0xb8>
    2484:	00800284 	movi	r2,10
    2488:	dfc00917 	ldw	ra,36(sp)
    248c:	dc400817 	ldw	r17,32(sp)
    2490:	dc000717 	ldw	r16,28(sp)
    2494:	dec00a04 	addi	sp,sp,40
    2498:	f800283a 	ret
    249c:	8009883a 	mov	r4,r16
    24a0:	000691c0 	call	691c <__sinit>
    24a4:	003fe906 	br	244c <__alt_mem_onchip_memory2_0+0xf80013bc>
    24a8:	00bfffc4 	movi	r2,-1
    24ac:	003ff606 	br	2488 <__alt_mem_onchip_memory2_0+0xf80013f8>

000024b0 <puts>:
    24b0:	00800074 	movhi	r2,1
    24b4:	10900d04 	addi	r2,r2,16436
    24b8:	200b883a 	mov	r5,r4
    24bc:	11000017 	ldw	r4,0(r2)
    24c0:	00023f01 	jmpi	23f0 <_puts_r>

000024c4 <strlen>:
    24c4:	208000cc 	andi	r2,r4,3
    24c8:	10002026 	beq	r2,zero,254c <strlen+0x88>
    24cc:	20800007 	ldb	r2,0(r4)
    24d0:	10002026 	beq	r2,zero,2554 <strlen+0x90>
    24d4:	2005883a 	mov	r2,r4
    24d8:	00000206 	br	24e4 <strlen+0x20>
    24dc:	10c00007 	ldb	r3,0(r2)
    24e0:	18001826 	beq	r3,zero,2544 <strlen+0x80>
    24e4:	10800044 	addi	r2,r2,1
    24e8:	10c000cc 	andi	r3,r2,3
    24ec:	183ffb1e 	bne	r3,zero,24dc <__alt_mem_onchip_memory2_0+0xf800144c>
    24f0:	10c00017 	ldw	r3,0(r2)
    24f4:	01ffbff4 	movhi	r7,65279
    24f8:	39ffbfc4 	addi	r7,r7,-257
    24fc:	00ca303a 	nor	r5,zero,r3
    2500:	01a02074 	movhi	r6,32897
    2504:	19c7883a 	add	r3,r3,r7
    2508:	31a02004 	addi	r6,r6,-32640
    250c:	1946703a 	and	r3,r3,r5
    2510:	1986703a 	and	r3,r3,r6
    2514:	1800091e 	bne	r3,zero,253c <strlen+0x78>
    2518:	10800104 	addi	r2,r2,4
    251c:	10c00017 	ldw	r3,0(r2)
    2520:	19cb883a 	add	r5,r3,r7
    2524:	00c6303a 	nor	r3,zero,r3
    2528:	28c6703a 	and	r3,r5,r3
    252c:	1986703a 	and	r3,r3,r6
    2530:	183ff926 	beq	r3,zero,2518 <__alt_mem_onchip_memory2_0+0xf8001488>
    2534:	00000106 	br	253c <strlen+0x78>
    2538:	10800044 	addi	r2,r2,1
    253c:	10c00007 	ldb	r3,0(r2)
    2540:	183ffd1e 	bne	r3,zero,2538 <__alt_mem_onchip_memory2_0+0xf80014a8>
    2544:	1105c83a 	sub	r2,r2,r4
    2548:	f800283a 	ret
    254c:	2005883a 	mov	r2,r4
    2550:	003fe706 	br	24f0 <__alt_mem_onchip_memory2_0+0xf8001460>
    2554:	0005883a 	mov	r2,zero
    2558:	f800283a 	ret

0000255c <___vfprintf_internal_r>:
    255c:	deffb804 	addi	sp,sp,-288
    2560:	dfc04715 	stw	ra,284(sp)
    2564:	ddc04515 	stw	r23,276(sp)
    2568:	dd404315 	stw	r21,268(sp)
    256c:	d9002d15 	stw	r4,180(sp)
    2570:	282f883a 	mov	r23,r5
    2574:	302b883a 	mov	r21,r6
    2578:	d9c02e15 	stw	r7,184(sp)
    257c:	df004615 	stw	fp,280(sp)
    2580:	dd804415 	stw	r22,272(sp)
    2584:	dd004215 	stw	r20,264(sp)
    2588:	dcc04115 	stw	r19,260(sp)
    258c:	dc804015 	stw	r18,256(sp)
    2590:	dc403f15 	stw	r17,252(sp)
    2594:	dc003e15 	stw	r16,248(sp)
    2598:	000749c0 	call	749c <_localeconv_r>
    259c:	10800017 	ldw	r2,0(r2)
    25a0:	1009883a 	mov	r4,r2
    25a4:	d8803415 	stw	r2,208(sp)
    25a8:	00024c40 	call	24c4 <strlen>
    25ac:	d8803715 	stw	r2,220(sp)
    25b0:	d8802d17 	ldw	r2,180(sp)
    25b4:	10000226 	beq	r2,zero,25c0 <___vfprintf_internal_r+0x64>
    25b8:	10800e17 	ldw	r2,56(r2)
    25bc:	1000fb26 	beq	r2,zero,29ac <___vfprintf_internal_r+0x450>
    25c0:	b880030b 	ldhu	r2,12(r23)
    25c4:	10c8000c 	andi	r3,r2,8192
    25c8:	1800061e 	bne	r3,zero,25e4 <___vfprintf_internal_r+0x88>
    25cc:	b9001917 	ldw	r4,100(r23)
    25d0:	00f7ffc4 	movi	r3,-8193
    25d4:	10880014 	ori	r2,r2,8192
    25d8:	20c6703a 	and	r3,r4,r3
    25dc:	b880030d 	sth	r2,12(r23)
    25e0:	b8c01915 	stw	r3,100(r23)
    25e4:	10c0020c 	andi	r3,r2,8
    25e8:	1800c326 	beq	r3,zero,28f8 <___vfprintf_internal_r+0x39c>
    25ec:	b8c00417 	ldw	r3,16(r23)
    25f0:	1800c126 	beq	r3,zero,28f8 <___vfprintf_internal_r+0x39c>
    25f4:	1080068c 	andi	r2,r2,26
    25f8:	00c00284 	movi	r3,10
    25fc:	10c0c626 	beq	r2,r3,2918 <___vfprintf_internal_r+0x3bc>
    2600:	d8c00404 	addi	r3,sp,16
    2604:	05000074 	movhi	r20,1
    2608:	d9001e04 	addi	r4,sp,120
    260c:	a508b284 	addi	r20,r20,8906
    2610:	d8c01e15 	stw	r3,120(sp)
    2614:	d8002015 	stw	zero,128(sp)
    2618:	d8001f15 	stw	zero,124(sp)
    261c:	d8003315 	stw	zero,204(sp)
    2620:	d8003615 	stw	zero,216(sp)
    2624:	d8003815 	stw	zero,224(sp)
    2628:	1811883a 	mov	r8,r3
    262c:	d8003915 	stw	zero,228(sp)
    2630:	d8003a15 	stw	zero,232(sp)
    2634:	d8002f15 	stw	zero,188(sp)
    2638:	d9002815 	stw	r4,160(sp)
    263c:	a8800007 	ldb	r2,0(r21)
    2640:	10028b26 	beq	r2,zero,3070 <___vfprintf_internal_r+0xb14>
    2644:	00c00944 	movi	r3,37
    2648:	a823883a 	mov	r17,r21
    264c:	10c0021e 	bne	r2,r3,2658 <___vfprintf_internal_r+0xfc>
    2650:	00001406 	br	26a4 <___vfprintf_internal_r+0x148>
    2654:	10c00326 	beq	r2,r3,2664 <___vfprintf_internal_r+0x108>
    2658:	8c400044 	addi	r17,r17,1
    265c:	88800007 	ldb	r2,0(r17)
    2660:	103ffc1e 	bne	r2,zero,2654 <__alt_mem_onchip_memory2_0+0xf80015c4>
    2664:	8d61c83a 	sub	r16,r17,r21
    2668:	80000e26 	beq	r16,zero,26a4 <___vfprintf_internal_r+0x148>
    266c:	d8c02017 	ldw	r3,128(sp)
    2670:	d8801f17 	ldw	r2,124(sp)
    2674:	45400015 	stw	r21,0(r8)
    2678:	1c07883a 	add	r3,r3,r16
    267c:	10800044 	addi	r2,r2,1
    2680:	d8c02015 	stw	r3,128(sp)
    2684:	44000115 	stw	r16,4(r8)
    2688:	d8801f15 	stw	r2,124(sp)
    268c:	00c001c4 	movi	r3,7
    2690:	1880a916 	blt	r3,r2,2938 <___vfprintf_internal_r+0x3dc>
    2694:	42000204 	addi	r8,r8,8
    2698:	d9402f17 	ldw	r5,188(sp)
    269c:	2c0b883a 	add	r5,r5,r16
    26a0:	d9402f15 	stw	r5,188(sp)
    26a4:	88800007 	ldb	r2,0(r17)
    26a8:	1000aa26 	beq	r2,zero,2954 <___vfprintf_internal_r+0x3f8>
    26ac:	8d400044 	addi	r21,r17,1
    26b0:	8c400047 	ldb	r17,1(r17)
    26b4:	0021883a 	mov	r16,zero
    26b8:	00bfffc4 	movi	r2,-1
    26bc:	0025883a 	mov	r18,zero
    26c0:	dc002905 	stb	r16,164(sp)
    26c4:	d8002785 	stb	zero,158(sp)
    26c8:	d8002b05 	stb	zero,172(sp)
    26cc:	d8802a15 	stw	r2,168(sp)
    26d0:	d8003115 	stw	zero,196(sp)
    26d4:	04c01604 	movi	r19,88
    26d8:	05800244 	movi	r22,9
    26dc:	9021883a 	mov	r16,r18
    26e0:	4039883a 	mov	fp,r8
    26e4:	ad400044 	addi	r21,r21,1
    26e8:	88bff804 	addi	r2,r17,-32
    26ec:	98833236 	bltu	r19,r2,33b8 <___vfprintf_internal_r+0xe5c>
    26f0:	100490ba 	slli	r2,r2,2
    26f4:	00c00034 	movhi	r3,0
    26f8:	18c9c204 	addi	r3,r3,9992
    26fc:	10c5883a 	add	r2,r2,r3
    2700:	10800017 	ldw	r2,0(r2)
    2704:	1000683a 	jmp	r2
    2708:	000032b0 	cmpltui	zero,zero,202
    270c:	000033b8 	rdprs	zero,zero,206
    2710:	000033b8 	rdprs	zero,zero,206
    2714:	000032d0 	cmplti	zero,zero,203
    2718:	000033b8 	rdprs	zero,zero,206
    271c:	000033b8 	rdprs	zero,zero,206
    2720:	000033b8 	rdprs	zero,zero,206
    2724:	000033b8 	rdprs	zero,zero,206
    2728:	000033b8 	rdprs	zero,zero,206
    272c:	000033b8 	rdprs	zero,zero,206
    2730:	000029b8 	rdprs	zero,zero,166
    2734:	000031c0 	call	31c <IO_write>
    2738:	000033b8 	rdprs	zero,zero,206
    273c:	0000287c 	xorhi	zero,zero,161
    2740:	000029dc 	xori	zero,zero,167
    2744:	000033b8 	rdprs	zero,zero,206
    2748:	00002a2c 	andhi	zero,zero,168
    274c:	00002a38 	rdprs	zero,zero,168
    2750:	00002a38 	rdprs	zero,zero,168
    2754:	00002a38 	rdprs	zero,zero,168
    2758:	00002a38 	rdprs	zero,zero,168
    275c:	00002a38 	rdprs	zero,zero,168
    2760:	00002a38 	rdprs	zero,zero,168
    2764:	00002a38 	rdprs	zero,zero,168
    2768:	00002a38 	rdprs	zero,zero,168
    276c:	00002a38 	rdprs	zero,zero,168
    2770:	000033b8 	rdprs	zero,zero,206
    2774:	000033b8 	rdprs	zero,zero,206
    2778:	000033b8 	rdprs	zero,zero,206
    277c:	000033b8 	rdprs	zero,zero,206
    2780:	000033b8 	rdprs	zero,zero,206
    2784:	000033b8 	rdprs	zero,zero,206
    2788:	000033b8 	rdprs	zero,zero,206
    278c:	000033b8 	rdprs	zero,zero,206
    2790:	000033b8 	rdprs	zero,zero,206
    2794:	000033b8 	rdprs	zero,zero,206
    2798:	00002a74 	movhi	zero,169
    279c:	00002b3c 	xorhi	zero,zero,172
    27a0:	000033b8 	rdprs	zero,zero,206
    27a4:	00002b3c 	xorhi	zero,zero,172
    27a8:	000033b8 	rdprs	zero,zero,206
    27ac:	000033b8 	rdprs	zero,zero,206
    27b0:	000033b8 	rdprs	zero,zero,206
    27b4:	000033b8 	rdprs	zero,zero,206
    27b8:	00002be8 	cmpgeui	zero,zero,175
    27bc:	000033b8 	rdprs	zero,zero,206
    27c0:	000033b8 	rdprs	zero,zero,206
    27c4:	00002bf4 	movhi	zero,175
    27c8:	000033b8 	rdprs	zero,zero,206
    27cc:	000033b8 	rdprs	zero,zero,206
    27d0:	000033b8 	rdprs	zero,zero,206
    27d4:	000033b8 	rdprs	zero,zero,206
    27d8:	000033b8 	rdprs	zero,zero,206
    27dc:	00003078 	rdprs	zero,zero,193
    27e0:	000033b8 	rdprs	zero,zero,206
    27e4:	000033b8 	rdprs	zero,zero,206
    27e8:	000030e4 	muli	zero,zero,195
    27ec:	000033b8 	rdprs	zero,zero,206
    27f0:	000033b8 	rdprs	zero,zero,206
    27f4:	000033b8 	rdprs	zero,zero,206
    27f8:	000033b8 	rdprs	zero,zero,206
    27fc:	000033b8 	rdprs	zero,zero,206
    2800:	000033b8 	rdprs	zero,zero,206
    2804:	000033b8 	rdprs	zero,zero,206
    2808:	000033b8 	rdprs	zero,zero,206
    280c:	000033b8 	rdprs	zero,zero,206
    2810:	000033b8 	rdprs	zero,zero,206
    2814:	0000335c 	xori	zero,zero,205
    2818:	000032dc 	xori	zero,zero,203
    281c:	00002b3c 	xorhi	zero,zero,172
    2820:	00002b3c 	xorhi	zero,zero,172
    2824:	00002b3c 	xorhi	zero,zero,172
    2828:	000032fc 	xorhi	zero,zero,203
    282c:	000032dc 	xori	zero,zero,203
    2830:	000033b8 	rdprs	zero,zero,206
    2834:	000033b8 	rdprs	zero,zero,206
    2838:	00003308 	cmpgei	zero,zero,204
    283c:	000033b8 	rdprs	zero,zero,206
    2840:	0000331c 	xori	zero,zero,204
    2844:	000031a0 	cmpeqi	zero,zero,198
    2848:	00002888 	cmpgei	zero,zero,162
    284c:	000031d8 	cmpnei	zero,zero,199
    2850:	000033b8 	rdprs	zero,zero,206
    2854:	000031e4 	muli	zero,zero,199
    2858:	000033b8 	rdprs	zero,zero,206
    285c:	00003248 	cmpgei	zero,zero,201
    2860:	000033b8 	rdprs	zero,zero,206
    2864:	000033b8 	rdprs	zero,zero,206
    2868:	00003268 	cmpgeui	zero,zero,201
    286c:	d8c03117 	ldw	r3,196(sp)
    2870:	d8802e15 	stw	r2,184(sp)
    2874:	00c7c83a 	sub	r3,zero,r3
    2878:	d8c03115 	stw	r3,196(sp)
    287c:	84000114 	ori	r16,r16,4
    2880:	ac400007 	ldb	r17,0(r21)
    2884:	003f9706 	br	26e4 <__alt_mem_onchip_memory2_0+0xf8001654>
    2888:	00800c04 	movi	r2,48
    288c:	d8802705 	stb	r2,156(sp)
    2890:	00801e04 	movi	r2,120
    2894:	d8802745 	stb	r2,157(sp)
    2898:	d9002a17 	ldw	r4,168(sp)
    289c:	d8802e17 	ldw	r2,184(sp)
    28a0:	d8002785 	stb	zero,158(sp)
    28a4:	e011883a 	mov	r8,fp
    28a8:	10c00104 	addi	r3,r2,4
    28ac:	14c00017 	ldw	r19,0(r2)
    28b0:	002d883a 	mov	r22,zero
    28b4:	80800094 	ori	r2,r16,2
    28b8:	2002ca16 	blt	r4,zero,33e4 <___vfprintf_internal_r+0xe88>
    28bc:	00bfdfc4 	movi	r2,-129
    28c0:	80a4703a 	and	r18,r16,r2
    28c4:	d8c02e15 	stw	r3,184(sp)
    28c8:	94800094 	ori	r18,r18,2
    28cc:	9802b41e 	bne	r19,zero,33a0 <___vfprintf_internal_r+0xe44>
    28d0:	01400074 	movhi	r5,1
    28d4:	2948ab04 	addi	r5,r5,8876
    28d8:	d9403915 	stw	r5,228(sp)
    28dc:	04401e04 	movi	r17,120
    28e0:	d8802a17 	ldw	r2,168(sp)
    28e4:	0039883a 	mov	fp,zero
    28e8:	1001fa26 	beq	r2,zero,30d4 <___vfprintf_internal_r+0xb78>
    28ec:	0027883a 	mov	r19,zero
    28f0:	002d883a 	mov	r22,zero
    28f4:	00021906 	br	315c <___vfprintf_internal_r+0xc00>
    28f8:	d9002d17 	ldw	r4,180(sp)
    28fc:	b80b883a 	mov	r5,r23
    2900:	00049100 	call	4910 <__swsetup_r>
    2904:	1005dc1e 	bne	r2,zero,4078 <___vfprintf_internal_r+0x1b1c>
    2908:	b880030b 	ldhu	r2,12(r23)
    290c:	00c00284 	movi	r3,10
    2910:	1080068c 	andi	r2,r2,26
    2914:	10ff3a1e 	bne	r2,r3,2600 <__alt_mem_onchip_memory2_0+0xf8001570>
    2918:	b880038f 	ldh	r2,14(r23)
    291c:	103f3816 	blt	r2,zero,2600 <__alt_mem_onchip_memory2_0+0xf8001570>
    2920:	d9c02e17 	ldw	r7,184(sp)
    2924:	d9002d17 	ldw	r4,180(sp)
    2928:	a80d883a 	mov	r6,r21
    292c:	b80b883a 	mov	r5,r23
    2930:	00048540 	call	4854 <__sbprintf>
    2934:	00001106 	br	297c <___vfprintf_internal_r+0x420>
    2938:	d9002d17 	ldw	r4,180(sp)
    293c:	d9801e04 	addi	r6,sp,120
    2940:	b80b883a 	mov	r5,r23
    2944:	0009d3c0 	call	9d3c <__sprint_r>
    2948:	1000081e 	bne	r2,zero,296c <___vfprintf_internal_r+0x410>
    294c:	da000404 	addi	r8,sp,16
    2950:	003f5106 	br	2698 <__alt_mem_onchip_memory2_0+0xf8001608>
    2954:	d8802017 	ldw	r2,128(sp)
    2958:	10000426 	beq	r2,zero,296c <___vfprintf_internal_r+0x410>
    295c:	d9002d17 	ldw	r4,180(sp)
    2960:	d9801e04 	addi	r6,sp,120
    2964:	b80b883a 	mov	r5,r23
    2968:	0009d3c0 	call	9d3c <__sprint_r>
    296c:	b880030b 	ldhu	r2,12(r23)
    2970:	1080100c 	andi	r2,r2,64
    2974:	1005c01e 	bne	r2,zero,4078 <___vfprintf_internal_r+0x1b1c>
    2978:	d8802f17 	ldw	r2,188(sp)
    297c:	dfc04717 	ldw	ra,284(sp)
    2980:	df004617 	ldw	fp,280(sp)
    2984:	ddc04517 	ldw	r23,276(sp)
    2988:	dd804417 	ldw	r22,272(sp)
    298c:	dd404317 	ldw	r21,268(sp)
    2990:	dd004217 	ldw	r20,264(sp)
    2994:	dcc04117 	ldw	r19,260(sp)
    2998:	dc804017 	ldw	r18,256(sp)
    299c:	dc403f17 	ldw	r17,252(sp)
    29a0:	dc003e17 	ldw	r16,248(sp)
    29a4:	dec04804 	addi	sp,sp,288
    29a8:	f800283a 	ret
    29ac:	d9002d17 	ldw	r4,180(sp)
    29b0:	000691c0 	call	691c <__sinit>
    29b4:	003f0206 	br	25c0 <__alt_mem_onchip_memory2_0+0xf8001530>
    29b8:	d9002e17 	ldw	r4,184(sp)
    29bc:	d9402e17 	ldw	r5,184(sp)
    29c0:	21000017 	ldw	r4,0(r4)
    29c4:	28800104 	addi	r2,r5,4
    29c8:	d9003115 	stw	r4,196(sp)
    29cc:	203fa716 	blt	r4,zero,286c <__alt_mem_onchip_memory2_0+0xf80017dc>
    29d0:	d8802e15 	stw	r2,184(sp)
    29d4:	ac400007 	ldb	r17,0(r21)
    29d8:	003f4206 	br	26e4 <__alt_mem_onchip_memory2_0+0xf8001654>
    29dc:	ac400007 	ldb	r17,0(r21)
    29e0:	01000a84 	movi	r4,42
    29e4:	a8c00044 	addi	r3,r21,1
    29e8:	89075826 	beq	r17,r4,474c <___vfprintf_internal_r+0x21f0>
    29ec:	8cbff404 	addi	r18,r17,-48
    29f0:	b486ae36 	bltu	r22,r18,44ac <___vfprintf_internal_r+0x1f50>
    29f4:	0009883a 	mov	r4,zero
    29f8:	1823883a 	mov	r17,r3
    29fc:	01400284 	movi	r5,10
    2a00:	000c9f80 	call	c9f8 <__mulsi3>
    2a04:	88c00007 	ldb	r3,0(r17)
    2a08:	1489883a 	add	r4,r2,r18
    2a0c:	8d400044 	addi	r21,r17,1
    2a10:	1cbff404 	addi	r18,r3,-48
    2a14:	a823883a 	mov	r17,r21
    2a18:	b4bff82e 	bgeu	r22,r18,29fc <__alt_mem_onchip_memory2_0+0xf800196c>
    2a1c:	1823883a 	mov	r17,r3
    2a20:	2005f616 	blt	r4,zero,41fc <___vfprintf_internal_r+0x1ca0>
    2a24:	d9002a15 	stw	r4,168(sp)
    2a28:	003f2f06 	br	26e8 <__alt_mem_onchip_memory2_0+0xf8001658>
    2a2c:	84002014 	ori	r16,r16,128
    2a30:	ac400007 	ldb	r17,0(r21)
    2a34:	003f2b06 	br	26e4 <__alt_mem_onchip_memory2_0+0xf8001654>
    2a38:	8cbff404 	addi	r18,r17,-48
    2a3c:	d8003115 	stw	zero,196(sp)
    2a40:	0009883a 	mov	r4,zero
    2a44:	a823883a 	mov	r17,r21
    2a48:	01400284 	movi	r5,10
    2a4c:	000c9f80 	call	c9f8 <__mulsi3>
    2a50:	88c00007 	ldb	r3,0(r17)
    2a54:	9089883a 	add	r4,r18,r2
    2a58:	ad400044 	addi	r21,r21,1
    2a5c:	1cbff404 	addi	r18,r3,-48
    2a60:	a823883a 	mov	r17,r21
    2a64:	b4bff82e 	bgeu	r22,r18,2a48 <__alt_mem_onchip_memory2_0+0xf80019b8>
    2a68:	1823883a 	mov	r17,r3
    2a6c:	d9003115 	stw	r4,196(sp)
    2a70:	003f1d06 	br	26e8 <__alt_mem_onchip_memory2_0+0xf8001658>
    2a74:	8025883a 	mov	r18,r16
    2a78:	dc002903 	ldbu	r16,164(sp)
    2a7c:	e011883a 	mov	r8,fp
    2a80:	84003fcc 	andi	r16,r16,255
    2a84:	8007531e 	bne	r16,zero,47d4 <___vfprintf_internal_r+0x2278>
    2a88:	94800414 	ori	r18,r18,16
    2a8c:	9080080c 	andi	r2,r18,32
    2a90:	1003a326 	beq	r2,zero,3920 <___vfprintf_internal_r+0x13c4>
    2a94:	d9002e17 	ldw	r4,184(sp)
    2a98:	20800117 	ldw	r2,4(r4)
    2a9c:	24c00017 	ldw	r19,0(r4)
    2aa0:	21000204 	addi	r4,r4,8
    2aa4:	d9002e15 	stw	r4,184(sp)
    2aa8:	102d883a 	mov	r22,r2
    2aac:	10047316 	blt	r2,zero,3c7c <___vfprintf_internal_r+0x1720>
    2ab0:	d9002a17 	ldw	r4,168(sp)
    2ab4:	df002783 	ldbu	fp,158(sp)
    2ab8:	2003e416 	blt	r4,zero,3a4c <___vfprintf_internal_r+0x14f0>
    2abc:	00ffdfc4 	movi	r3,-129
    2ac0:	9d84b03a 	or	r2,r19,r22
    2ac4:	90e4703a 	and	r18,r18,r3
    2ac8:	10018026 	beq	r2,zero,30cc <___vfprintf_internal_r+0xb70>
    2acc:	b003ab26 	beq	r22,zero,397c <___vfprintf_internal_r+0x1420>
    2ad0:	dc402915 	stw	r17,164(sp)
    2ad4:	dc001e04 	addi	r16,sp,120
    2ad8:	b023883a 	mov	r17,r22
    2adc:	402d883a 	mov	r22,r8
    2ae0:	9809883a 	mov	r4,r19
    2ae4:	880b883a 	mov	r5,r17
    2ae8:	01800284 	movi	r6,10
    2aec:	000f883a 	mov	r7,zero
    2af0:	000c2800 	call	c280 <__umoddi3>
    2af4:	10800c04 	addi	r2,r2,48
    2af8:	843fffc4 	addi	r16,r16,-1
    2afc:	9809883a 	mov	r4,r19
    2b00:	880b883a 	mov	r5,r17
    2b04:	80800005 	stb	r2,0(r16)
    2b08:	01800284 	movi	r6,10
    2b0c:	000f883a 	mov	r7,zero
    2b10:	000bc840 	call	bc84 <__udivdi3>
    2b14:	1027883a 	mov	r19,r2
    2b18:	10c4b03a 	or	r2,r2,r3
    2b1c:	1823883a 	mov	r17,r3
    2b20:	103fef1e 	bne	r2,zero,2ae0 <__alt_mem_onchip_memory2_0+0xf8001a50>
    2b24:	d8c02817 	ldw	r3,160(sp)
    2b28:	dc402917 	ldw	r17,164(sp)
    2b2c:	b011883a 	mov	r8,r22
    2b30:	1c07c83a 	sub	r3,r3,r16
    2b34:	d8c02b15 	stw	r3,172(sp)
    2b38:	00005f06 	br	2cb8 <___vfprintf_internal_r+0x75c>
    2b3c:	8025883a 	mov	r18,r16
    2b40:	dc002903 	ldbu	r16,164(sp)
    2b44:	e011883a 	mov	r8,fp
    2b48:	84003fcc 	andi	r16,r16,255
    2b4c:	80071e1e 	bne	r16,zero,47c8 <___vfprintf_internal_r+0x226c>
    2b50:	9080020c 	andi	r2,r18,8
    2b54:	1004af26 	beq	r2,zero,3e14 <___vfprintf_internal_r+0x18b8>
    2b58:	d9002e17 	ldw	r4,184(sp)
    2b5c:	d9402e17 	ldw	r5,184(sp)
    2b60:	d8802e17 	ldw	r2,184(sp)
    2b64:	21000017 	ldw	r4,0(r4)
    2b68:	29400117 	ldw	r5,4(r5)
    2b6c:	10800204 	addi	r2,r2,8
    2b70:	d9003615 	stw	r4,216(sp)
    2b74:	d9403815 	stw	r5,224(sp)
    2b78:	d8802e15 	stw	r2,184(sp)
    2b7c:	d9003617 	ldw	r4,216(sp)
    2b80:	d9403817 	ldw	r5,224(sp)
    2b84:	da003d15 	stw	r8,244(sp)
    2b88:	04000044 	movi	r16,1
    2b8c:	00099600 	call	9960 <__fpclassifyd>
    2b90:	da003d17 	ldw	r8,244(sp)
    2b94:	1404441e 	bne	r2,r16,3ca8 <___vfprintf_internal_r+0x174c>
    2b98:	d9003617 	ldw	r4,216(sp)
    2b9c:	d9403817 	ldw	r5,224(sp)
    2ba0:	000d883a 	mov	r6,zero
    2ba4:	000f883a 	mov	r7,zero
    2ba8:	000de000 	call	de00 <__ledf2>
    2bac:	da003d17 	ldw	r8,244(sp)
    2bb0:	1005e316 	blt	r2,zero,4340 <___vfprintf_internal_r+0x1de4>
    2bb4:	df002783 	ldbu	fp,158(sp)
    2bb8:	008011c4 	movi	r2,71
    2bbc:	1445580e 	bge	r2,r17,4120 <___vfprintf_internal_r+0x1bc4>
    2bc0:	04000074 	movhi	r16,1
    2bc4:	8408a304 	addi	r16,r16,8844
    2bc8:	00c000c4 	movi	r3,3
    2bcc:	00bfdfc4 	movi	r2,-129
    2bd0:	d8c02915 	stw	r3,164(sp)
    2bd4:	90a4703a 	and	r18,r18,r2
    2bd8:	d8c02b15 	stw	r3,172(sp)
    2bdc:	d8002a15 	stw	zero,168(sp)
    2be0:	d8003215 	stw	zero,200(sp)
    2be4:	00003a06 	br	2cd0 <___vfprintf_internal_r+0x774>
    2be8:	84000214 	ori	r16,r16,8
    2bec:	ac400007 	ldb	r17,0(r21)
    2bf0:	003ebc06 	br	26e4 <__alt_mem_onchip_memory2_0+0xf8001654>
    2bf4:	8025883a 	mov	r18,r16
    2bf8:	dc002903 	ldbu	r16,164(sp)
    2bfc:	e011883a 	mov	r8,fp
    2c00:	84003fcc 	andi	r16,r16,255
    2c04:	8007001e 	bne	r16,zero,4808 <___vfprintf_internal_r+0x22ac>
    2c08:	94800414 	ori	r18,r18,16
    2c0c:	9080080c 	andi	r2,r18,32
    2c10:	1002fa26 	beq	r2,zero,37fc <___vfprintf_internal_r+0x12a0>
    2c14:	d9002e17 	ldw	r4,184(sp)
    2c18:	d9402a17 	ldw	r5,168(sp)
    2c1c:	d8002785 	stb	zero,158(sp)
    2c20:	20800204 	addi	r2,r4,8
    2c24:	24c00017 	ldw	r19,0(r4)
    2c28:	25800117 	ldw	r22,4(r4)
    2c2c:	2804b116 	blt	r5,zero,3ef4 <___vfprintf_internal_r+0x1998>
    2c30:	013fdfc4 	movi	r4,-129
    2c34:	9d86b03a 	or	r3,r19,r22
    2c38:	d8802e15 	stw	r2,184(sp)
    2c3c:	9124703a 	and	r18,r18,r4
    2c40:	1802fb1e 	bne	r3,zero,3830 <___vfprintf_internal_r+0x12d4>
    2c44:	d8c02a17 	ldw	r3,168(sp)
    2c48:	0039883a 	mov	fp,zero
    2c4c:	1805e526 	beq	r3,zero,43e4 <___vfprintf_internal_r+0x1e88>
    2c50:	0027883a 	mov	r19,zero
    2c54:	002d883a 	mov	r22,zero
    2c58:	dc001e04 	addi	r16,sp,120
    2c5c:	9806d0fa 	srli	r3,r19,3
    2c60:	b008977a 	slli	r4,r22,29
    2c64:	b02cd0fa 	srli	r22,r22,3
    2c68:	9cc001cc 	andi	r19,r19,7
    2c6c:	98800c04 	addi	r2,r19,48
    2c70:	843fffc4 	addi	r16,r16,-1
    2c74:	20e6b03a 	or	r19,r4,r3
    2c78:	80800005 	stb	r2,0(r16)
    2c7c:	9d86b03a 	or	r3,r19,r22
    2c80:	183ff61e 	bne	r3,zero,2c5c <__alt_mem_onchip_memory2_0+0xf8001bcc>
    2c84:	90c0004c 	andi	r3,r18,1
    2c88:	18014126 	beq	r3,zero,3190 <___vfprintf_internal_r+0xc34>
    2c8c:	10803fcc 	andi	r2,r2,255
    2c90:	1080201c 	xori	r2,r2,128
    2c94:	10bfe004 	addi	r2,r2,-128
    2c98:	00c00c04 	movi	r3,48
    2c9c:	10c13c26 	beq	r2,r3,3190 <___vfprintf_internal_r+0xc34>
    2ca0:	80ffffc5 	stb	r3,-1(r16)
    2ca4:	d8c02817 	ldw	r3,160(sp)
    2ca8:	80bfffc4 	addi	r2,r16,-1
    2cac:	1021883a 	mov	r16,r2
    2cb0:	1887c83a 	sub	r3,r3,r2
    2cb4:	d8c02b15 	stw	r3,172(sp)
    2cb8:	d8802b17 	ldw	r2,172(sp)
    2cbc:	d9002a17 	ldw	r4,168(sp)
    2cc0:	1100010e 	bge	r2,r4,2cc8 <___vfprintf_internal_r+0x76c>
    2cc4:	2005883a 	mov	r2,r4
    2cc8:	d8802915 	stw	r2,164(sp)
    2ccc:	d8003215 	stw	zero,200(sp)
    2cd0:	e7003fcc 	andi	fp,fp,255
    2cd4:	e700201c 	xori	fp,fp,128
    2cd8:	e73fe004 	addi	fp,fp,-128
    2cdc:	e0000326 	beq	fp,zero,2cec <___vfprintf_internal_r+0x790>
    2ce0:	d8c02917 	ldw	r3,164(sp)
    2ce4:	18c00044 	addi	r3,r3,1
    2ce8:	d8c02915 	stw	r3,164(sp)
    2cec:	90c0008c 	andi	r3,r18,2
    2cf0:	d8c02c15 	stw	r3,176(sp)
    2cf4:	18000326 	beq	r3,zero,2d04 <___vfprintf_internal_r+0x7a8>
    2cf8:	d8c02917 	ldw	r3,164(sp)
    2cfc:	18c00084 	addi	r3,r3,2
    2d00:	d8c02915 	stw	r3,164(sp)
    2d04:	90c0210c 	andi	r3,r18,132
    2d08:	d8c03015 	stw	r3,192(sp)
    2d0c:	1801c51e 	bne	r3,zero,3424 <___vfprintf_internal_r+0xec8>
    2d10:	d9003117 	ldw	r4,196(sp)
    2d14:	d8c02917 	ldw	r3,164(sp)
    2d18:	20e7c83a 	sub	r19,r4,r3
    2d1c:	04c1c10e 	bge	zero,r19,3424 <___vfprintf_internal_r+0xec8>
    2d20:	02400404 	movi	r9,16
    2d24:	d8c02017 	ldw	r3,128(sp)
    2d28:	d8801f17 	ldw	r2,124(sp)
    2d2c:	4cc52f0e 	bge	r9,r19,41ec <___vfprintf_internal_r+0x1c90>
    2d30:	01400074 	movhi	r5,1
    2d34:	2948b684 	addi	r5,r5,8922
    2d38:	dc403b15 	stw	r17,236(sp)
    2d3c:	d9403515 	stw	r5,212(sp)
    2d40:	9823883a 	mov	r17,r19
    2d44:	482d883a 	mov	r22,r9
    2d48:	9027883a 	mov	r19,r18
    2d4c:	070001c4 	movi	fp,7
    2d50:	8025883a 	mov	r18,r16
    2d54:	dc002d17 	ldw	r16,180(sp)
    2d58:	00000306 	br	2d68 <___vfprintf_internal_r+0x80c>
    2d5c:	8c7ffc04 	addi	r17,r17,-16
    2d60:	42000204 	addi	r8,r8,8
    2d64:	b440130e 	bge	r22,r17,2db4 <___vfprintf_internal_r+0x858>
    2d68:	01000074 	movhi	r4,1
    2d6c:	18c00404 	addi	r3,r3,16
    2d70:	10800044 	addi	r2,r2,1
    2d74:	2108b684 	addi	r4,r4,8922
    2d78:	41000015 	stw	r4,0(r8)
    2d7c:	45800115 	stw	r22,4(r8)
    2d80:	d8c02015 	stw	r3,128(sp)
    2d84:	d8801f15 	stw	r2,124(sp)
    2d88:	e0bff40e 	bge	fp,r2,2d5c <__alt_mem_onchip_memory2_0+0xf8001ccc>
    2d8c:	d9801e04 	addi	r6,sp,120
    2d90:	b80b883a 	mov	r5,r23
    2d94:	8009883a 	mov	r4,r16
    2d98:	0009d3c0 	call	9d3c <__sprint_r>
    2d9c:	103ef31e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    2da0:	8c7ffc04 	addi	r17,r17,-16
    2da4:	d8c02017 	ldw	r3,128(sp)
    2da8:	d8801f17 	ldw	r2,124(sp)
    2dac:	da000404 	addi	r8,sp,16
    2db0:	b47fed16 	blt	r22,r17,2d68 <__alt_mem_onchip_memory2_0+0xf8001cd8>
    2db4:	9021883a 	mov	r16,r18
    2db8:	9825883a 	mov	r18,r19
    2dbc:	8827883a 	mov	r19,r17
    2dc0:	dc403b17 	ldw	r17,236(sp)
    2dc4:	d9403517 	ldw	r5,212(sp)
    2dc8:	98c7883a 	add	r3,r19,r3
    2dcc:	10800044 	addi	r2,r2,1
    2dd0:	41400015 	stw	r5,0(r8)
    2dd4:	44c00115 	stw	r19,4(r8)
    2dd8:	d8c02015 	stw	r3,128(sp)
    2ddc:	d8801f15 	stw	r2,124(sp)
    2de0:	010001c4 	movi	r4,7
    2de4:	2082c516 	blt	r4,r2,38fc <___vfprintf_internal_r+0x13a0>
    2de8:	df002787 	ldb	fp,158(sp)
    2dec:	42000204 	addi	r8,r8,8
    2df0:	e0000c26 	beq	fp,zero,2e24 <___vfprintf_internal_r+0x8c8>
    2df4:	d8801f17 	ldw	r2,124(sp)
    2df8:	d9002784 	addi	r4,sp,158
    2dfc:	18c00044 	addi	r3,r3,1
    2e00:	10800044 	addi	r2,r2,1
    2e04:	41000015 	stw	r4,0(r8)
    2e08:	01000044 	movi	r4,1
    2e0c:	41000115 	stw	r4,4(r8)
    2e10:	d8c02015 	stw	r3,128(sp)
    2e14:	d8801f15 	stw	r2,124(sp)
    2e18:	010001c4 	movi	r4,7
    2e1c:	20825e16 	blt	r4,r2,3798 <___vfprintf_internal_r+0x123c>
    2e20:	42000204 	addi	r8,r8,8
    2e24:	d8802c17 	ldw	r2,176(sp)
    2e28:	10000c26 	beq	r2,zero,2e5c <___vfprintf_internal_r+0x900>
    2e2c:	d8801f17 	ldw	r2,124(sp)
    2e30:	d9002704 	addi	r4,sp,156
    2e34:	18c00084 	addi	r3,r3,2
    2e38:	10800044 	addi	r2,r2,1
    2e3c:	41000015 	stw	r4,0(r8)
    2e40:	01000084 	movi	r4,2
    2e44:	41000115 	stw	r4,4(r8)
    2e48:	d8c02015 	stw	r3,128(sp)
    2e4c:	d8801f15 	stw	r2,124(sp)
    2e50:	010001c4 	movi	r4,7
    2e54:	20825816 	blt	r4,r2,37b8 <___vfprintf_internal_r+0x125c>
    2e58:	42000204 	addi	r8,r8,8
    2e5c:	d9003017 	ldw	r4,192(sp)
    2e60:	00802004 	movi	r2,128
    2e64:	2081bb26 	beq	r4,r2,3554 <___vfprintf_internal_r+0xff8>
    2e68:	d9402a17 	ldw	r5,168(sp)
    2e6c:	d8802b17 	ldw	r2,172(sp)
    2e70:	28adc83a 	sub	r22,r5,r2
    2e74:	0580310e 	bge	zero,r22,2f3c <___vfprintf_internal_r+0x9e0>
    2e78:	07000404 	movi	fp,16
    2e7c:	d8801f17 	ldw	r2,124(sp)
    2e80:	e584360e 	bge	fp,r22,3f5c <___vfprintf_internal_r+0x1a00>
    2e84:	01400074 	movhi	r5,1
    2e88:	2948b284 	addi	r5,r5,8906
    2e8c:	dc402a15 	stw	r17,168(sp)
    2e90:	d9402c15 	stw	r5,176(sp)
    2e94:	b023883a 	mov	r17,r22
    2e98:	04c001c4 	movi	r19,7
    2e9c:	a82d883a 	mov	r22,r21
    2ea0:	902b883a 	mov	r21,r18
    2ea4:	8025883a 	mov	r18,r16
    2ea8:	dc002d17 	ldw	r16,180(sp)
    2eac:	00000306 	br	2ebc <___vfprintf_internal_r+0x960>
    2eb0:	8c7ffc04 	addi	r17,r17,-16
    2eb4:	42000204 	addi	r8,r8,8
    2eb8:	e440110e 	bge	fp,r17,2f00 <___vfprintf_internal_r+0x9a4>
    2ebc:	18c00404 	addi	r3,r3,16
    2ec0:	10800044 	addi	r2,r2,1
    2ec4:	45000015 	stw	r20,0(r8)
    2ec8:	47000115 	stw	fp,4(r8)
    2ecc:	d8c02015 	stw	r3,128(sp)
    2ed0:	d8801f15 	stw	r2,124(sp)
    2ed4:	98bff60e 	bge	r19,r2,2eb0 <__alt_mem_onchip_memory2_0+0xf8001e20>
    2ed8:	d9801e04 	addi	r6,sp,120
    2edc:	b80b883a 	mov	r5,r23
    2ee0:	8009883a 	mov	r4,r16
    2ee4:	0009d3c0 	call	9d3c <__sprint_r>
    2ee8:	103ea01e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    2eec:	8c7ffc04 	addi	r17,r17,-16
    2ef0:	d8c02017 	ldw	r3,128(sp)
    2ef4:	d8801f17 	ldw	r2,124(sp)
    2ef8:	da000404 	addi	r8,sp,16
    2efc:	e47fef16 	blt	fp,r17,2ebc <__alt_mem_onchip_memory2_0+0xf8001e2c>
    2f00:	9021883a 	mov	r16,r18
    2f04:	a825883a 	mov	r18,r21
    2f08:	b02b883a 	mov	r21,r22
    2f0c:	882d883a 	mov	r22,r17
    2f10:	dc402a17 	ldw	r17,168(sp)
    2f14:	d9002c17 	ldw	r4,176(sp)
    2f18:	1d87883a 	add	r3,r3,r22
    2f1c:	10800044 	addi	r2,r2,1
    2f20:	41000015 	stw	r4,0(r8)
    2f24:	45800115 	stw	r22,4(r8)
    2f28:	d8c02015 	stw	r3,128(sp)
    2f2c:	d8801f15 	stw	r2,124(sp)
    2f30:	010001c4 	movi	r4,7
    2f34:	20821016 	blt	r4,r2,3778 <___vfprintf_internal_r+0x121c>
    2f38:	42000204 	addi	r8,r8,8
    2f3c:	9080400c 	andi	r2,r18,256
    2f40:	10013a1e 	bne	r2,zero,342c <___vfprintf_internal_r+0xed0>
    2f44:	d9402b17 	ldw	r5,172(sp)
    2f48:	d8801f17 	ldw	r2,124(sp)
    2f4c:	44000015 	stw	r16,0(r8)
    2f50:	1947883a 	add	r3,r3,r5
    2f54:	10800044 	addi	r2,r2,1
    2f58:	41400115 	stw	r5,4(r8)
    2f5c:	d8c02015 	stw	r3,128(sp)
    2f60:	d8801f15 	stw	r2,124(sp)
    2f64:	010001c4 	movi	r4,7
    2f68:	2081f516 	blt	r4,r2,3740 <___vfprintf_internal_r+0x11e4>
    2f6c:	42000204 	addi	r8,r8,8
    2f70:	9480010c 	andi	r18,r18,4
    2f74:	90003226 	beq	r18,zero,3040 <___vfprintf_internal_r+0xae4>
    2f78:	d9403117 	ldw	r5,196(sp)
    2f7c:	d8802917 	ldw	r2,164(sp)
    2f80:	28a1c83a 	sub	r16,r5,r2
    2f84:	04002e0e 	bge	zero,r16,3040 <___vfprintf_internal_r+0xae4>
    2f88:	04400404 	movi	r17,16
    2f8c:	d8801f17 	ldw	r2,124(sp)
    2f90:	8c04c40e 	bge	r17,r16,42a4 <___vfprintf_internal_r+0x1d48>
    2f94:	01400074 	movhi	r5,1
    2f98:	2948b684 	addi	r5,r5,8922
    2f9c:	d9403515 	stw	r5,212(sp)
    2fa0:	048001c4 	movi	r18,7
    2fa4:	dcc02d17 	ldw	r19,180(sp)
    2fa8:	00000306 	br	2fb8 <___vfprintf_internal_r+0xa5c>
    2fac:	843ffc04 	addi	r16,r16,-16
    2fb0:	42000204 	addi	r8,r8,8
    2fb4:	8c00130e 	bge	r17,r16,3004 <___vfprintf_internal_r+0xaa8>
    2fb8:	01000074 	movhi	r4,1
    2fbc:	18c00404 	addi	r3,r3,16
    2fc0:	10800044 	addi	r2,r2,1
    2fc4:	2108b684 	addi	r4,r4,8922
    2fc8:	41000015 	stw	r4,0(r8)
    2fcc:	44400115 	stw	r17,4(r8)
    2fd0:	d8c02015 	stw	r3,128(sp)
    2fd4:	d8801f15 	stw	r2,124(sp)
    2fd8:	90bff40e 	bge	r18,r2,2fac <__alt_mem_onchip_memory2_0+0xf8001f1c>
    2fdc:	d9801e04 	addi	r6,sp,120
    2fe0:	b80b883a 	mov	r5,r23
    2fe4:	9809883a 	mov	r4,r19
    2fe8:	0009d3c0 	call	9d3c <__sprint_r>
    2fec:	103e5f1e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    2ff0:	843ffc04 	addi	r16,r16,-16
    2ff4:	d8c02017 	ldw	r3,128(sp)
    2ff8:	d8801f17 	ldw	r2,124(sp)
    2ffc:	da000404 	addi	r8,sp,16
    3000:	8c3fed16 	blt	r17,r16,2fb8 <__alt_mem_onchip_memory2_0+0xf8001f28>
    3004:	d9403517 	ldw	r5,212(sp)
    3008:	1c07883a 	add	r3,r3,r16
    300c:	10800044 	addi	r2,r2,1
    3010:	41400015 	stw	r5,0(r8)
    3014:	44000115 	stw	r16,4(r8)
    3018:	d8c02015 	stw	r3,128(sp)
    301c:	d8801f15 	stw	r2,124(sp)
    3020:	010001c4 	movi	r4,7
    3024:	2080060e 	bge	r4,r2,3040 <___vfprintf_internal_r+0xae4>
    3028:	d9002d17 	ldw	r4,180(sp)
    302c:	d9801e04 	addi	r6,sp,120
    3030:	b80b883a 	mov	r5,r23
    3034:	0009d3c0 	call	9d3c <__sprint_r>
    3038:	103e4c1e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    303c:	d8c02017 	ldw	r3,128(sp)
    3040:	d8803117 	ldw	r2,196(sp)
    3044:	d9002917 	ldw	r4,164(sp)
    3048:	1100010e 	bge	r2,r4,3050 <___vfprintf_internal_r+0xaf4>
    304c:	2005883a 	mov	r2,r4
    3050:	d9402f17 	ldw	r5,188(sp)
    3054:	288b883a 	add	r5,r5,r2
    3058:	d9402f15 	stw	r5,188(sp)
    305c:	1801c01e 	bne	r3,zero,3760 <___vfprintf_internal_r+0x1204>
    3060:	a8800007 	ldb	r2,0(r21)
    3064:	d8001f15 	stw	zero,124(sp)
    3068:	da000404 	addi	r8,sp,16
    306c:	103d751e 	bne	r2,zero,2644 <__alt_mem_onchip_memory2_0+0xf80015b4>
    3070:	a823883a 	mov	r17,r21
    3074:	003d8b06 	br	26a4 <__alt_mem_onchip_memory2_0+0xf8001614>
    3078:	8025883a 	mov	r18,r16
    307c:	dc002903 	ldbu	r16,164(sp)
    3080:	e011883a 	mov	r8,fp
    3084:	84003fcc 	andi	r16,r16,255
    3088:	8005e51e 	bne	r16,zero,4820 <___vfprintf_internal_r+0x22c4>
    308c:	94800414 	ori	r18,r18,16
    3090:	9080080c 	andi	r2,r18,32
    3094:	10022b26 	beq	r2,zero,3944 <___vfprintf_internal_r+0x13e8>
    3098:	d9002e17 	ldw	r4,184(sp)
    309c:	d9402a17 	ldw	r5,168(sp)
    30a0:	d8002785 	stb	zero,158(sp)
    30a4:	20c00204 	addi	r3,r4,8
    30a8:	24c00017 	ldw	r19,0(r4)
    30ac:	25800117 	ldw	r22,4(r4)
    30b0:	28042e16 	blt	r5,zero,416c <___vfprintf_internal_r+0x1c10>
    30b4:	013fdfc4 	movi	r4,-129
    30b8:	9d84b03a 	or	r2,r19,r22
    30bc:	d8c02e15 	stw	r3,184(sp)
    30c0:	9124703a 	and	r18,r18,r4
    30c4:	0039883a 	mov	fp,zero
    30c8:	103e801e 	bne	r2,zero,2acc <__alt_mem_onchip_memory2_0+0xf8001a3c>
    30cc:	d9002a17 	ldw	r4,168(sp)
    30d0:	2002e01e 	bne	r4,zero,3c54 <___vfprintf_internal_r+0x16f8>
    30d4:	d8002a15 	stw	zero,168(sp)
    30d8:	d8002b15 	stw	zero,172(sp)
    30dc:	dc001e04 	addi	r16,sp,120
    30e0:	003ef506 	br	2cb8 <__alt_mem_onchip_memory2_0+0xf8001c28>
    30e4:	8025883a 	mov	r18,r16
    30e8:	dc002903 	ldbu	r16,164(sp)
    30ec:	e011883a 	mov	r8,fp
    30f0:	84003fcc 	andi	r16,r16,255
    30f4:	8005ba1e 	bne	r16,zero,47e0 <___vfprintf_internal_r+0x2284>
    30f8:	01000074 	movhi	r4,1
    30fc:	2108a604 	addi	r4,r4,8856
    3100:	d9003915 	stw	r4,228(sp)
    3104:	9080080c 	andi	r2,r18,32
    3108:	10006126 	beq	r2,zero,3290 <___vfprintf_internal_r+0xd34>
    310c:	d9402e17 	ldw	r5,184(sp)
    3110:	2cc00017 	ldw	r19,0(r5)
    3114:	2d800117 	ldw	r22,4(r5)
    3118:	29400204 	addi	r5,r5,8
    311c:	d9402e15 	stw	r5,184(sp)
    3120:	9080004c 	andi	r2,r18,1
    3124:	1001ac26 	beq	r2,zero,37d8 <___vfprintf_internal_r+0x127c>
    3128:	9d84b03a 	or	r2,r19,r22
    312c:	10038526 	beq	r2,zero,3f44 <___vfprintf_internal_r+0x19e8>
    3130:	d8c02a17 	ldw	r3,168(sp)
    3134:	00800c04 	movi	r2,48
    3138:	d8802705 	stb	r2,156(sp)
    313c:	dc402745 	stb	r17,157(sp)
    3140:	d8002785 	stb	zero,158(sp)
    3144:	90800094 	ori	r2,r18,2
    3148:	18047916 	blt	r3,zero,4330 <___vfprintf_internal_r+0x1dd4>
    314c:	00bfdfc4 	movi	r2,-129
    3150:	90a4703a 	and	r18,r18,r2
    3154:	94800094 	ori	r18,r18,2
    3158:	0039883a 	mov	fp,zero
    315c:	d9003917 	ldw	r4,228(sp)
    3160:	dc001e04 	addi	r16,sp,120
    3164:	988003cc 	andi	r2,r19,15
    3168:	b006973a 	slli	r3,r22,28
    316c:	2085883a 	add	r2,r4,r2
    3170:	9826d13a 	srli	r19,r19,4
    3174:	10800003 	ldbu	r2,0(r2)
    3178:	b02cd13a 	srli	r22,r22,4
    317c:	843fffc4 	addi	r16,r16,-1
    3180:	1ce6b03a 	or	r19,r3,r19
    3184:	80800005 	stb	r2,0(r16)
    3188:	9d84b03a 	or	r2,r19,r22
    318c:	103ff51e 	bne	r2,zero,3164 <__alt_mem_onchip_memory2_0+0xf80020d4>
    3190:	d8c02817 	ldw	r3,160(sp)
    3194:	1c07c83a 	sub	r3,r3,r16
    3198:	d8c02b15 	stw	r3,172(sp)
    319c:	003ec606 	br	2cb8 <__alt_mem_onchip_memory2_0+0xf8001c28>
    31a0:	8025883a 	mov	r18,r16
    31a4:	dc002903 	ldbu	r16,164(sp)
    31a8:	e011883a 	mov	r8,fp
    31ac:	84003fcc 	andi	r16,r16,255
    31b0:	803e9626 	beq	r16,zero,2c0c <__alt_mem_onchip_memory2_0+0xf8001b7c>
    31b4:	d8c02b03 	ldbu	r3,172(sp)
    31b8:	d8c02785 	stb	r3,158(sp)
    31bc:	003e9306 	br	2c0c <__alt_mem_onchip_memory2_0+0xf8001b7c>
    31c0:	00c00044 	movi	r3,1
    31c4:	d8c02905 	stb	r3,164(sp)
    31c8:	00c00ac4 	movi	r3,43
    31cc:	d8c02b05 	stb	r3,172(sp)
    31d0:	ac400007 	ldb	r17,0(r21)
    31d4:	003d4306 	br	26e4 <__alt_mem_onchip_memory2_0+0xf8001654>
    31d8:	84000814 	ori	r16,r16,32
    31dc:	ac400007 	ldb	r17,0(r21)
    31e0:	003d4006 	br	26e4 <__alt_mem_onchip_memory2_0+0xf8001654>
    31e4:	d8802e17 	ldw	r2,184(sp)
    31e8:	8025883a 	mov	r18,r16
    31ec:	d8002785 	stb	zero,158(sp)
    31f0:	14000017 	ldw	r16,0(r2)
    31f4:	e011883a 	mov	r8,fp
    31f8:	14c00104 	addi	r19,r2,4
    31fc:	80042d26 	beq	r16,zero,42b4 <___vfprintf_internal_r+0x1d58>
    3200:	d8c02a17 	ldw	r3,168(sp)
    3204:	1803e416 	blt	r3,zero,4198 <___vfprintf_internal_r+0x1c3c>
    3208:	180d883a 	mov	r6,r3
    320c:	000b883a 	mov	r5,zero
    3210:	8009883a 	mov	r4,r16
    3214:	df003d15 	stw	fp,244(sp)
    3218:	0007e940 	call	7e94 <memchr>
    321c:	da003d17 	ldw	r8,244(sp)
    3220:	10046826 	beq	r2,zero,43c4 <___vfprintf_internal_r+0x1e68>
    3224:	1405c83a 	sub	r2,r2,r16
    3228:	d8802b15 	stw	r2,172(sp)
    322c:	1003e016 	blt	r2,zero,41b0 <___vfprintf_internal_r+0x1c54>
    3230:	df002783 	ldbu	fp,158(sp)
    3234:	d8802915 	stw	r2,164(sp)
    3238:	dcc02e15 	stw	r19,184(sp)
    323c:	d8002a15 	stw	zero,168(sp)
    3240:	d8003215 	stw	zero,200(sp)
    3244:	003ea206 	br	2cd0 <__alt_mem_onchip_memory2_0+0xf8001c40>
    3248:	8025883a 	mov	r18,r16
    324c:	dc002903 	ldbu	r16,164(sp)
    3250:	e011883a 	mov	r8,fp
    3254:	84003fcc 	andi	r16,r16,255
    3258:	803f8d26 	beq	r16,zero,3090 <__alt_mem_onchip_memory2_0+0xf8002000>
    325c:	d8c02b03 	ldbu	r3,172(sp)
    3260:	d8c02785 	stb	r3,158(sp)
    3264:	003f8a06 	br	3090 <__alt_mem_onchip_memory2_0+0xf8002000>
    3268:	8025883a 	mov	r18,r16
    326c:	dc002903 	ldbu	r16,164(sp)
    3270:	e011883a 	mov	r8,fp
    3274:	84003fcc 	andi	r16,r16,255
    3278:	8005661e 	bne	r16,zero,4814 <___vfprintf_internal_r+0x22b8>
    327c:	01000074 	movhi	r4,1
    3280:	2108ab04 	addi	r4,r4,8876
    3284:	d9003915 	stw	r4,228(sp)
    3288:	9080080c 	andi	r2,r18,32
    328c:	103f9f1e 	bne	r2,zero,310c <__alt_mem_onchip_memory2_0+0xf800207c>
    3290:	9080040c 	andi	r2,r18,16
    3294:	1002eb26 	beq	r2,zero,3e44 <___vfprintf_internal_r+0x18e8>
    3298:	d8802e17 	ldw	r2,184(sp)
    329c:	002d883a 	mov	r22,zero
    32a0:	14c00017 	ldw	r19,0(r2)
    32a4:	10800104 	addi	r2,r2,4
    32a8:	d8802e15 	stw	r2,184(sp)
    32ac:	003f9c06 	br	3120 <__alt_mem_onchip_memory2_0+0xf8002090>
    32b0:	d8802b07 	ldb	r2,172(sp)
    32b4:	1002e11e 	bne	r2,zero,3e3c <___vfprintf_internal_r+0x18e0>
    32b8:	00c00044 	movi	r3,1
    32bc:	d8c02905 	stb	r3,164(sp)
    32c0:	00c00804 	movi	r3,32
    32c4:	d8c02b05 	stb	r3,172(sp)
    32c8:	ac400007 	ldb	r17,0(r21)
    32cc:	003d0506 	br	26e4 <__alt_mem_onchip_memory2_0+0xf8001654>
    32d0:	84000054 	ori	r16,r16,1
    32d4:	ac400007 	ldb	r17,0(r21)
    32d8:	003d0206 	br	26e4 <__alt_mem_onchip_memory2_0+0xf8001654>
    32dc:	8025883a 	mov	r18,r16
    32e0:	dc002903 	ldbu	r16,164(sp)
    32e4:	e011883a 	mov	r8,fp
    32e8:	84003fcc 	andi	r16,r16,255
    32ec:	803de726 	beq	r16,zero,2a8c <__alt_mem_onchip_memory2_0+0xf80019fc>
    32f0:	d8c02b03 	ldbu	r3,172(sp)
    32f4:	d8c02785 	stb	r3,158(sp)
    32f8:	003de406 	br	2a8c <__alt_mem_onchip_memory2_0+0xf80019fc>
    32fc:	84001014 	ori	r16,r16,64
    3300:	ac400007 	ldb	r17,0(r21)
    3304:	003cf706 	br	26e4 <__alt_mem_onchip_memory2_0+0xf8001654>
    3308:	ac400007 	ldb	r17,0(r21)
    330c:	00801b04 	movi	r2,108
    3310:	88838f26 	beq	r17,r2,4150 <___vfprintf_internal_r+0x1bf4>
    3314:	84000414 	ori	r16,r16,16
    3318:	003cf206 	br	26e4 <__alt_mem_onchip_memory2_0+0xf8001654>
    331c:	8025883a 	mov	r18,r16
    3320:	dc002903 	ldbu	r16,164(sp)
    3324:	e011883a 	mov	r8,fp
    3328:	84003fcc 	andi	r16,r16,255
    332c:	80053f1e 	bne	r16,zero,482c <___vfprintf_internal_r+0x22d0>
    3330:	9080080c 	andi	r2,r18,32
    3334:	1002d226 	beq	r2,zero,3e80 <___vfprintf_internal_r+0x1924>
    3338:	d9002e17 	ldw	r4,184(sp)
    333c:	d9402f17 	ldw	r5,188(sp)
    3340:	20800017 	ldw	r2,0(r4)
    3344:	2807d7fa 	srai	r3,r5,31
    3348:	21000104 	addi	r4,r4,4
    334c:	d9002e15 	stw	r4,184(sp)
    3350:	11400015 	stw	r5,0(r2)
    3354:	10c00115 	stw	r3,4(r2)
    3358:	003cb806 	br	263c <__alt_mem_onchip_memory2_0+0xf80015ac>
    335c:	d8c02e17 	ldw	r3,184(sp)
    3360:	d9002e17 	ldw	r4,184(sp)
    3364:	8025883a 	mov	r18,r16
    3368:	18800017 	ldw	r2,0(r3)
    336c:	21000104 	addi	r4,r4,4
    3370:	00c00044 	movi	r3,1
    3374:	e011883a 	mov	r8,fp
    3378:	d8c02915 	stw	r3,164(sp)
    337c:	d8002785 	stb	zero,158(sp)
    3380:	d8801405 	stb	r2,80(sp)
    3384:	d9002e15 	stw	r4,184(sp)
    3388:	d8c02b15 	stw	r3,172(sp)
    338c:	d8002a15 	stw	zero,168(sp)
    3390:	d8003215 	stw	zero,200(sp)
    3394:	dc001404 	addi	r16,sp,80
    3398:	0039883a 	mov	fp,zero
    339c:	003e5306 	br	2cec <__alt_mem_onchip_memory2_0+0xf8001c5c>
    33a0:	01000074 	movhi	r4,1
    33a4:	2108ab04 	addi	r4,r4,8876
    33a8:	0039883a 	mov	fp,zero
    33ac:	d9003915 	stw	r4,228(sp)
    33b0:	04401e04 	movi	r17,120
    33b4:	003f6906 	br	315c <__alt_mem_onchip_memory2_0+0xf80020cc>
    33b8:	8025883a 	mov	r18,r16
    33bc:	dc002903 	ldbu	r16,164(sp)
    33c0:	e011883a 	mov	r8,fp
    33c4:	84003fcc 	andi	r16,r16,255
    33c8:	8005081e 	bne	r16,zero,47ec <___vfprintf_internal_r+0x2290>
    33cc:	883d6126 	beq	r17,zero,2954 <__alt_mem_onchip_memory2_0+0xf80018c4>
    33d0:	00c00044 	movi	r3,1
    33d4:	d8c02915 	stw	r3,164(sp)
    33d8:	dc401405 	stb	r17,80(sp)
    33dc:	d8002785 	stb	zero,158(sp)
    33e0:	003fe906 	br	3388 <__alt_mem_onchip_memory2_0+0xf80022f8>
    33e4:	01400074 	movhi	r5,1
    33e8:	2948ab04 	addi	r5,r5,8876
    33ec:	d9403915 	stw	r5,228(sp)
    33f0:	d8c02e15 	stw	r3,184(sp)
    33f4:	1025883a 	mov	r18,r2
    33f8:	04401e04 	movi	r17,120
    33fc:	9d84b03a 	or	r2,r19,r22
    3400:	1000fc1e 	bne	r2,zero,37f4 <___vfprintf_internal_r+0x1298>
    3404:	0039883a 	mov	fp,zero
    3408:	00800084 	movi	r2,2
    340c:	10803fcc 	andi	r2,r2,255
    3410:	00c00044 	movi	r3,1
    3414:	10c20f26 	beq	r2,r3,3c54 <___vfprintf_internal_r+0x16f8>
    3418:	00c00084 	movi	r3,2
    341c:	10fd3326 	beq	r2,r3,28ec <__alt_mem_onchip_memory2_0+0xf800185c>
    3420:	003e0b06 	br	2c50 <__alt_mem_onchip_memory2_0+0xf8001bc0>
    3424:	d8c02017 	ldw	r3,128(sp)
    3428:	003e7106 	br	2df0 <__alt_mem_onchip_memory2_0+0xf8001d60>
    342c:	00801944 	movi	r2,101
    3430:	14407e0e 	bge	r2,r17,362c <___vfprintf_internal_r+0x10d0>
    3434:	d9003617 	ldw	r4,216(sp)
    3438:	d9403817 	ldw	r5,224(sp)
    343c:	000d883a 	mov	r6,zero
    3440:	000f883a 	mov	r7,zero
    3444:	d8c03c15 	stw	r3,240(sp)
    3448:	da003d15 	stw	r8,244(sp)
    344c:	000dc9c0 	call	dc9c <__eqdf2>
    3450:	d8c03c17 	ldw	r3,240(sp)
    3454:	da003d17 	ldw	r8,244(sp)
    3458:	1000f71e 	bne	r2,zero,3838 <___vfprintf_internal_r+0x12dc>
    345c:	d8801f17 	ldw	r2,124(sp)
    3460:	01000074 	movhi	r4,1
    3464:	2108b204 	addi	r4,r4,8904
    3468:	18c00044 	addi	r3,r3,1
    346c:	10800044 	addi	r2,r2,1
    3470:	41000015 	stw	r4,0(r8)
    3474:	01000044 	movi	r4,1
    3478:	41000115 	stw	r4,4(r8)
    347c:	d8c02015 	stw	r3,128(sp)
    3480:	d8801f15 	stw	r2,124(sp)
    3484:	010001c4 	movi	r4,7
    3488:	2082b816 	blt	r4,r2,3f6c <___vfprintf_internal_r+0x1a10>
    348c:	42000204 	addi	r8,r8,8
    3490:	d8802617 	ldw	r2,152(sp)
    3494:	d9403317 	ldw	r5,204(sp)
    3498:	11400216 	blt	r2,r5,34a4 <___vfprintf_internal_r+0xf48>
    349c:	9080004c 	andi	r2,r18,1
    34a0:	103eb326 	beq	r2,zero,2f70 <__alt_mem_onchip_memory2_0+0xf8001ee0>
    34a4:	d8803717 	ldw	r2,220(sp)
    34a8:	d9003417 	ldw	r4,208(sp)
    34ac:	d9403717 	ldw	r5,220(sp)
    34b0:	1887883a 	add	r3,r3,r2
    34b4:	d8801f17 	ldw	r2,124(sp)
    34b8:	41000015 	stw	r4,0(r8)
    34bc:	41400115 	stw	r5,4(r8)
    34c0:	10800044 	addi	r2,r2,1
    34c4:	d8c02015 	stw	r3,128(sp)
    34c8:	d8801f15 	stw	r2,124(sp)
    34cc:	010001c4 	movi	r4,7
    34d0:	20832916 	blt	r4,r2,4178 <___vfprintf_internal_r+0x1c1c>
    34d4:	42000204 	addi	r8,r8,8
    34d8:	d8803317 	ldw	r2,204(sp)
    34dc:	143fffc4 	addi	r16,r2,-1
    34e0:	043ea30e 	bge	zero,r16,2f70 <__alt_mem_onchip_memory2_0+0xf8001ee0>
    34e4:	04400404 	movi	r17,16
    34e8:	d8801f17 	ldw	r2,124(sp)
    34ec:	8c00880e 	bge	r17,r16,3710 <___vfprintf_internal_r+0x11b4>
    34f0:	01400074 	movhi	r5,1
    34f4:	2948b284 	addi	r5,r5,8906
    34f8:	d9402c15 	stw	r5,176(sp)
    34fc:	058001c4 	movi	r22,7
    3500:	dcc02d17 	ldw	r19,180(sp)
    3504:	00000306 	br	3514 <___vfprintf_internal_r+0xfb8>
    3508:	42000204 	addi	r8,r8,8
    350c:	843ffc04 	addi	r16,r16,-16
    3510:	8c00820e 	bge	r17,r16,371c <___vfprintf_internal_r+0x11c0>
    3514:	18c00404 	addi	r3,r3,16
    3518:	10800044 	addi	r2,r2,1
    351c:	45000015 	stw	r20,0(r8)
    3520:	44400115 	stw	r17,4(r8)
    3524:	d8c02015 	stw	r3,128(sp)
    3528:	d8801f15 	stw	r2,124(sp)
    352c:	b0bff60e 	bge	r22,r2,3508 <__alt_mem_onchip_memory2_0+0xf8002478>
    3530:	d9801e04 	addi	r6,sp,120
    3534:	b80b883a 	mov	r5,r23
    3538:	9809883a 	mov	r4,r19
    353c:	0009d3c0 	call	9d3c <__sprint_r>
    3540:	103d0a1e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    3544:	d8c02017 	ldw	r3,128(sp)
    3548:	d8801f17 	ldw	r2,124(sp)
    354c:	da000404 	addi	r8,sp,16
    3550:	003fee06 	br	350c <__alt_mem_onchip_memory2_0+0xf800247c>
    3554:	d9403117 	ldw	r5,196(sp)
    3558:	d8802917 	ldw	r2,164(sp)
    355c:	28adc83a 	sub	r22,r5,r2
    3560:	05be410e 	bge	zero,r22,2e68 <__alt_mem_onchip_memory2_0+0xf8001dd8>
    3564:	07000404 	movi	fp,16
    3568:	d8801f17 	ldw	r2,124(sp)
    356c:	e5838f0e 	bge	fp,r22,43ac <___vfprintf_internal_r+0x1e50>
    3570:	01400074 	movhi	r5,1
    3574:	2948b284 	addi	r5,r5,8906
    3578:	dc403015 	stw	r17,192(sp)
    357c:	d9402c15 	stw	r5,176(sp)
    3580:	b023883a 	mov	r17,r22
    3584:	04c001c4 	movi	r19,7
    3588:	a82d883a 	mov	r22,r21
    358c:	902b883a 	mov	r21,r18
    3590:	8025883a 	mov	r18,r16
    3594:	dc002d17 	ldw	r16,180(sp)
    3598:	00000306 	br	35a8 <___vfprintf_internal_r+0x104c>
    359c:	8c7ffc04 	addi	r17,r17,-16
    35a0:	42000204 	addi	r8,r8,8
    35a4:	e440110e 	bge	fp,r17,35ec <___vfprintf_internal_r+0x1090>
    35a8:	18c00404 	addi	r3,r3,16
    35ac:	10800044 	addi	r2,r2,1
    35b0:	45000015 	stw	r20,0(r8)
    35b4:	47000115 	stw	fp,4(r8)
    35b8:	d8c02015 	stw	r3,128(sp)
    35bc:	d8801f15 	stw	r2,124(sp)
    35c0:	98bff60e 	bge	r19,r2,359c <__alt_mem_onchip_memory2_0+0xf800250c>
    35c4:	d9801e04 	addi	r6,sp,120
    35c8:	b80b883a 	mov	r5,r23
    35cc:	8009883a 	mov	r4,r16
    35d0:	0009d3c0 	call	9d3c <__sprint_r>
    35d4:	103ce51e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    35d8:	8c7ffc04 	addi	r17,r17,-16
    35dc:	d8c02017 	ldw	r3,128(sp)
    35e0:	d8801f17 	ldw	r2,124(sp)
    35e4:	da000404 	addi	r8,sp,16
    35e8:	e47fef16 	blt	fp,r17,35a8 <__alt_mem_onchip_memory2_0+0xf8002518>
    35ec:	9021883a 	mov	r16,r18
    35f0:	a825883a 	mov	r18,r21
    35f4:	b02b883a 	mov	r21,r22
    35f8:	882d883a 	mov	r22,r17
    35fc:	dc403017 	ldw	r17,192(sp)
    3600:	d9002c17 	ldw	r4,176(sp)
    3604:	1d87883a 	add	r3,r3,r22
    3608:	10800044 	addi	r2,r2,1
    360c:	41000015 	stw	r4,0(r8)
    3610:	45800115 	stw	r22,4(r8)
    3614:	d8c02015 	stw	r3,128(sp)
    3618:	d8801f15 	stw	r2,124(sp)
    361c:	010001c4 	movi	r4,7
    3620:	20818e16 	blt	r4,r2,3c5c <___vfprintf_internal_r+0x1700>
    3624:	42000204 	addi	r8,r8,8
    3628:	003e0f06 	br	2e68 <__alt_mem_onchip_memory2_0+0xf8001dd8>
    362c:	d9403317 	ldw	r5,204(sp)
    3630:	00800044 	movi	r2,1
    3634:	18c00044 	addi	r3,r3,1
    3638:	1141530e 	bge	r2,r5,3b88 <___vfprintf_internal_r+0x162c>
    363c:	dc401f17 	ldw	r17,124(sp)
    3640:	00800044 	movi	r2,1
    3644:	40800115 	stw	r2,4(r8)
    3648:	8c400044 	addi	r17,r17,1
    364c:	44000015 	stw	r16,0(r8)
    3650:	d8c02015 	stw	r3,128(sp)
    3654:	dc401f15 	stw	r17,124(sp)
    3658:	008001c4 	movi	r2,7
    365c:	14416b16 	blt	r2,r17,3c0c <___vfprintf_internal_r+0x16b0>
    3660:	42000204 	addi	r8,r8,8
    3664:	d8803717 	ldw	r2,220(sp)
    3668:	d9003417 	ldw	r4,208(sp)
    366c:	8c400044 	addi	r17,r17,1
    3670:	10c7883a 	add	r3,r2,r3
    3674:	40800115 	stw	r2,4(r8)
    3678:	41000015 	stw	r4,0(r8)
    367c:	d8c02015 	stw	r3,128(sp)
    3680:	dc401f15 	stw	r17,124(sp)
    3684:	008001c4 	movi	r2,7
    3688:	14416916 	blt	r2,r17,3c30 <___vfprintf_internal_r+0x16d4>
    368c:	45800204 	addi	r22,r8,8
    3690:	d9003617 	ldw	r4,216(sp)
    3694:	d9403817 	ldw	r5,224(sp)
    3698:	000d883a 	mov	r6,zero
    369c:	000f883a 	mov	r7,zero
    36a0:	d8c03c15 	stw	r3,240(sp)
    36a4:	000dc9c0 	call	dc9c <__eqdf2>
    36a8:	d8c03c17 	ldw	r3,240(sp)
    36ac:	1000bc26 	beq	r2,zero,39a0 <___vfprintf_internal_r+0x1444>
    36b0:	d9403317 	ldw	r5,204(sp)
    36b4:	84000044 	addi	r16,r16,1
    36b8:	8c400044 	addi	r17,r17,1
    36bc:	28bfffc4 	addi	r2,r5,-1
    36c0:	1887883a 	add	r3,r3,r2
    36c4:	b0800115 	stw	r2,4(r22)
    36c8:	b4000015 	stw	r16,0(r22)
    36cc:	d8c02015 	stw	r3,128(sp)
    36d0:	dc401f15 	stw	r17,124(sp)
    36d4:	008001c4 	movi	r2,7
    36d8:	14414316 	blt	r2,r17,3be8 <___vfprintf_internal_r+0x168c>
    36dc:	b5800204 	addi	r22,r22,8
    36e0:	d9003a17 	ldw	r4,232(sp)
    36e4:	df0022c4 	addi	fp,sp,139
    36e8:	8c400044 	addi	r17,r17,1
    36ec:	20c7883a 	add	r3,r4,r3
    36f0:	b7000015 	stw	fp,0(r22)
    36f4:	b1000115 	stw	r4,4(r22)
    36f8:	d8c02015 	stw	r3,128(sp)
    36fc:	dc401f15 	stw	r17,124(sp)
    3700:	008001c4 	movi	r2,7
    3704:	14400e16 	blt	r2,r17,3740 <___vfprintf_internal_r+0x11e4>
    3708:	b2000204 	addi	r8,r22,8
    370c:	003e1806 	br	2f70 <__alt_mem_onchip_memory2_0+0xf8001ee0>
    3710:	01000074 	movhi	r4,1
    3714:	2108b284 	addi	r4,r4,8906
    3718:	d9002c15 	stw	r4,176(sp)
    371c:	d9002c17 	ldw	r4,176(sp)
    3720:	1c07883a 	add	r3,r3,r16
    3724:	44000115 	stw	r16,4(r8)
    3728:	41000015 	stw	r4,0(r8)
    372c:	10800044 	addi	r2,r2,1
    3730:	d8c02015 	stw	r3,128(sp)
    3734:	d8801f15 	stw	r2,124(sp)
    3738:	010001c4 	movi	r4,7
    373c:	20be0b0e 	bge	r4,r2,2f6c <__alt_mem_onchip_memory2_0+0xf8001edc>
    3740:	d9002d17 	ldw	r4,180(sp)
    3744:	d9801e04 	addi	r6,sp,120
    3748:	b80b883a 	mov	r5,r23
    374c:	0009d3c0 	call	9d3c <__sprint_r>
    3750:	103c861e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    3754:	d8c02017 	ldw	r3,128(sp)
    3758:	da000404 	addi	r8,sp,16
    375c:	003e0406 	br	2f70 <__alt_mem_onchip_memory2_0+0xf8001ee0>
    3760:	d9002d17 	ldw	r4,180(sp)
    3764:	d9801e04 	addi	r6,sp,120
    3768:	b80b883a 	mov	r5,r23
    376c:	0009d3c0 	call	9d3c <__sprint_r>
    3770:	103e3b26 	beq	r2,zero,3060 <__alt_mem_onchip_memory2_0+0xf8001fd0>
    3774:	003c7d06 	br	296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    3778:	d9002d17 	ldw	r4,180(sp)
    377c:	d9801e04 	addi	r6,sp,120
    3780:	b80b883a 	mov	r5,r23
    3784:	0009d3c0 	call	9d3c <__sprint_r>
    3788:	103c781e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    378c:	d8c02017 	ldw	r3,128(sp)
    3790:	da000404 	addi	r8,sp,16
    3794:	003de906 	br	2f3c <__alt_mem_onchip_memory2_0+0xf8001eac>
    3798:	d9002d17 	ldw	r4,180(sp)
    379c:	d9801e04 	addi	r6,sp,120
    37a0:	b80b883a 	mov	r5,r23
    37a4:	0009d3c0 	call	9d3c <__sprint_r>
    37a8:	103c701e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    37ac:	d8c02017 	ldw	r3,128(sp)
    37b0:	da000404 	addi	r8,sp,16
    37b4:	003d9b06 	br	2e24 <__alt_mem_onchip_memory2_0+0xf8001d94>
    37b8:	d9002d17 	ldw	r4,180(sp)
    37bc:	d9801e04 	addi	r6,sp,120
    37c0:	b80b883a 	mov	r5,r23
    37c4:	0009d3c0 	call	9d3c <__sprint_r>
    37c8:	103c681e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    37cc:	d8c02017 	ldw	r3,128(sp)
    37d0:	da000404 	addi	r8,sp,16
    37d4:	003da106 	br	2e5c <__alt_mem_onchip_memory2_0+0xf8001dcc>
    37d8:	d9402a17 	ldw	r5,168(sp)
    37dc:	d8002785 	stb	zero,158(sp)
    37e0:	283f0616 	blt	r5,zero,33fc <__alt_mem_onchip_memory2_0+0xf800236c>
    37e4:	00ffdfc4 	movi	r3,-129
    37e8:	9d84b03a 	or	r2,r19,r22
    37ec:	90e4703a 	and	r18,r18,r3
    37f0:	103c3b26 	beq	r2,zero,28e0 <__alt_mem_onchip_memory2_0+0xf8001850>
    37f4:	0039883a 	mov	fp,zero
    37f8:	003e5806 	br	315c <__alt_mem_onchip_memory2_0+0xf80020cc>
    37fc:	9080040c 	andi	r2,r18,16
    3800:	1001b326 	beq	r2,zero,3ed0 <___vfprintf_internal_r+0x1974>
    3804:	d8c02e17 	ldw	r3,184(sp)
    3808:	d9002a17 	ldw	r4,168(sp)
    380c:	d8002785 	stb	zero,158(sp)
    3810:	18800104 	addi	r2,r3,4
    3814:	1cc00017 	ldw	r19,0(r3)
    3818:	002d883a 	mov	r22,zero
    381c:	2001b516 	blt	r4,zero,3ef4 <___vfprintf_internal_r+0x1998>
    3820:	00ffdfc4 	movi	r3,-129
    3824:	d8802e15 	stw	r2,184(sp)
    3828:	90e4703a 	and	r18,r18,r3
    382c:	983d0526 	beq	r19,zero,2c44 <__alt_mem_onchip_memory2_0+0xf8001bb4>
    3830:	0039883a 	mov	fp,zero
    3834:	003d0806 	br	2c58 <__alt_mem_onchip_memory2_0+0xf8001bc8>
    3838:	dc402617 	ldw	r17,152(sp)
    383c:	0441d30e 	bge	zero,r17,3f8c <___vfprintf_internal_r+0x1a30>
    3840:	dc403217 	ldw	r17,200(sp)
    3844:	d8803317 	ldw	r2,204(sp)
    3848:	1440010e 	bge	r2,r17,3850 <___vfprintf_internal_r+0x12f4>
    384c:	1023883a 	mov	r17,r2
    3850:	04400a0e 	bge	zero,r17,387c <___vfprintf_internal_r+0x1320>
    3854:	d8801f17 	ldw	r2,124(sp)
    3858:	1c47883a 	add	r3,r3,r17
    385c:	44000015 	stw	r16,0(r8)
    3860:	10800044 	addi	r2,r2,1
    3864:	44400115 	stw	r17,4(r8)
    3868:	d8c02015 	stw	r3,128(sp)
    386c:	d8801f15 	stw	r2,124(sp)
    3870:	010001c4 	movi	r4,7
    3874:	20826516 	blt	r4,r2,420c <___vfprintf_internal_r+0x1cb0>
    3878:	42000204 	addi	r8,r8,8
    387c:	88026116 	blt	r17,zero,4204 <___vfprintf_internal_r+0x1ca8>
    3880:	d9003217 	ldw	r4,200(sp)
    3884:	2463c83a 	sub	r17,r4,r17
    3888:	04407b0e 	bge	zero,r17,3a78 <___vfprintf_internal_r+0x151c>
    388c:	05800404 	movi	r22,16
    3890:	d8801f17 	ldw	r2,124(sp)
    3894:	b4419d0e 	bge	r22,r17,3f0c <___vfprintf_internal_r+0x19b0>
    3898:	01000074 	movhi	r4,1
    389c:	2108b284 	addi	r4,r4,8906
    38a0:	d9002c15 	stw	r4,176(sp)
    38a4:	070001c4 	movi	fp,7
    38a8:	dcc02d17 	ldw	r19,180(sp)
    38ac:	00000306 	br	38bc <___vfprintf_internal_r+0x1360>
    38b0:	42000204 	addi	r8,r8,8
    38b4:	8c7ffc04 	addi	r17,r17,-16
    38b8:	b441970e 	bge	r22,r17,3f18 <___vfprintf_internal_r+0x19bc>
    38bc:	18c00404 	addi	r3,r3,16
    38c0:	10800044 	addi	r2,r2,1
    38c4:	45000015 	stw	r20,0(r8)
    38c8:	45800115 	stw	r22,4(r8)
    38cc:	d8c02015 	stw	r3,128(sp)
    38d0:	d8801f15 	stw	r2,124(sp)
    38d4:	e0bff60e 	bge	fp,r2,38b0 <__alt_mem_onchip_memory2_0+0xf8002820>
    38d8:	d9801e04 	addi	r6,sp,120
    38dc:	b80b883a 	mov	r5,r23
    38e0:	9809883a 	mov	r4,r19
    38e4:	0009d3c0 	call	9d3c <__sprint_r>
    38e8:	103c201e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    38ec:	d8c02017 	ldw	r3,128(sp)
    38f0:	d8801f17 	ldw	r2,124(sp)
    38f4:	da000404 	addi	r8,sp,16
    38f8:	003fee06 	br	38b4 <__alt_mem_onchip_memory2_0+0xf8002824>
    38fc:	d9002d17 	ldw	r4,180(sp)
    3900:	d9801e04 	addi	r6,sp,120
    3904:	b80b883a 	mov	r5,r23
    3908:	0009d3c0 	call	9d3c <__sprint_r>
    390c:	103c171e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    3910:	d8c02017 	ldw	r3,128(sp)
    3914:	df002787 	ldb	fp,158(sp)
    3918:	da000404 	addi	r8,sp,16
    391c:	003d3406 	br	2df0 <__alt_mem_onchip_memory2_0+0xf8001d60>
    3920:	9080040c 	andi	r2,r18,16
    3924:	10016126 	beq	r2,zero,3eac <___vfprintf_internal_r+0x1950>
    3928:	d9402e17 	ldw	r5,184(sp)
    392c:	2cc00017 	ldw	r19,0(r5)
    3930:	29400104 	addi	r5,r5,4
    3934:	d9402e15 	stw	r5,184(sp)
    3938:	982dd7fa 	srai	r22,r19,31
    393c:	b005883a 	mov	r2,r22
    3940:	003c5a06 	br	2aac <__alt_mem_onchip_memory2_0+0xf8001a1c>
    3944:	9080040c 	andi	r2,r18,16
    3948:	10003526 	beq	r2,zero,3a20 <___vfprintf_internal_r+0x14c4>
    394c:	d8c02e17 	ldw	r3,184(sp)
    3950:	d9002a17 	ldw	r4,168(sp)
    3954:	d8002785 	stb	zero,158(sp)
    3958:	18800104 	addi	r2,r3,4
    395c:	1cc00017 	ldw	r19,0(r3)
    3960:	002d883a 	mov	r22,zero
    3964:	20003716 	blt	r4,zero,3a44 <___vfprintf_internal_r+0x14e8>
    3968:	00ffdfc4 	movi	r3,-129
    396c:	d8802e15 	stw	r2,184(sp)
    3970:	90e4703a 	and	r18,r18,r3
    3974:	0039883a 	mov	fp,zero
    3978:	983dd426 	beq	r19,zero,30cc <__alt_mem_onchip_memory2_0+0xf800203c>
    397c:	00800244 	movi	r2,9
    3980:	14fc5336 	bltu	r2,r19,2ad0 <__alt_mem_onchip_memory2_0+0xf8001a40>
    3984:	d8c02817 	ldw	r3,160(sp)
    3988:	dc001dc4 	addi	r16,sp,119
    398c:	9cc00c04 	addi	r19,r19,48
    3990:	1c07c83a 	sub	r3,r3,r16
    3994:	dcc01dc5 	stb	r19,119(sp)
    3998:	d8c02b15 	stw	r3,172(sp)
    399c:	003cc606 	br	2cb8 <__alt_mem_onchip_memory2_0+0xf8001c28>
    39a0:	d8803317 	ldw	r2,204(sp)
    39a4:	143fffc4 	addi	r16,r2,-1
    39a8:	043f4d0e 	bge	zero,r16,36e0 <__alt_mem_onchip_memory2_0+0xf8002650>
    39ac:	07000404 	movi	fp,16
    39b0:	e400810e 	bge	fp,r16,3bb8 <___vfprintf_internal_r+0x165c>
    39b4:	01400074 	movhi	r5,1
    39b8:	2948b284 	addi	r5,r5,8906
    39bc:	d9402c15 	stw	r5,176(sp)
    39c0:	01c001c4 	movi	r7,7
    39c4:	dcc02d17 	ldw	r19,180(sp)
    39c8:	00000306 	br	39d8 <___vfprintf_internal_r+0x147c>
    39cc:	b5800204 	addi	r22,r22,8
    39d0:	843ffc04 	addi	r16,r16,-16
    39d4:	e4007b0e 	bge	fp,r16,3bc4 <___vfprintf_internal_r+0x1668>
    39d8:	18c00404 	addi	r3,r3,16
    39dc:	8c400044 	addi	r17,r17,1
    39e0:	b5000015 	stw	r20,0(r22)
    39e4:	b7000115 	stw	fp,4(r22)
    39e8:	d8c02015 	stw	r3,128(sp)
    39ec:	dc401f15 	stw	r17,124(sp)
    39f0:	3c7ff60e 	bge	r7,r17,39cc <__alt_mem_onchip_memory2_0+0xf800293c>
    39f4:	d9801e04 	addi	r6,sp,120
    39f8:	b80b883a 	mov	r5,r23
    39fc:	9809883a 	mov	r4,r19
    3a00:	d9c03c15 	stw	r7,240(sp)
    3a04:	0009d3c0 	call	9d3c <__sprint_r>
    3a08:	d9c03c17 	ldw	r7,240(sp)
    3a0c:	103bd71e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    3a10:	d8c02017 	ldw	r3,128(sp)
    3a14:	dc401f17 	ldw	r17,124(sp)
    3a18:	dd800404 	addi	r22,sp,16
    3a1c:	003fec06 	br	39d0 <__alt_mem_onchip_memory2_0+0xf8002940>
    3a20:	9080100c 	andi	r2,r18,64
    3a24:	d8002785 	stb	zero,158(sp)
    3a28:	10010e26 	beq	r2,zero,3e64 <___vfprintf_internal_r+0x1908>
    3a2c:	d9402e17 	ldw	r5,184(sp)
    3a30:	d8c02a17 	ldw	r3,168(sp)
    3a34:	002d883a 	mov	r22,zero
    3a38:	28800104 	addi	r2,r5,4
    3a3c:	2cc0000b 	ldhu	r19,0(r5)
    3a40:	183fc90e 	bge	r3,zero,3968 <__alt_mem_onchip_memory2_0+0xf80028d8>
    3a44:	d8802e15 	stw	r2,184(sp)
    3a48:	0039883a 	mov	fp,zero
    3a4c:	9d84b03a 	or	r2,r19,r22
    3a50:	103c1e1e 	bne	r2,zero,2acc <__alt_mem_onchip_memory2_0+0xf8001a3c>
    3a54:	00800044 	movi	r2,1
    3a58:	003e6c06 	br	340c <__alt_mem_onchip_memory2_0+0xf800237c>
    3a5c:	d9002d17 	ldw	r4,180(sp)
    3a60:	d9801e04 	addi	r6,sp,120
    3a64:	b80b883a 	mov	r5,r23
    3a68:	0009d3c0 	call	9d3c <__sprint_r>
    3a6c:	103bbf1e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    3a70:	d8c02017 	ldw	r3,128(sp)
    3a74:	da000404 	addi	r8,sp,16
    3a78:	d9003217 	ldw	r4,200(sp)
    3a7c:	d8802617 	ldw	r2,152(sp)
    3a80:	d9403317 	ldw	r5,204(sp)
    3a84:	8123883a 	add	r17,r16,r4
    3a88:	11400216 	blt	r2,r5,3a94 <___vfprintf_internal_r+0x1538>
    3a8c:	9100004c 	andi	r4,r18,1
    3a90:	20000d26 	beq	r4,zero,3ac8 <___vfprintf_internal_r+0x156c>
    3a94:	d9003717 	ldw	r4,220(sp)
    3a98:	d9403417 	ldw	r5,208(sp)
    3a9c:	1907883a 	add	r3,r3,r4
    3aa0:	d9001f17 	ldw	r4,124(sp)
    3aa4:	41400015 	stw	r5,0(r8)
    3aa8:	d9403717 	ldw	r5,220(sp)
    3aac:	21000044 	addi	r4,r4,1
    3ab0:	d8c02015 	stw	r3,128(sp)
    3ab4:	41400115 	stw	r5,4(r8)
    3ab8:	d9001f15 	stw	r4,124(sp)
    3abc:	014001c4 	movi	r5,7
    3ac0:	2901e816 	blt	r5,r4,4264 <___vfprintf_internal_r+0x1d08>
    3ac4:	42000204 	addi	r8,r8,8
    3ac8:	d9003317 	ldw	r4,204(sp)
    3acc:	8121883a 	add	r16,r16,r4
    3ad0:	2085c83a 	sub	r2,r4,r2
    3ad4:	8461c83a 	sub	r16,r16,r17
    3ad8:	1400010e 	bge	r2,r16,3ae0 <___vfprintf_internal_r+0x1584>
    3adc:	1021883a 	mov	r16,r2
    3ae0:	04000a0e 	bge	zero,r16,3b0c <___vfprintf_internal_r+0x15b0>
    3ae4:	d9001f17 	ldw	r4,124(sp)
    3ae8:	1c07883a 	add	r3,r3,r16
    3aec:	44400015 	stw	r17,0(r8)
    3af0:	21000044 	addi	r4,r4,1
    3af4:	44000115 	stw	r16,4(r8)
    3af8:	d8c02015 	stw	r3,128(sp)
    3afc:	d9001f15 	stw	r4,124(sp)
    3b00:	014001c4 	movi	r5,7
    3b04:	2901fb16 	blt	r5,r4,42f4 <___vfprintf_internal_r+0x1d98>
    3b08:	42000204 	addi	r8,r8,8
    3b0c:	8001f716 	blt	r16,zero,42ec <___vfprintf_internal_r+0x1d90>
    3b10:	1421c83a 	sub	r16,r2,r16
    3b14:	043d160e 	bge	zero,r16,2f70 <__alt_mem_onchip_memory2_0+0xf8001ee0>
    3b18:	04400404 	movi	r17,16
    3b1c:	d8801f17 	ldw	r2,124(sp)
    3b20:	8c3efb0e 	bge	r17,r16,3710 <__alt_mem_onchip_memory2_0+0xf8002680>
    3b24:	01400074 	movhi	r5,1
    3b28:	2948b284 	addi	r5,r5,8906
    3b2c:	d9402c15 	stw	r5,176(sp)
    3b30:	058001c4 	movi	r22,7
    3b34:	dcc02d17 	ldw	r19,180(sp)
    3b38:	00000306 	br	3b48 <___vfprintf_internal_r+0x15ec>
    3b3c:	42000204 	addi	r8,r8,8
    3b40:	843ffc04 	addi	r16,r16,-16
    3b44:	8c3ef50e 	bge	r17,r16,371c <__alt_mem_onchip_memory2_0+0xf800268c>
    3b48:	18c00404 	addi	r3,r3,16
    3b4c:	10800044 	addi	r2,r2,1
    3b50:	45000015 	stw	r20,0(r8)
    3b54:	44400115 	stw	r17,4(r8)
    3b58:	d8c02015 	stw	r3,128(sp)
    3b5c:	d8801f15 	stw	r2,124(sp)
    3b60:	b0bff60e 	bge	r22,r2,3b3c <__alt_mem_onchip_memory2_0+0xf8002aac>
    3b64:	d9801e04 	addi	r6,sp,120
    3b68:	b80b883a 	mov	r5,r23
    3b6c:	9809883a 	mov	r4,r19
    3b70:	0009d3c0 	call	9d3c <__sprint_r>
    3b74:	103b7d1e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    3b78:	d8c02017 	ldw	r3,128(sp)
    3b7c:	d8801f17 	ldw	r2,124(sp)
    3b80:	da000404 	addi	r8,sp,16
    3b84:	003fee06 	br	3b40 <__alt_mem_onchip_memory2_0+0xf8002ab0>
    3b88:	9088703a 	and	r4,r18,r2
    3b8c:	203eab1e 	bne	r4,zero,363c <__alt_mem_onchip_memory2_0+0xf80025ac>
    3b90:	dc401f17 	ldw	r17,124(sp)
    3b94:	40800115 	stw	r2,4(r8)
    3b98:	44000015 	stw	r16,0(r8)
    3b9c:	8c400044 	addi	r17,r17,1
    3ba0:	d8c02015 	stw	r3,128(sp)
    3ba4:	dc401f15 	stw	r17,124(sp)
    3ba8:	008001c4 	movi	r2,7
    3bac:	14400e16 	blt	r2,r17,3be8 <___vfprintf_internal_r+0x168c>
    3bb0:	45800204 	addi	r22,r8,8
    3bb4:	003eca06 	br	36e0 <__alt_mem_onchip_memory2_0+0xf8002650>
    3bb8:	01000074 	movhi	r4,1
    3bbc:	2108b284 	addi	r4,r4,8906
    3bc0:	d9002c15 	stw	r4,176(sp)
    3bc4:	d8802c17 	ldw	r2,176(sp)
    3bc8:	1c07883a 	add	r3,r3,r16
    3bcc:	8c400044 	addi	r17,r17,1
    3bd0:	b0800015 	stw	r2,0(r22)
    3bd4:	b4000115 	stw	r16,4(r22)
    3bd8:	d8c02015 	stw	r3,128(sp)
    3bdc:	dc401f15 	stw	r17,124(sp)
    3be0:	008001c4 	movi	r2,7
    3be4:	147ebd0e 	bge	r2,r17,36dc <__alt_mem_onchip_memory2_0+0xf800264c>
    3be8:	d9002d17 	ldw	r4,180(sp)
    3bec:	d9801e04 	addi	r6,sp,120
    3bf0:	b80b883a 	mov	r5,r23
    3bf4:	0009d3c0 	call	9d3c <__sprint_r>
    3bf8:	103b5c1e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    3bfc:	d8c02017 	ldw	r3,128(sp)
    3c00:	dc401f17 	ldw	r17,124(sp)
    3c04:	dd800404 	addi	r22,sp,16
    3c08:	003eb506 	br	36e0 <__alt_mem_onchip_memory2_0+0xf8002650>
    3c0c:	d9002d17 	ldw	r4,180(sp)
    3c10:	d9801e04 	addi	r6,sp,120
    3c14:	b80b883a 	mov	r5,r23
    3c18:	0009d3c0 	call	9d3c <__sprint_r>
    3c1c:	103b531e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    3c20:	d8c02017 	ldw	r3,128(sp)
    3c24:	dc401f17 	ldw	r17,124(sp)
    3c28:	da000404 	addi	r8,sp,16
    3c2c:	003e8d06 	br	3664 <__alt_mem_onchip_memory2_0+0xf80025d4>
    3c30:	d9002d17 	ldw	r4,180(sp)
    3c34:	d9801e04 	addi	r6,sp,120
    3c38:	b80b883a 	mov	r5,r23
    3c3c:	0009d3c0 	call	9d3c <__sprint_r>
    3c40:	103b4a1e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    3c44:	d8c02017 	ldw	r3,128(sp)
    3c48:	dc401f17 	ldw	r17,124(sp)
    3c4c:	dd800404 	addi	r22,sp,16
    3c50:	003e8f06 	br	3690 <__alt_mem_onchip_memory2_0+0xf8002600>
    3c54:	0027883a 	mov	r19,zero
    3c58:	003f4a06 	br	3984 <__alt_mem_onchip_memory2_0+0xf80028f4>
    3c5c:	d9002d17 	ldw	r4,180(sp)
    3c60:	d9801e04 	addi	r6,sp,120
    3c64:	b80b883a 	mov	r5,r23
    3c68:	0009d3c0 	call	9d3c <__sprint_r>
    3c6c:	103b3f1e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    3c70:	d8c02017 	ldw	r3,128(sp)
    3c74:	da000404 	addi	r8,sp,16
    3c78:	003c7b06 	br	2e68 <__alt_mem_onchip_memory2_0+0xf8001dd8>
    3c7c:	d9402a17 	ldw	r5,168(sp)
    3c80:	04e7c83a 	sub	r19,zero,r19
    3c84:	07000b44 	movi	fp,45
    3c88:	9804c03a 	cmpne	r2,r19,zero
    3c8c:	05adc83a 	sub	r22,zero,r22
    3c90:	df002785 	stb	fp,158(sp)
    3c94:	b0adc83a 	sub	r22,r22,r2
    3c98:	28017b16 	blt	r5,zero,4288 <___vfprintf_internal_r+0x1d2c>
    3c9c:	00bfdfc4 	movi	r2,-129
    3ca0:	90a4703a 	and	r18,r18,r2
    3ca4:	003b8906 	br	2acc <__alt_mem_onchip_memory2_0+0xf8001a3c>
    3ca8:	d9003617 	ldw	r4,216(sp)
    3cac:	d9403817 	ldw	r5,224(sp)
    3cb0:	da003d15 	stw	r8,244(sp)
    3cb4:	00099600 	call	9960 <__fpclassifyd>
    3cb8:	da003d17 	ldw	r8,244(sp)
    3cbc:	1000f026 	beq	r2,zero,4080 <___vfprintf_internal_r+0x1b24>
    3cc0:	d9002a17 	ldw	r4,168(sp)
    3cc4:	05bff7c4 	movi	r22,-33
    3cc8:	00bfffc4 	movi	r2,-1
    3ccc:	8dac703a 	and	r22,r17,r22
    3cd0:	20820026 	beq	r4,r2,44d4 <___vfprintf_internal_r+0x1f78>
    3cd4:	008011c4 	movi	r2,71
    3cd8:	b081f726 	beq	r22,r2,44b8 <___vfprintf_internal_r+0x1f5c>
    3cdc:	d9003817 	ldw	r4,224(sp)
    3ce0:	90c04014 	ori	r3,r18,256
    3ce4:	d8c02c15 	stw	r3,176(sp)
    3ce8:	20021516 	blt	r4,zero,4540 <___vfprintf_internal_r+0x1fe4>
    3cec:	dcc03817 	ldw	r19,224(sp)
    3cf0:	d8002905 	stb	zero,164(sp)
    3cf4:	00801984 	movi	r2,102
    3cf8:	8881f926 	beq	r17,r2,44e0 <___vfprintf_internal_r+0x1f84>
    3cfc:	00801184 	movi	r2,70
    3d00:	88821c26 	beq	r17,r2,4574 <___vfprintf_internal_r+0x2018>
    3d04:	00801144 	movi	r2,69
    3d08:	b081ef26 	beq	r22,r2,44c8 <___vfprintf_internal_r+0x1f6c>
    3d0c:	d8c02a17 	ldw	r3,168(sp)
    3d10:	d8802104 	addi	r2,sp,132
    3d14:	d8800315 	stw	r2,12(sp)
    3d18:	d9403617 	ldw	r5,216(sp)
    3d1c:	d8802504 	addi	r2,sp,148
    3d20:	d9002d17 	ldw	r4,180(sp)
    3d24:	d8800215 	stw	r2,8(sp)
    3d28:	d8802604 	addi	r2,sp,152
    3d2c:	d8c00015 	stw	r3,0(sp)
    3d30:	d8800115 	stw	r2,4(sp)
    3d34:	01c00084 	movi	r7,2
    3d38:	980d883a 	mov	r6,r19
    3d3c:	d8c03c15 	stw	r3,240(sp)
    3d40:	da003d15 	stw	r8,244(sp)
    3d44:	0004c8c0 	call	4c8c <_dtoa_r>
    3d48:	1021883a 	mov	r16,r2
    3d4c:	008019c4 	movi	r2,103
    3d50:	d8c03c17 	ldw	r3,240(sp)
    3d54:	da003d17 	ldw	r8,244(sp)
    3d58:	88817126 	beq	r17,r2,4320 <___vfprintf_internal_r+0x1dc4>
    3d5c:	008011c4 	movi	r2,71
    3d60:	88829126 	beq	r17,r2,47a8 <___vfprintf_internal_r+0x224c>
    3d64:	80f9883a 	add	fp,r16,r3
    3d68:	d9003617 	ldw	r4,216(sp)
    3d6c:	000d883a 	mov	r6,zero
    3d70:	000f883a 	mov	r7,zero
    3d74:	980b883a 	mov	r5,r19
    3d78:	da003d15 	stw	r8,244(sp)
    3d7c:	000dc9c0 	call	dc9c <__eqdf2>
    3d80:	da003d17 	ldw	r8,244(sp)
    3d84:	10018d26 	beq	r2,zero,43bc <___vfprintf_internal_r+0x1e60>
    3d88:	d8802117 	ldw	r2,132(sp)
    3d8c:	1700062e 	bgeu	r2,fp,3da8 <___vfprintf_internal_r+0x184c>
    3d90:	01000c04 	movi	r4,48
    3d94:	10c00044 	addi	r3,r2,1
    3d98:	d8c02115 	stw	r3,132(sp)
    3d9c:	11000005 	stb	r4,0(r2)
    3da0:	d8802117 	ldw	r2,132(sp)
    3da4:	173ffb36 	bltu	r2,fp,3d94 <__alt_mem_onchip_memory2_0+0xf8002d04>
    3da8:	1405c83a 	sub	r2,r2,r16
    3dac:	d8803315 	stw	r2,204(sp)
    3db0:	008011c4 	movi	r2,71
    3db4:	b0817626 	beq	r22,r2,4390 <___vfprintf_internal_r+0x1e34>
    3db8:	00801944 	movi	r2,101
    3dbc:	1442800e 	bge	r2,r17,47c0 <___vfprintf_internal_r+0x2264>
    3dc0:	d8c02617 	ldw	r3,152(sp)
    3dc4:	00801984 	movi	r2,102
    3dc8:	d8c03215 	stw	r3,200(sp)
    3dcc:	8881fe26 	beq	r17,r2,45c8 <___vfprintf_internal_r+0x206c>
    3dd0:	d8c03217 	ldw	r3,200(sp)
    3dd4:	d9003317 	ldw	r4,204(sp)
    3dd8:	1901dd16 	blt	r3,r4,4550 <___vfprintf_internal_r+0x1ff4>
    3ddc:	9480004c 	andi	r18,r18,1
    3de0:	90022b1e 	bne	r18,zero,4690 <___vfprintf_internal_r+0x2134>
    3de4:	1805883a 	mov	r2,r3
    3de8:	18028316 	blt	r3,zero,47f8 <___vfprintf_internal_r+0x229c>
    3dec:	d8c03217 	ldw	r3,200(sp)
    3df0:	044019c4 	movi	r17,103
    3df4:	d8c02b15 	stw	r3,172(sp)
    3df8:	df002907 	ldb	fp,164(sp)
    3dfc:	e001531e 	bne	fp,zero,434c <___vfprintf_internal_r+0x1df0>
    3e00:	df002783 	ldbu	fp,158(sp)
    3e04:	d8802915 	stw	r2,164(sp)
    3e08:	dc802c17 	ldw	r18,176(sp)
    3e0c:	d8002a15 	stw	zero,168(sp)
    3e10:	003baf06 	br	2cd0 <__alt_mem_onchip_memory2_0+0xf8001c40>
    3e14:	d8c02e17 	ldw	r3,184(sp)
    3e18:	d9002e17 	ldw	r4,184(sp)
    3e1c:	d9402e17 	ldw	r5,184(sp)
    3e20:	18c00017 	ldw	r3,0(r3)
    3e24:	21000117 	ldw	r4,4(r4)
    3e28:	29400204 	addi	r5,r5,8
    3e2c:	d8c03615 	stw	r3,216(sp)
    3e30:	d9003815 	stw	r4,224(sp)
    3e34:	d9402e15 	stw	r5,184(sp)
    3e38:	003b5006 	br	2b7c <__alt_mem_onchip_memory2_0+0xf8001aec>
    3e3c:	ac400007 	ldb	r17,0(r21)
    3e40:	003a2806 	br	26e4 <__alt_mem_onchip_memory2_0+0xf8001654>
    3e44:	9080100c 	andi	r2,r18,64
    3e48:	1000a826 	beq	r2,zero,40ec <___vfprintf_internal_r+0x1b90>
    3e4c:	d8c02e17 	ldw	r3,184(sp)
    3e50:	002d883a 	mov	r22,zero
    3e54:	1cc0000b 	ldhu	r19,0(r3)
    3e58:	18c00104 	addi	r3,r3,4
    3e5c:	d8c02e15 	stw	r3,184(sp)
    3e60:	003caf06 	br	3120 <__alt_mem_onchip_memory2_0+0xf8002090>
    3e64:	d9002e17 	ldw	r4,184(sp)
    3e68:	d9402a17 	ldw	r5,168(sp)
    3e6c:	002d883a 	mov	r22,zero
    3e70:	20800104 	addi	r2,r4,4
    3e74:	24c00017 	ldw	r19,0(r4)
    3e78:	283ebb0e 	bge	r5,zero,3968 <__alt_mem_onchip_memory2_0+0xf80028d8>
    3e7c:	003ef106 	br	3a44 <__alt_mem_onchip_memory2_0+0xf80029b4>
    3e80:	9080040c 	andi	r2,r18,16
    3e84:	1000921e 	bne	r2,zero,40d0 <___vfprintf_internal_r+0x1b74>
    3e88:	9480100c 	andi	r18,r18,64
    3e8c:	90013926 	beq	r18,zero,4374 <___vfprintf_internal_r+0x1e18>
    3e90:	d9402e17 	ldw	r5,184(sp)
    3e94:	d8c02f17 	ldw	r3,188(sp)
    3e98:	28800017 	ldw	r2,0(r5)
    3e9c:	29400104 	addi	r5,r5,4
    3ea0:	d9402e15 	stw	r5,184(sp)
    3ea4:	10c0000d 	sth	r3,0(r2)
    3ea8:	0039e406 	br	263c <__alt_mem_onchip_memory2_0+0xf80015ac>
    3eac:	9080100c 	andi	r2,r18,64
    3eb0:	10008026 	beq	r2,zero,40b4 <___vfprintf_internal_r+0x1b58>
    3eb4:	d8802e17 	ldw	r2,184(sp)
    3eb8:	14c0000f 	ldh	r19,0(r2)
    3ebc:	10800104 	addi	r2,r2,4
    3ec0:	d8802e15 	stw	r2,184(sp)
    3ec4:	982dd7fa 	srai	r22,r19,31
    3ec8:	b005883a 	mov	r2,r22
    3ecc:	003af706 	br	2aac <__alt_mem_onchip_memory2_0+0xf8001a1c>
    3ed0:	9080100c 	andi	r2,r18,64
    3ed4:	d8002785 	stb	zero,158(sp)
    3ed8:	10008a1e 	bne	r2,zero,4104 <___vfprintf_internal_r+0x1ba8>
    3edc:	d9002e17 	ldw	r4,184(sp)
    3ee0:	d9402a17 	ldw	r5,168(sp)
    3ee4:	002d883a 	mov	r22,zero
    3ee8:	20800104 	addi	r2,r4,4
    3eec:	24c00017 	ldw	r19,0(r4)
    3ef0:	283e4b0e 	bge	r5,zero,3820 <__alt_mem_onchip_memory2_0+0xf8002790>
    3ef4:	9d86b03a 	or	r3,r19,r22
    3ef8:	d8802e15 	stw	r2,184(sp)
    3efc:	183e4c1e 	bne	r3,zero,3830 <__alt_mem_onchip_memory2_0+0xf80027a0>
    3f00:	0039883a 	mov	fp,zero
    3f04:	0005883a 	mov	r2,zero
    3f08:	003d4006 	br	340c <__alt_mem_onchip_memory2_0+0xf800237c>
    3f0c:	01400074 	movhi	r5,1
    3f10:	2948b284 	addi	r5,r5,8906
    3f14:	d9402c15 	stw	r5,176(sp)
    3f18:	d9402c17 	ldw	r5,176(sp)
    3f1c:	1c47883a 	add	r3,r3,r17
    3f20:	10800044 	addi	r2,r2,1
    3f24:	41400015 	stw	r5,0(r8)
    3f28:	44400115 	stw	r17,4(r8)
    3f2c:	d8c02015 	stw	r3,128(sp)
    3f30:	d8801f15 	stw	r2,124(sp)
    3f34:	010001c4 	movi	r4,7
    3f38:	20bec816 	blt	r4,r2,3a5c <__alt_mem_onchip_memory2_0+0xf80029cc>
    3f3c:	42000204 	addi	r8,r8,8
    3f40:	003ecd06 	br	3a78 <__alt_mem_onchip_memory2_0+0xf80029e8>
    3f44:	d9002a17 	ldw	r4,168(sp)
    3f48:	d8002785 	stb	zero,158(sp)
    3f4c:	203d2d16 	blt	r4,zero,3404 <__alt_mem_onchip_memory2_0+0xf8002374>
    3f50:	00bfdfc4 	movi	r2,-129
    3f54:	90a4703a 	and	r18,r18,r2
    3f58:	003a6106 	br	28e0 <__alt_mem_onchip_memory2_0+0xf8001850>
    3f5c:	01000074 	movhi	r4,1
    3f60:	2108b284 	addi	r4,r4,8906
    3f64:	d9002c15 	stw	r4,176(sp)
    3f68:	003bea06 	br	2f14 <__alt_mem_onchip_memory2_0+0xf8001e84>
    3f6c:	d9002d17 	ldw	r4,180(sp)
    3f70:	d9801e04 	addi	r6,sp,120
    3f74:	b80b883a 	mov	r5,r23
    3f78:	0009d3c0 	call	9d3c <__sprint_r>
    3f7c:	103a7b1e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    3f80:	d8c02017 	ldw	r3,128(sp)
    3f84:	da000404 	addi	r8,sp,16
    3f88:	003d4106 	br	3490 <__alt_mem_onchip_memory2_0+0xf8002400>
    3f8c:	d8801f17 	ldw	r2,124(sp)
    3f90:	01400074 	movhi	r5,1
    3f94:	01000044 	movi	r4,1
    3f98:	18c00044 	addi	r3,r3,1
    3f9c:	10800044 	addi	r2,r2,1
    3fa0:	2948b204 	addi	r5,r5,8904
    3fa4:	41000115 	stw	r4,4(r8)
    3fa8:	41400015 	stw	r5,0(r8)
    3fac:	d8c02015 	stw	r3,128(sp)
    3fb0:	d8801f15 	stw	r2,124(sp)
    3fb4:	010001c4 	movi	r4,7
    3fb8:	20805c16 	blt	r4,r2,412c <___vfprintf_internal_r+0x1bd0>
    3fbc:	42000204 	addi	r8,r8,8
    3fc0:	8800041e 	bne	r17,zero,3fd4 <___vfprintf_internal_r+0x1a78>
    3fc4:	d8803317 	ldw	r2,204(sp)
    3fc8:	1000021e 	bne	r2,zero,3fd4 <___vfprintf_internal_r+0x1a78>
    3fcc:	9080004c 	andi	r2,r18,1
    3fd0:	103be726 	beq	r2,zero,2f70 <__alt_mem_onchip_memory2_0+0xf8001ee0>
    3fd4:	d9003717 	ldw	r4,220(sp)
    3fd8:	d8801f17 	ldw	r2,124(sp)
    3fdc:	d9403417 	ldw	r5,208(sp)
    3fe0:	20c7883a 	add	r3,r4,r3
    3fe4:	10800044 	addi	r2,r2,1
    3fe8:	41000115 	stw	r4,4(r8)
    3fec:	41400015 	stw	r5,0(r8)
    3ff0:	d8c02015 	stw	r3,128(sp)
    3ff4:	d8801f15 	stw	r2,124(sp)
    3ff8:	010001c4 	movi	r4,7
    3ffc:	20812116 	blt	r4,r2,4484 <___vfprintf_internal_r+0x1f28>
    4000:	42000204 	addi	r8,r8,8
    4004:	0463c83a 	sub	r17,zero,r17
    4008:	0440730e 	bge	zero,r17,41d8 <___vfprintf_internal_r+0x1c7c>
    400c:	05800404 	movi	r22,16
    4010:	b440860e 	bge	r22,r17,422c <___vfprintf_internal_r+0x1cd0>
    4014:	01400074 	movhi	r5,1
    4018:	2948b284 	addi	r5,r5,8906
    401c:	d9402c15 	stw	r5,176(sp)
    4020:	070001c4 	movi	fp,7
    4024:	dcc02d17 	ldw	r19,180(sp)
    4028:	00000306 	br	4038 <___vfprintf_internal_r+0x1adc>
    402c:	42000204 	addi	r8,r8,8
    4030:	8c7ffc04 	addi	r17,r17,-16
    4034:	b440800e 	bge	r22,r17,4238 <___vfprintf_internal_r+0x1cdc>
    4038:	18c00404 	addi	r3,r3,16
    403c:	10800044 	addi	r2,r2,1
    4040:	45000015 	stw	r20,0(r8)
    4044:	45800115 	stw	r22,4(r8)
    4048:	d8c02015 	stw	r3,128(sp)
    404c:	d8801f15 	stw	r2,124(sp)
    4050:	e0bff60e 	bge	fp,r2,402c <__alt_mem_onchip_memory2_0+0xf8002f9c>
    4054:	d9801e04 	addi	r6,sp,120
    4058:	b80b883a 	mov	r5,r23
    405c:	9809883a 	mov	r4,r19
    4060:	0009d3c0 	call	9d3c <__sprint_r>
    4064:	103a411e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    4068:	d8c02017 	ldw	r3,128(sp)
    406c:	d8801f17 	ldw	r2,124(sp)
    4070:	da000404 	addi	r8,sp,16
    4074:	003fee06 	br	4030 <__alt_mem_onchip_memory2_0+0xf8002fa0>
    4078:	00bfffc4 	movi	r2,-1
    407c:	003a3f06 	br	297c <__alt_mem_onchip_memory2_0+0xf80018ec>
    4080:	008011c4 	movi	r2,71
    4084:	1440b816 	blt	r2,r17,4368 <___vfprintf_internal_r+0x1e0c>
    4088:	04000074 	movhi	r16,1
    408c:	8408a404 	addi	r16,r16,8848
    4090:	00c000c4 	movi	r3,3
    4094:	00bfdfc4 	movi	r2,-129
    4098:	d8c02915 	stw	r3,164(sp)
    409c:	90a4703a 	and	r18,r18,r2
    40a0:	df002783 	ldbu	fp,158(sp)
    40a4:	d8c02b15 	stw	r3,172(sp)
    40a8:	d8002a15 	stw	zero,168(sp)
    40ac:	d8003215 	stw	zero,200(sp)
    40b0:	003b0706 	br	2cd0 <__alt_mem_onchip_memory2_0+0xf8001c40>
    40b4:	d8c02e17 	ldw	r3,184(sp)
    40b8:	1cc00017 	ldw	r19,0(r3)
    40bc:	18c00104 	addi	r3,r3,4
    40c0:	d8c02e15 	stw	r3,184(sp)
    40c4:	982dd7fa 	srai	r22,r19,31
    40c8:	b005883a 	mov	r2,r22
    40cc:	003a7706 	br	2aac <__alt_mem_onchip_memory2_0+0xf8001a1c>
    40d0:	d8c02e17 	ldw	r3,184(sp)
    40d4:	d9002f17 	ldw	r4,188(sp)
    40d8:	18800017 	ldw	r2,0(r3)
    40dc:	18c00104 	addi	r3,r3,4
    40e0:	d8c02e15 	stw	r3,184(sp)
    40e4:	11000015 	stw	r4,0(r2)
    40e8:	00395406 	br	263c <__alt_mem_onchip_memory2_0+0xf80015ac>
    40ec:	d9002e17 	ldw	r4,184(sp)
    40f0:	002d883a 	mov	r22,zero
    40f4:	24c00017 	ldw	r19,0(r4)
    40f8:	21000104 	addi	r4,r4,4
    40fc:	d9002e15 	stw	r4,184(sp)
    4100:	003c0706 	br	3120 <__alt_mem_onchip_memory2_0+0xf8002090>
    4104:	d9402e17 	ldw	r5,184(sp)
    4108:	d8c02a17 	ldw	r3,168(sp)
    410c:	002d883a 	mov	r22,zero
    4110:	28800104 	addi	r2,r5,4
    4114:	2cc0000b 	ldhu	r19,0(r5)
    4118:	183dc10e 	bge	r3,zero,3820 <__alt_mem_onchip_memory2_0+0xf8002790>
    411c:	003f7506 	br	3ef4 <__alt_mem_onchip_memory2_0+0xf8002e64>
    4120:	04000074 	movhi	r16,1
    4124:	8408a204 	addi	r16,r16,8840
    4128:	003aa706 	br	2bc8 <__alt_mem_onchip_memory2_0+0xf8001b38>
    412c:	d9002d17 	ldw	r4,180(sp)
    4130:	d9801e04 	addi	r6,sp,120
    4134:	b80b883a 	mov	r5,r23
    4138:	0009d3c0 	call	9d3c <__sprint_r>
    413c:	103a0b1e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    4140:	dc402617 	ldw	r17,152(sp)
    4144:	d8c02017 	ldw	r3,128(sp)
    4148:	da000404 	addi	r8,sp,16
    414c:	003f9c06 	br	3fc0 <__alt_mem_onchip_memory2_0+0xf8002f30>
    4150:	ac400043 	ldbu	r17,1(r21)
    4154:	84000814 	ori	r16,r16,32
    4158:	ad400044 	addi	r21,r21,1
    415c:	8c403fcc 	andi	r17,r17,255
    4160:	8c40201c 	xori	r17,r17,128
    4164:	8c7fe004 	addi	r17,r17,-128
    4168:	00395e06 	br	26e4 <__alt_mem_onchip_memory2_0+0xf8001654>
    416c:	d8c02e15 	stw	r3,184(sp)
    4170:	0039883a 	mov	fp,zero
    4174:	003e3506 	br	3a4c <__alt_mem_onchip_memory2_0+0xf80029bc>
    4178:	d9002d17 	ldw	r4,180(sp)
    417c:	d9801e04 	addi	r6,sp,120
    4180:	b80b883a 	mov	r5,r23
    4184:	0009d3c0 	call	9d3c <__sprint_r>
    4188:	1039f81e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    418c:	d8c02017 	ldw	r3,128(sp)
    4190:	da000404 	addi	r8,sp,16
    4194:	003cd006 	br	34d8 <__alt_mem_onchip_memory2_0+0xf8002448>
    4198:	8009883a 	mov	r4,r16
    419c:	df003d15 	stw	fp,244(sp)
    41a0:	00024c40 	call	24c4 <strlen>
    41a4:	d8802b15 	stw	r2,172(sp)
    41a8:	da003d17 	ldw	r8,244(sp)
    41ac:	103c200e 	bge	r2,zero,3230 <__alt_mem_onchip_memory2_0+0xf80021a0>
    41b0:	0005883a 	mov	r2,zero
    41b4:	003c1e06 	br	3230 <__alt_mem_onchip_memory2_0+0xf80021a0>
    41b8:	d9002d17 	ldw	r4,180(sp)
    41bc:	d9801e04 	addi	r6,sp,120
    41c0:	b80b883a 	mov	r5,r23
    41c4:	0009d3c0 	call	9d3c <__sprint_r>
    41c8:	1039e81e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    41cc:	d8c02017 	ldw	r3,128(sp)
    41d0:	d8801f17 	ldw	r2,124(sp)
    41d4:	da000404 	addi	r8,sp,16
    41d8:	d9403317 	ldw	r5,204(sp)
    41dc:	10800044 	addi	r2,r2,1
    41e0:	44000015 	stw	r16,0(r8)
    41e4:	28c7883a 	add	r3,r5,r3
    41e8:	003b5b06 	br	2f58 <__alt_mem_onchip_memory2_0+0xf8001ec8>
    41ec:	01000074 	movhi	r4,1
    41f0:	2108b684 	addi	r4,r4,8922
    41f4:	d9003515 	stw	r4,212(sp)
    41f8:	003af206 	br	2dc4 <__alt_mem_onchip_memory2_0+0xf8001d34>
    41fc:	013fffc4 	movi	r4,-1
    4200:	003a0806 	br	2a24 <__alt_mem_onchip_memory2_0+0xf8001994>
    4204:	0023883a 	mov	r17,zero
    4208:	003d9d06 	br	3880 <__alt_mem_onchip_memory2_0+0xf80027f0>
    420c:	d9002d17 	ldw	r4,180(sp)
    4210:	d9801e04 	addi	r6,sp,120
    4214:	b80b883a 	mov	r5,r23
    4218:	0009d3c0 	call	9d3c <__sprint_r>
    421c:	1039d31e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    4220:	d8c02017 	ldw	r3,128(sp)
    4224:	da000404 	addi	r8,sp,16
    4228:	003d9406 	br	387c <__alt_mem_onchip_memory2_0+0xf80027ec>
    422c:	01000074 	movhi	r4,1
    4230:	2108b284 	addi	r4,r4,8906
    4234:	d9002c15 	stw	r4,176(sp)
    4238:	d9002c17 	ldw	r4,176(sp)
    423c:	1c47883a 	add	r3,r3,r17
    4240:	10800044 	addi	r2,r2,1
    4244:	41000015 	stw	r4,0(r8)
    4248:	44400115 	stw	r17,4(r8)
    424c:	d8c02015 	stw	r3,128(sp)
    4250:	d8801f15 	stw	r2,124(sp)
    4254:	010001c4 	movi	r4,7
    4258:	20bfd716 	blt	r4,r2,41b8 <__alt_mem_onchip_memory2_0+0xf8003128>
    425c:	42000204 	addi	r8,r8,8
    4260:	003fdd06 	br	41d8 <__alt_mem_onchip_memory2_0+0xf8003148>
    4264:	d9002d17 	ldw	r4,180(sp)
    4268:	d9801e04 	addi	r6,sp,120
    426c:	b80b883a 	mov	r5,r23
    4270:	0009d3c0 	call	9d3c <__sprint_r>
    4274:	1039bd1e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    4278:	d8802617 	ldw	r2,152(sp)
    427c:	d8c02017 	ldw	r3,128(sp)
    4280:	da000404 	addi	r8,sp,16
    4284:	003e1006 	br	3ac8 <__alt_mem_onchip_memory2_0+0xf8002a38>
    4288:	00800044 	movi	r2,1
    428c:	10803fcc 	andi	r2,r2,255
    4290:	00c00044 	movi	r3,1
    4294:	10fa0d26 	beq	r2,r3,2acc <__alt_mem_onchip_memory2_0+0xf8001a3c>
    4298:	00c00084 	movi	r3,2
    429c:	10fbaf26 	beq	r2,r3,315c <__alt_mem_onchip_memory2_0+0xf80020cc>
    42a0:	003a6d06 	br	2c58 <__alt_mem_onchip_memory2_0+0xf8001bc8>
    42a4:	01000074 	movhi	r4,1
    42a8:	2108b684 	addi	r4,r4,8922
    42ac:	d9003515 	stw	r4,212(sp)
    42b0:	003b5406 	br	3004 <__alt_mem_onchip_memory2_0+0xf8001f74>
    42b4:	d8802a17 	ldw	r2,168(sp)
    42b8:	00c00184 	movi	r3,6
    42bc:	1880012e 	bgeu	r3,r2,42c4 <___vfprintf_internal_r+0x1d68>
    42c0:	1805883a 	mov	r2,r3
    42c4:	d8802b15 	stw	r2,172(sp)
    42c8:	1000ef16 	blt	r2,zero,4688 <___vfprintf_internal_r+0x212c>
    42cc:	04000074 	movhi	r16,1
    42d0:	d8802915 	stw	r2,164(sp)
    42d4:	dcc02e15 	stw	r19,184(sp)
    42d8:	d8002a15 	stw	zero,168(sp)
    42dc:	d8003215 	stw	zero,200(sp)
    42e0:	8408b004 	addi	r16,r16,8896
    42e4:	0039883a 	mov	fp,zero
    42e8:	003a8006 	br	2cec <__alt_mem_onchip_memory2_0+0xf8001c5c>
    42ec:	0021883a 	mov	r16,zero
    42f0:	003e0706 	br	3b10 <__alt_mem_onchip_memory2_0+0xf8002a80>
    42f4:	d9002d17 	ldw	r4,180(sp)
    42f8:	d9801e04 	addi	r6,sp,120
    42fc:	b80b883a 	mov	r5,r23
    4300:	0009d3c0 	call	9d3c <__sprint_r>
    4304:	1039991e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    4308:	d8802617 	ldw	r2,152(sp)
    430c:	d9403317 	ldw	r5,204(sp)
    4310:	d8c02017 	ldw	r3,128(sp)
    4314:	da000404 	addi	r8,sp,16
    4318:	2885c83a 	sub	r2,r5,r2
    431c:	003dfb06 	br	3b0c <__alt_mem_onchip_memory2_0+0xf8002a7c>
    4320:	9080004c 	andi	r2,r18,1
    4324:	103e8f1e 	bne	r2,zero,3d64 <__alt_mem_onchip_memory2_0+0xf8002cd4>
    4328:	d8802117 	ldw	r2,132(sp)
    432c:	003e9e06 	br	3da8 <__alt_mem_onchip_memory2_0+0xf8002d18>
    4330:	1025883a 	mov	r18,r2
    4334:	0039883a 	mov	fp,zero
    4338:	00800084 	movi	r2,2
    433c:	003fd306 	br	428c <__alt_mem_onchip_memory2_0+0xf80031fc>
    4340:	07000b44 	movi	fp,45
    4344:	df002785 	stb	fp,158(sp)
    4348:	003a1b06 	br	2bb8 <__alt_mem_onchip_memory2_0+0xf8001b28>
    434c:	00c00b44 	movi	r3,45
    4350:	d8c02785 	stb	r3,158(sp)
    4354:	d8802915 	stw	r2,164(sp)
    4358:	dc802c17 	ldw	r18,176(sp)
    435c:	d8002a15 	stw	zero,168(sp)
    4360:	07000b44 	movi	fp,45
    4364:	003a5e06 	br	2ce0 <__alt_mem_onchip_memory2_0+0xf8001c50>
    4368:	04000074 	movhi	r16,1
    436c:	8408a504 	addi	r16,r16,8852
    4370:	003f4706 	br	4090 <__alt_mem_onchip_memory2_0+0xf8003000>
    4374:	d9002e17 	ldw	r4,184(sp)
    4378:	d9402f17 	ldw	r5,188(sp)
    437c:	20800017 	ldw	r2,0(r4)
    4380:	21000104 	addi	r4,r4,4
    4384:	d9002e15 	stw	r4,184(sp)
    4388:	11400015 	stw	r5,0(r2)
    438c:	0038ab06 	br	263c <__alt_mem_onchip_memory2_0+0xf80015ac>
    4390:	dd802617 	ldw	r22,152(sp)
    4394:	00bfff44 	movi	r2,-3
    4398:	b0801c16 	blt	r22,r2,440c <___vfprintf_internal_r+0x1eb0>
    439c:	d9402a17 	ldw	r5,168(sp)
    43a0:	2d801a16 	blt	r5,r22,440c <___vfprintf_internal_r+0x1eb0>
    43a4:	dd803215 	stw	r22,200(sp)
    43a8:	003e8906 	br	3dd0 <__alt_mem_onchip_memory2_0+0xf8002d40>
    43ac:	01000074 	movhi	r4,1
    43b0:	2108b284 	addi	r4,r4,8906
    43b4:	d9002c15 	stw	r4,176(sp)
    43b8:	003c9106 	br	3600 <__alt_mem_onchip_memory2_0+0xf8002570>
    43bc:	e005883a 	mov	r2,fp
    43c0:	003e7906 	br	3da8 <__alt_mem_onchip_memory2_0+0xf8002d18>
    43c4:	d9002a17 	ldw	r4,168(sp)
    43c8:	df002783 	ldbu	fp,158(sp)
    43cc:	dcc02e15 	stw	r19,184(sp)
    43d0:	d9002915 	stw	r4,164(sp)
    43d4:	d9002b15 	stw	r4,172(sp)
    43d8:	d8002a15 	stw	zero,168(sp)
    43dc:	d8003215 	stw	zero,200(sp)
    43e0:	003a3b06 	br	2cd0 <__alt_mem_onchip_memory2_0+0xf8001c40>
    43e4:	9080004c 	andi	r2,r18,1
    43e8:	0039883a 	mov	fp,zero
    43ec:	10000426 	beq	r2,zero,4400 <___vfprintf_internal_r+0x1ea4>
    43f0:	00800c04 	movi	r2,48
    43f4:	dc001dc4 	addi	r16,sp,119
    43f8:	d8801dc5 	stb	r2,119(sp)
    43fc:	003b6406 	br	3190 <__alt_mem_onchip_memory2_0+0xf8002100>
    4400:	d8002b15 	stw	zero,172(sp)
    4404:	dc001e04 	addi	r16,sp,120
    4408:	003a2b06 	br	2cb8 <__alt_mem_onchip_memory2_0+0xf8001c28>
    440c:	8c7fff84 	addi	r17,r17,-2
    4410:	b5bfffc4 	addi	r22,r22,-1
    4414:	dd802615 	stw	r22,152(sp)
    4418:	dc4022c5 	stb	r17,139(sp)
    441c:	b000bf16 	blt	r22,zero,471c <___vfprintf_internal_r+0x21c0>
    4420:	00800ac4 	movi	r2,43
    4424:	d8802305 	stb	r2,140(sp)
    4428:	00800244 	movi	r2,9
    442c:	15807016 	blt	r2,r22,45f0 <___vfprintf_internal_r+0x2094>
    4430:	00800c04 	movi	r2,48
    4434:	b5800c04 	addi	r22,r22,48
    4438:	d8802345 	stb	r2,141(sp)
    443c:	dd802385 	stb	r22,142(sp)
    4440:	d88023c4 	addi	r2,sp,143
    4444:	df0022c4 	addi	fp,sp,139
    4448:	d8c03317 	ldw	r3,204(sp)
    444c:	1739c83a 	sub	fp,r2,fp
    4450:	d9003317 	ldw	r4,204(sp)
    4454:	e0c7883a 	add	r3,fp,r3
    4458:	df003a15 	stw	fp,232(sp)
    445c:	d8c02b15 	stw	r3,172(sp)
    4460:	00800044 	movi	r2,1
    4464:	1100b30e 	bge	r2,r4,4734 <___vfprintf_internal_r+0x21d8>
    4468:	d8c02b17 	ldw	r3,172(sp)
    446c:	18c00044 	addi	r3,r3,1
    4470:	d8c02b15 	stw	r3,172(sp)
    4474:	1805883a 	mov	r2,r3
    4478:	1800ac16 	blt	r3,zero,472c <___vfprintf_internal_r+0x21d0>
    447c:	d8003215 	stw	zero,200(sp)
    4480:	003e5d06 	br	3df8 <__alt_mem_onchip_memory2_0+0xf8002d68>
    4484:	d9002d17 	ldw	r4,180(sp)
    4488:	d9801e04 	addi	r6,sp,120
    448c:	b80b883a 	mov	r5,r23
    4490:	0009d3c0 	call	9d3c <__sprint_r>
    4494:	1039351e 	bne	r2,zero,296c <__alt_mem_onchip_memory2_0+0xf80018dc>
    4498:	dc402617 	ldw	r17,152(sp)
    449c:	d8c02017 	ldw	r3,128(sp)
    44a0:	d8801f17 	ldw	r2,124(sp)
    44a4:	da000404 	addi	r8,sp,16
    44a8:	003ed606 	br	4004 <__alt_mem_onchip_memory2_0+0xf8002f74>
    44ac:	182b883a 	mov	r21,r3
    44b0:	d8002a15 	stw	zero,168(sp)
    44b4:	00388c06 	br	26e8 <__alt_mem_onchip_memory2_0+0xf8001658>
    44b8:	d8802a17 	ldw	r2,168(sp)
    44bc:	103e071e 	bne	r2,zero,3cdc <__alt_mem_onchip_memory2_0+0xf8002c4c>
    44c0:	dc002a15 	stw	r16,168(sp)
    44c4:	003e0506 	br	3cdc <__alt_mem_onchip_memory2_0+0xf8002c4c>
    44c8:	d9002a17 	ldw	r4,168(sp)
    44cc:	20c00044 	addi	r3,r4,1
    44d0:	003e0f06 	br	3d10 <__alt_mem_onchip_memory2_0+0xf8002c80>
    44d4:	01400184 	movi	r5,6
    44d8:	d9402a15 	stw	r5,168(sp)
    44dc:	003dff06 	br	3cdc <__alt_mem_onchip_memory2_0+0xf8002c4c>
    44e0:	d8802104 	addi	r2,sp,132
    44e4:	d8800315 	stw	r2,12(sp)
    44e8:	d8802504 	addi	r2,sp,148
    44ec:	d8800215 	stw	r2,8(sp)
    44f0:	d8802604 	addi	r2,sp,152
    44f4:	d8800115 	stw	r2,4(sp)
    44f8:	d8802a17 	ldw	r2,168(sp)
    44fc:	d9403617 	ldw	r5,216(sp)
    4500:	d9002d17 	ldw	r4,180(sp)
    4504:	d8800015 	stw	r2,0(sp)
    4508:	01c000c4 	movi	r7,3
    450c:	980d883a 	mov	r6,r19
    4510:	da003d15 	stw	r8,244(sp)
    4514:	0004c8c0 	call	4c8c <_dtoa_r>
    4518:	d8c02a17 	ldw	r3,168(sp)
    451c:	da003d17 	ldw	r8,244(sp)
    4520:	1021883a 	mov	r16,r2
    4524:	10f9883a 	add	fp,r2,r3
    4528:	81000007 	ldb	r4,0(r16)
    452c:	00800c04 	movi	r2,48
    4530:	20805e26 	beq	r4,r2,46ac <___vfprintf_internal_r+0x2150>
    4534:	d8c02617 	ldw	r3,152(sp)
    4538:	e0f9883a 	add	fp,fp,r3
    453c:	003e0a06 	br	3d68 <__alt_mem_onchip_memory2_0+0xf8002cd8>
    4540:	00c00b44 	movi	r3,45
    4544:	24e0003c 	xorhi	r19,r4,32768
    4548:	d8c02905 	stb	r3,164(sp)
    454c:	003de906 	br	3cf4 <__alt_mem_onchip_memory2_0+0xf8002c64>
    4550:	d8c03217 	ldw	r3,200(sp)
    4554:	00c07a0e 	bge	zero,r3,4740 <___vfprintf_internal_r+0x21e4>
    4558:	00800044 	movi	r2,1
    455c:	d9003317 	ldw	r4,204(sp)
    4560:	1105883a 	add	r2,r2,r4
    4564:	d8802b15 	stw	r2,172(sp)
    4568:	10004e16 	blt	r2,zero,46a4 <___vfprintf_internal_r+0x2148>
    456c:	044019c4 	movi	r17,103
    4570:	003e2106 	br	3df8 <__alt_mem_onchip_memory2_0+0xf8002d68>
    4574:	d9002a17 	ldw	r4,168(sp)
    4578:	d8802104 	addi	r2,sp,132
    457c:	d8800315 	stw	r2,12(sp)
    4580:	d9000015 	stw	r4,0(sp)
    4584:	d8802504 	addi	r2,sp,148
    4588:	d9403617 	ldw	r5,216(sp)
    458c:	d9002d17 	ldw	r4,180(sp)
    4590:	d8800215 	stw	r2,8(sp)
    4594:	d8802604 	addi	r2,sp,152
    4598:	d8800115 	stw	r2,4(sp)
    459c:	01c000c4 	movi	r7,3
    45a0:	980d883a 	mov	r6,r19
    45a4:	da003d15 	stw	r8,244(sp)
    45a8:	0004c8c0 	call	4c8c <_dtoa_r>
    45ac:	d8c02a17 	ldw	r3,168(sp)
    45b0:	da003d17 	ldw	r8,244(sp)
    45b4:	1021883a 	mov	r16,r2
    45b8:	00801184 	movi	r2,70
    45bc:	80f9883a 	add	fp,r16,r3
    45c0:	88bfd926 	beq	r17,r2,4528 <__alt_mem_onchip_memory2_0+0xf8003498>
    45c4:	003de806 	br	3d68 <__alt_mem_onchip_memory2_0+0xf8002cd8>
    45c8:	d9002a17 	ldw	r4,168(sp)
    45cc:	00c04d0e 	bge	zero,r3,4704 <___vfprintf_internal_r+0x21a8>
    45d0:	2000441e 	bne	r4,zero,46e4 <___vfprintf_internal_r+0x2188>
    45d4:	9480004c 	andi	r18,r18,1
    45d8:	9000421e 	bne	r18,zero,46e4 <___vfprintf_internal_r+0x2188>
    45dc:	1805883a 	mov	r2,r3
    45e0:	18006f16 	blt	r3,zero,47a0 <___vfprintf_internal_r+0x2244>
    45e4:	d8c03217 	ldw	r3,200(sp)
    45e8:	d8c02b15 	stw	r3,172(sp)
    45ec:	003e0206 	br	3df8 <__alt_mem_onchip_memory2_0+0xf8002d68>
    45f0:	df0022c4 	addi	fp,sp,139
    45f4:	dc002a15 	stw	r16,168(sp)
    45f8:	4027883a 	mov	r19,r8
    45fc:	e021883a 	mov	r16,fp
    4600:	b009883a 	mov	r4,r22
    4604:	01400284 	movi	r5,10
    4608:	000c8c80 	call	c8c8 <__modsi3>
    460c:	10800c04 	addi	r2,r2,48
    4610:	843fffc4 	addi	r16,r16,-1
    4614:	b009883a 	mov	r4,r22
    4618:	01400284 	movi	r5,10
    461c:	80800005 	stb	r2,0(r16)
    4620:	000c8440 	call	c844 <__divsi3>
    4624:	102d883a 	mov	r22,r2
    4628:	00800244 	movi	r2,9
    462c:	15bff416 	blt	r2,r22,4600 <__alt_mem_onchip_memory2_0+0xf8003570>
    4630:	9811883a 	mov	r8,r19
    4634:	b0800c04 	addi	r2,r22,48
    4638:	8027883a 	mov	r19,r16
    463c:	997fffc4 	addi	r5,r19,-1
    4640:	98bfffc5 	stb	r2,-1(r19)
    4644:	dc002a17 	ldw	r16,168(sp)
    4648:	2f006d2e 	bgeu	r5,fp,4800 <___vfprintf_internal_r+0x22a4>
    464c:	d9c02384 	addi	r7,sp,142
    4650:	3ccfc83a 	sub	r7,r7,r19
    4654:	d9002344 	addi	r4,sp,141
    4658:	e1cf883a 	add	r7,fp,r7
    465c:	00000106 	br	4664 <___vfprintf_internal_r+0x2108>
    4660:	28800003 	ldbu	r2,0(r5)
    4664:	20800005 	stb	r2,0(r4)
    4668:	21000044 	addi	r4,r4,1
    466c:	29400044 	addi	r5,r5,1
    4670:	393ffb1e 	bne	r7,r4,4660 <__alt_mem_onchip_memory2_0+0xf80035d0>
    4674:	d8802304 	addi	r2,sp,140
    4678:	14c5c83a 	sub	r2,r2,r19
    467c:	d8c02344 	addi	r3,sp,141
    4680:	1885883a 	add	r2,r3,r2
    4684:	003f7006 	br	4448 <__alt_mem_onchip_memory2_0+0xf80033b8>
    4688:	0005883a 	mov	r2,zero
    468c:	003f0f06 	br	42cc <__alt_mem_onchip_memory2_0+0xf800323c>
    4690:	d8c03217 	ldw	r3,200(sp)
    4694:	18c00044 	addi	r3,r3,1
    4698:	d8c02b15 	stw	r3,172(sp)
    469c:	1805883a 	mov	r2,r3
    46a0:	183fb20e 	bge	r3,zero,456c <__alt_mem_onchip_memory2_0+0xf80034dc>
    46a4:	0005883a 	mov	r2,zero
    46a8:	003fb006 	br	456c <__alt_mem_onchip_memory2_0+0xf80034dc>
    46ac:	d9003617 	ldw	r4,216(sp)
    46b0:	000d883a 	mov	r6,zero
    46b4:	000f883a 	mov	r7,zero
    46b8:	980b883a 	mov	r5,r19
    46bc:	d8c03c15 	stw	r3,240(sp)
    46c0:	da003d15 	stw	r8,244(sp)
    46c4:	000dc9c0 	call	dc9c <__eqdf2>
    46c8:	d8c03c17 	ldw	r3,240(sp)
    46cc:	da003d17 	ldw	r8,244(sp)
    46d0:	103f9826 	beq	r2,zero,4534 <__alt_mem_onchip_memory2_0+0xf80034a4>
    46d4:	00800044 	movi	r2,1
    46d8:	10c7c83a 	sub	r3,r2,r3
    46dc:	d8c02615 	stw	r3,152(sp)
    46e0:	003f9506 	br	4538 <__alt_mem_onchip_memory2_0+0xf80034a8>
    46e4:	d9002a17 	ldw	r4,168(sp)
    46e8:	d8c03217 	ldw	r3,200(sp)
    46ec:	20800044 	addi	r2,r4,1
    46f0:	1885883a 	add	r2,r3,r2
    46f4:	d8802b15 	stw	r2,172(sp)
    46f8:	103dbf0e 	bge	r2,zero,3df8 <__alt_mem_onchip_memory2_0+0xf8002d68>
    46fc:	0005883a 	mov	r2,zero
    4700:	003dbd06 	br	3df8 <__alt_mem_onchip_memory2_0+0xf8002d68>
    4704:	2000201e 	bne	r4,zero,4788 <___vfprintf_internal_r+0x222c>
    4708:	9480004c 	andi	r18,r18,1
    470c:	90001e1e 	bne	r18,zero,4788 <___vfprintf_internal_r+0x222c>
    4710:	00800044 	movi	r2,1
    4714:	d8802b15 	stw	r2,172(sp)
    4718:	003db706 	br	3df8 <__alt_mem_onchip_memory2_0+0xf8002d68>
    471c:	00800b44 	movi	r2,45
    4720:	05adc83a 	sub	r22,zero,r22
    4724:	d8802305 	stb	r2,140(sp)
    4728:	003f3f06 	br	4428 <__alt_mem_onchip_memory2_0+0xf8003398>
    472c:	0005883a 	mov	r2,zero
    4730:	003f5206 	br	447c <__alt_mem_onchip_memory2_0+0xf80033ec>
    4734:	90a4703a 	and	r18,r18,r2
    4738:	903f4e26 	beq	r18,zero,4474 <__alt_mem_onchip_memory2_0+0xf80033e4>
    473c:	003f4a06 	br	4468 <__alt_mem_onchip_memory2_0+0xf80033d8>
    4740:	00800084 	movi	r2,2
    4744:	10c5c83a 	sub	r2,r2,r3
    4748:	003f8406 	br	455c <__alt_mem_onchip_memory2_0+0xf80034cc>
    474c:	d9402e17 	ldw	r5,184(sp)
    4750:	d9002e17 	ldw	r4,184(sp)
    4754:	ac400043 	ldbu	r17,1(r21)
    4758:	29400017 	ldw	r5,0(r5)
    475c:	20800104 	addi	r2,r4,4
    4760:	d8802e15 	stw	r2,184(sp)
    4764:	d9402a15 	stw	r5,168(sp)
    4768:	182b883a 	mov	r21,r3
    476c:	283e7b0e 	bge	r5,zero,415c <__alt_mem_onchip_memory2_0+0xf80030cc>
    4770:	8c403fcc 	andi	r17,r17,255
    4774:	017fffc4 	movi	r5,-1
    4778:	8c40201c 	xori	r17,r17,128
    477c:	d9402a15 	stw	r5,168(sp)
    4780:	8c7fe004 	addi	r17,r17,-128
    4784:	0037d706 	br	26e4 <__alt_mem_onchip_memory2_0+0xf8001654>
    4788:	d8c02a17 	ldw	r3,168(sp)
    478c:	18c00084 	addi	r3,r3,2
    4790:	d8c02b15 	stw	r3,172(sp)
    4794:	1805883a 	mov	r2,r3
    4798:	183d970e 	bge	r3,zero,3df8 <__alt_mem_onchip_memory2_0+0xf8002d68>
    479c:	003fd706 	br	46fc <__alt_mem_onchip_memory2_0+0xf800366c>
    47a0:	0005883a 	mov	r2,zero
    47a4:	003f8f06 	br	45e4 <__alt_mem_onchip_memory2_0+0xf8003554>
    47a8:	9080004c 	andi	r2,r18,1
    47ac:	103f821e 	bne	r2,zero,45b8 <__alt_mem_onchip_memory2_0+0xf8003528>
    47b0:	d8802117 	ldw	r2,132(sp)
    47b4:	1405c83a 	sub	r2,r2,r16
    47b8:	d8803315 	stw	r2,204(sp)
    47bc:	b47ef426 	beq	r22,r17,4390 <__alt_mem_onchip_memory2_0+0xf8003300>
    47c0:	dd802617 	ldw	r22,152(sp)
    47c4:	003f1206 	br	4410 <__alt_mem_onchip_memory2_0+0xf8003380>
    47c8:	d8c02b03 	ldbu	r3,172(sp)
    47cc:	d8c02785 	stb	r3,158(sp)
    47d0:	0038df06 	br	2b50 <__alt_mem_onchip_memory2_0+0xf8001ac0>
    47d4:	d8c02b03 	ldbu	r3,172(sp)
    47d8:	d8c02785 	stb	r3,158(sp)
    47dc:	0038aa06 	br	2a88 <__alt_mem_onchip_memory2_0+0xf80019f8>
    47e0:	d8c02b03 	ldbu	r3,172(sp)
    47e4:	d8c02785 	stb	r3,158(sp)
    47e8:	003a4306 	br	30f8 <__alt_mem_onchip_memory2_0+0xf8002068>
    47ec:	d8c02b03 	ldbu	r3,172(sp)
    47f0:	d8c02785 	stb	r3,158(sp)
    47f4:	003af506 	br	33cc <__alt_mem_onchip_memory2_0+0xf800233c>
    47f8:	0005883a 	mov	r2,zero
    47fc:	003d7b06 	br	3dec <__alt_mem_onchip_memory2_0+0xf8002d5c>
    4800:	d8802344 	addi	r2,sp,141
    4804:	003f1006 	br	4448 <__alt_mem_onchip_memory2_0+0xf80033b8>
    4808:	d8c02b03 	ldbu	r3,172(sp)
    480c:	d8c02785 	stb	r3,158(sp)
    4810:	0038fd06 	br	2c08 <__alt_mem_onchip_memory2_0+0xf8001b78>
    4814:	d8c02b03 	ldbu	r3,172(sp)
    4818:	d8c02785 	stb	r3,158(sp)
    481c:	003a9706 	br	327c <__alt_mem_onchip_memory2_0+0xf80021ec>
    4820:	d8c02b03 	ldbu	r3,172(sp)
    4824:	d8c02785 	stb	r3,158(sp)
    4828:	003a1806 	br	308c <__alt_mem_onchip_memory2_0+0xf8001ffc>
    482c:	d8c02b03 	ldbu	r3,172(sp)
    4830:	d8c02785 	stb	r3,158(sp)
    4834:	003abe06 	br	3330 <__alt_mem_onchip_memory2_0+0xf80022a0>

00004838 <__vfprintf_internal>:
    4838:	00800074 	movhi	r2,1
    483c:	10900d04 	addi	r2,r2,16436
    4840:	300f883a 	mov	r7,r6
    4844:	280d883a 	mov	r6,r5
    4848:	200b883a 	mov	r5,r4
    484c:	11000017 	ldw	r4,0(r2)
    4850:	000255c1 	jmpi	255c <___vfprintf_internal_r>

00004854 <__sbprintf>:
    4854:	2880030b 	ldhu	r2,12(r5)
    4858:	2ac01917 	ldw	r11,100(r5)
    485c:	2a80038b 	ldhu	r10,14(r5)
    4860:	2a400717 	ldw	r9,28(r5)
    4864:	2a000917 	ldw	r8,36(r5)
    4868:	defee204 	addi	sp,sp,-1144
    486c:	00c10004 	movi	r3,1024
    4870:	dc011a15 	stw	r16,1128(sp)
    4874:	10bfff4c 	andi	r2,r2,65533
    4878:	2821883a 	mov	r16,r5
    487c:	d8cb883a 	add	r5,sp,r3
    4880:	dc811c15 	stw	r18,1136(sp)
    4884:	dc411b15 	stw	r17,1132(sp)
    4888:	dfc11d15 	stw	ra,1140(sp)
    488c:	2025883a 	mov	r18,r4
    4890:	d881030d 	sth	r2,1036(sp)
    4894:	dac11915 	stw	r11,1124(sp)
    4898:	da81038d 	sth	r10,1038(sp)
    489c:	da410715 	stw	r9,1052(sp)
    48a0:	da010915 	stw	r8,1060(sp)
    48a4:	dec10015 	stw	sp,1024(sp)
    48a8:	dec10415 	stw	sp,1040(sp)
    48ac:	d8c10215 	stw	r3,1032(sp)
    48b0:	d8c10515 	stw	r3,1044(sp)
    48b4:	d8010615 	stw	zero,1048(sp)
    48b8:	000255c0 	call	255c <___vfprintf_internal_r>
    48bc:	1023883a 	mov	r17,r2
    48c0:	10000416 	blt	r2,zero,48d4 <__sbprintf+0x80>
    48c4:	d9410004 	addi	r5,sp,1024
    48c8:	9009883a 	mov	r4,r18
    48cc:	00065300 	call	6530 <_fflush_r>
    48d0:	10000d1e 	bne	r2,zero,4908 <__sbprintf+0xb4>
    48d4:	d881030b 	ldhu	r2,1036(sp)
    48d8:	1080100c 	andi	r2,r2,64
    48dc:	10000326 	beq	r2,zero,48ec <__sbprintf+0x98>
    48e0:	8080030b 	ldhu	r2,12(r16)
    48e4:	10801014 	ori	r2,r2,64
    48e8:	8080030d 	sth	r2,12(r16)
    48ec:	8805883a 	mov	r2,r17
    48f0:	dfc11d17 	ldw	ra,1140(sp)
    48f4:	dc811c17 	ldw	r18,1136(sp)
    48f8:	dc411b17 	ldw	r17,1132(sp)
    48fc:	dc011a17 	ldw	r16,1128(sp)
    4900:	dec11e04 	addi	sp,sp,1144
    4904:	f800283a 	ret
    4908:	047fffc4 	movi	r17,-1
    490c:	003ff106 	br	48d4 <__alt_mem_onchip_memory2_0+0xf8003844>

00004910 <__swsetup_r>:
    4910:	00800074 	movhi	r2,1
    4914:	defffd04 	addi	sp,sp,-12
    4918:	10900d04 	addi	r2,r2,16436
    491c:	dc400115 	stw	r17,4(sp)
    4920:	2023883a 	mov	r17,r4
    4924:	11000017 	ldw	r4,0(r2)
    4928:	dc000015 	stw	r16,0(sp)
    492c:	dfc00215 	stw	ra,8(sp)
    4930:	2821883a 	mov	r16,r5
    4934:	20000226 	beq	r4,zero,4940 <__swsetup_r+0x30>
    4938:	20800e17 	ldw	r2,56(r4)
    493c:	10003126 	beq	r2,zero,4a04 <__swsetup_r+0xf4>
    4940:	8080030b 	ldhu	r2,12(r16)
    4944:	10c0020c 	andi	r3,r2,8
    4948:	1009883a 	mov	r4,r2
    494c:	18000f26 	beq	r3,zero,498c <__swsetup_r+0x7c>
    4950:	80c00417 	ldw	r3,16(r16)
    4954:	18001526 	beq	r3,zero,49ac <__swsetup_r+0x9c>
    4958:	1100004c 	andi	r4,r2,1
    495c:	20001c1e 	bne	r4,zero,49d0 <__swsetup_r+0xc0>
    4960:	1080008c 	andi	r2,r2,2
    4964:	1000291e 	bne	r2,zero,4a0c <__swsetup_r+0xfc>
    4968:	80800517 	ldw	r2,20(r16)
    496c:	80800215 	stw	r2,8(r16)
    4970:	18001c26 	beq	r3,zero,49e4 <__swsetup_r+0xd4>
    4974:	0005883a 	mov	r2,zero
    4978:	dfc00217 	ldw	ra,8(sp)
    497c:	dc400117 	ldw	r17,4(sp)
    4980:	dc000017 	ldw	r16,0(sp)
    4984:	dec00304 	addi	sp,sp,12
    4988:	f800283a 	ret
    498c:	2080040c 	andi	r2,r4,16
    4990:	10002e26 	beq	r2,zero,4a4c <__swsetup_r+0x13c>
    4994:	2080010c 	andi	r2,r4,4
    4998:	10001e1e 	bne	r2,zero,4a14 <__swsetup_r+0x104>
    499c:	80c00417 	ldw	r3,16(r16)
    49a0:	20800214 	ori	r2,r4,8
    49a4:	8080030d 	sth	r2,12(r16)
    49a8:	183feb1e 	bne	r3,zero,4958 <__alt_mem_onchip_memory2_0+0xf80038c8>
    49ac:	1100a00c 	andi	r4,r2,640
    49b0:	01408004 	movi	r5,512
    49b4:	217fe826 	beq	r4,r5,4958 <__alt_mem_onchip_memory2_0+0xf80038c8>
    49b8:	800b883a 	mov	r5,r16
    49bc:	8809883a 	mov	r4,r17
    49c0:	00074cc0 	call	74cc <__smakebuf_r>
    49c4:	8080030b 	ldhu	r2,12(r16)
    49c8:	80c00417 	ldw	r3,16(r16)
    49cc:	003fe206 	br	4958 <__alt_mem_onchip_memory2_0+0xf80038c8>
    49d0:	80800517 	ldw	r2,20(r16)
    49d4:	80000215 	stw	zero,8(r16)
    49d8:	0085c83a 	sub	r2,zero,r2
    49dc:	80800615 	stw	r2,24(r16)
    49e0:	183fe41e 	bne	r3,zero,4974 <__alt_mem_onchip_memory2_0+0xf80038e4>
    49e4:	80c0030b 	ldhu	r3,12(r16)
    49e8:	0005883a 	mov	r2,zero
    49ec:	1900200c 	andi	r4,r3,128
    49f0:	203fe126 	beq	r4,zero,4978 <__alt_mem_onchip_memory2_0+0xf80038e8>
    49f4:	18c01014 	ori	r3,r3,64
    49f8:	80c0030d 	sth	r3,12(r16)
    49fc:	00bfffc4 	movi	r2,-1
    4a00:	003fdd06 	br	4978 <__alt_mem_onchip_memory2_0+0xf80038e8>
    4a04:	000691c0 	call	691c <__sinit>
    4a08:	003fcd06 	br	4940 <__alt_mem_onchip_memory2_0+0xf80038b0>
    4a0c:	0005883a 	mov	r2,zero
    4a10:	003fd606 	br	496c <__alt_mem_onchip_memory2_0+0xf80038dc>
    4a14:	81400c17 	ldw	r5,48(r16)
    4a18:	28000626 	beq	r5,zero,4a34 <__swsetup_r+0x124>
    4a1c:	80801004 	addi	r2,r16,64
    4a20:	28800326 	beq	r5,r2,4a30 <__swsetup_r+0x120>
    4a24:	8809883a 	mov	r4,r17
    4a28:	0006a900 	call	6a90 <_free_r>
    4a2c:	8100030b 	ldhu	r4,12(r16)
    4a30:	80000c15 	stw	zero,48(r16)
    4a34:	80c00417 	ldw	r3,16(r16)
    4a38:	00bff6c4 	movi	r2,-37
    4a3c:	1108703a 	and	r4,r2,r4
    4a40:	80000115 	stw	zero,4(r16)
    4a44:	80c00015 	stw	r3,0(r16)
    4a48:	003fd506 	br	49a0 <__alt_mem_onchip_memory2_0+0xf8003910>
    4a4c:	00800244 	movi	r2,9
    4a50:	88800015 	stw	r2,0(r17)
    4a54:	20801014 	ori	r2,r4,64
    4a58:	8080030d 	sth	r2,12(r16)
    4a5c:	00bfffc4 	movi	r2,-1
    4a60:	003fc506 	br	4978 <__alt_mem_onchip_memory2_0+0xf80038e8>

00004a64 <quorem>:
    4a64:	defff204 	addi	sp,sp,-56
    4a68:	ddc00b15 	stw	r23,44(sp)
    4a6c:	20800417 	ldw	r2,16(r4)
    4a70:	2dc00417 	ldw	r23,16(r5)
    4a74:	dfc00d15 	stw	ra,52(sp)
    4a78:	df000c15 	stw	fp,48(sp)
    4a7c:	dd800a15 	stw	r22,40(sp)
    4a80:	dd400915 	stw	r21,36(sp)
    4a84:	dd000815 	stw	r20,32(sp)
    4a88:	dcc00715 	stw	r19,28(sp)
    4a8c:	dc800615 	stw	r18,24(sp)
    4a90:	dc400515 	stw	r17,20(sp)
    4a94:	dc000415 	stw	r16,16(sp)
    4a98:	15c07a16 	blt	r2,r23,4c84 <quorem+0x220>
    4a9c:	bdffffc4 	addi	r23,r23,-1
    4aa0:	bde9883a 	add	r20,r23,r23
    4aa4:	28c00504 	addi	r3,r5,20
    4aa8:	a529883a 	add	r20,r20,r20
    4aac:	1d39883a 	add	fp,r3,r20
    4ab0:	24c00504 	addi	r19,r4,20
    4ab4:	d9400215 	stw	r5,8(sp)
    4ab8:	9d29883a 	add	r20,r19,r20
    4abc:	e1400017 	ldw	r5,0(fp)
    4ac0:	d9000015 	stw	r4,0(sp)
    4ac4:	a1000017 	ldw	r4,0(r20)
    4ac8:	29400044 	addi	r5,r5,1
    4acc:	d8c00115 	stw	r3,4(sp)
    4ad0:	dd000315 	stw	r20,12(sp)
    4ad4:	000c93c0 	call	c93c <__udivsi3>
    4ad8:	1025883a 	mov	r18,r2
    4adc:	10003026 	beq	r2,zero,4ba0 <quorem+0x13c>
    4ae0:	dc400117 	ldw	r17,4(sp)
    4ae4:	9829883a 	mov	r20,r19
    4ae8:	002d883a 	mov	r22,zero
    4aec:	0021883a 	mov	r16,zero
    4af0:	8d400017 	ldw	r21,0(r17)
    4af4:	900b883a 	mov	r5,r18
    4af8:	8c400104 	addi	r17,r17,4
    4afc:	a93fffcc 	andi	r4,r21,65535
    4b00:	000c9f80 	call	c9f8 <__mulsi3>
    4b04:	a808d43a 	srli	r4,r21,16
    4b08:	900b883a 	mov	r5,r18
    4b0c:	15ad883a 	add	r22,r2,r22
    4b10:	000c9f80 	call	c9f8 <__mulsi3>
    4b14:	a1000017 	ldw	r4,0(r20)
    4b18:	b00cd43a 	srli	r6,r22,16
    4b1c:	b0ffffcc 	andi	r3,r22,65535
    4b20:	217fffcc 	andi	r5,r4,65535
    4b24:	2c21883a 	add	r16,r5,r16
    4b28:	80c7c83a 	sub	r3,r16,r3
    4b2c:	2008d43a 	srli	r4,r4,16
    4b30:	1185883a 	add	r2,r2,r6
    4b34:	1821d43a 	srai	r16,r3,16
    4b38:	117fffcc 	andi	r5,r2,65535
    4b3c:	2149c83a 	sub	r4,r4,r5
    4b40:	2421883a 	add	r16,r4,r16
    4b44:	8008943a 	slli	r4,r16,16
    4b48:	18ffffcc 	andi	r3,r3,65535
    4b4c:	102cd43a 	srli	r22,r2,16
    4b50:	20c8b03a 	or	r4,r4,r3
    4b54:	a1000015 	stw	r4,0(r20)
    4b58:	8021d43a 	srai	r16,r16,16
    4b5c:	a5000104 	addi	r20,r20,4
    4b60:	e47fe32e 	bgeu	fp,r17,4af0 <__alt_mem_onchip_memory2_0+0xf8003a60>
    4b64:	d8c00317 	ldw	r3,12(sp)
    4b68:	18800017 	ldw	r2,0(r3)
    4b6c:	10000c1e 	bne	r2,zero,4ba0 <quorem+0x13c>
    4b70:	18bfff04 	addi	r2,r3,-4
    4b74:	9880082e 	bgeu	r19,r2,4b98 <quorem+0x134>
    4b78:	18ffff17 	ldw	r3,-4(r3)
    4b7c:	18000326 	beq	r3,zero,4b8c <quorem+0x128>
    4b80:	00000506 	br	4b98 <quorem+0x134>
    4b84:	10c00017 	ldw	r3,0(r2)
    4b88:	1800031e 	bne	r3,zero,4b98 <quorem+0x134>
    4b8c:	10bfff04 	addi	r2,r2,-4
    4b90:	bdffffc4 	addi	r23,r23,-1
    4b94:	98bffb36 	bltu	r19,r2,4b84 <__alt_mem_onchip_memory2_0+0xf8003af4>
    4b98:	d8c00017 	ldw	r3,0(sp)
    4b9c:	1dc00415 	stw	r23,16(r3)
    4ba0:	d9400217 	ldw	r5,8(sp)
    4ba4:	d9000017 	ldw	r4,0(sp)
    4ba8:	0008cc80 	call	8cc8 <__mcmp>
    4bac:	10002816 	blt	r2,zero,4c50 <quorem+0x1ec>
    4bb0:	dc400117 	ldw	r17,4(sp)
    4bb4:	94800044 	addi	r18,r18,1
    4bb8:	980d883a 	mov	r6,r19
    4bbc:	0007883a 	mov	r3,zero
    4bc0:	31000017 	ldw	r4,0(r6)
    4bc4:	89400017 	ldw	r5,0(r17)
    4bc8:	31800104 	addi	r6,r6,4
    4bcc:	20bfffcc 	andi	r2,r4,65535
    4bd0:	10c7883a 	add	r3,r2,r3
    4bd4:	28bfffcc 	andi	r2,r5,65535
    4bd8:	1885c83a 	sub	r2,r3,r2
    4bdc:	280ad43a 	srli	r5,r5,16
    4be0:	2008d43a 	srli	r4,r4,16
    4be4:	1007d43a 	srai	r3,r2,16
    4be8:	10bfffcc 	andi	r2,r2,65535
    4bec:	2149c83a 	sub	r4,r4,r5
    4bf0:	20c9883a 	add	r4,r4,r3
    4bf4:	200a943a 	slli	r5,r4,16
    4bf8:	8c400104 	addi	r17,r17,4
    4bfc:	2007d43a 	srai	r3,r4,16
    4c00:	2884b03a 	or	r2,r5,r2
    4c04:	30bfff15 	stw	r2,-4(r6)
    4c08:	e47fed2e 	bgeu	fp,r17,4bc0 <__alt_mem_onchip_memory2_0+0xf8003b30>
    4c0c:	bdc5883a 	add	r2,r23,r23
    4c10:	1085883a 	add	r2,r2,r2
    4c14:	9887883a 	add	r3,r19,r2
    4c18:	18800017 	ldw	r2,0(r3)
    4c1c:	10000c1e 	bne	r2,zero,4c50 <quorem+0x1ec>
    4c20:	18bfff04 	addi	r2,r3,-4
    4c24:	9880082e 	bgeu	r19,r2,4c48 <quorem+0x1e4>
    4c28:	18ffff17 	ldw	r3,-4(r3)
    4c2c:	18000326 	beq	r3,zero,4c3c <quorem+0x1d8>
    4c30:	00000506 	br	4c48 <quorem+0x1e4>
    4c34:	10c00017 	ldw	r3,0(r2)
    4c38:	1800031e 	bne	r3,zero,4c48 <quorem+0x1e4>
    4c3c:	10bfff04 	addi	r2,r2,-4
    4c40:	bdffffc4 	addi	r23,r23,-1
    4c44:	98bffb36 	bltu	r19,r2,4c34 <__alt_mem_onchip_memory2_0+0xf8003ba4>
    4c48:	d8c00017 	ldw	r3,0(sp)
    4c4c:	1dc00415 	stw	r23,16(r3)
    4c50:	9005883a 	mov	r2,r18
    4c54:	dfc00d17 	ldw	ra,52(sp)
    4c58:	df000c17 	ldw	fp,48(sp)
    4c5c:	ddc00b17 	ldw	r23,44(sp)
    4c60:	dd800a17 	ldw	r22,40(sp)
    4c64:	dd400917 	ldw	r21,36(sp)
    4c68:	dd000817 	ldw	r20,32(sp)
    4c6c:	dcc00717 	ldw	r19,28(sp)
    4c70:	dc800617 	ldw	r18,24(sp)
    4c74:	dc400517 	ldw	r17,20(sp)
    4c78:	dc000417 	ldw	r16,16(sp)
    4c7c:	dec00e04 	addi	sp,sp,56
    4c80:	f800283a 	ret
    4c84:	0005883a 	mov	r2,zero
    4c88:	003ff206 	br	4c54 <__alt_mem_onchip_memory2_0+0xf8003bc4>

00004c8c <_dtoa_r>:
    4c8c:	20801017 	ldw	r2,64(r4)
    4c90:	deffde04 	addi	sp,sp,-136
    4c94:	df002015 	stw	fp,128(sp)
    4c98:	dcc01b15 	stw	r19,108(sp)
    4c9c:	dc801a15 	stw	r18,104(sp)
    4ca0:	dc401915 	stw	r17,100(sp)
    4ca4:	dc001815 	stw	r16,96(sp)
    4ca8:	dfc02115 	stw	ra,132(sp)
    4cac:	ddc01f15 	stw	r23,124(sp)
    4cb0:	dd801e15 	stw	r22,120(sp)
    4cb4:	dd401d15 	stw	r21,116(sp)
    4cb8:	dd001c15 	stw	r20,112(sp)
    4cbc:	d9c00315 	stw	r7,12(sp)
    4cc0:	2039883a 	mov	fp,r4
    4cc4:	3023883a 	mov	r17,r6
    4cc8:	2825883a 	mov	r18,r5
    4ccc:	dc002417 	ldw	r16,144(sp)
    4cd0:	3027883a 	mov	r19,r6
    4cd4:	10000826 	beq	r2,zero,4cf8 <_dtoa_r+0x6c>
    4cd8:	21801117 	ldw	r6,68(r4)
    4cdc:	00c00044 	movi	r3,1
    4ce0:	100b883a 	mov	r5,r2
    4ce4:	1986983a 	sll	r3,r3,r6
    4ce8:	11800115 	stw	r6,4(r2)
    4cec:	10c00215 	stw	r3,8(r2)
    4cf0:	00083ec0 	call	83ec <_Bfree>
    4cf4:	e0001015 	stw	zero,64(fp)
    4cf8:	88002e16 	blt	r17,zero,4db4 <_dtoa_r+0x128>
    4cfc:	80000015 	stw	zero,0(r16)
    4d00:	889ffc2c 	andhi	r2,r17,32752
    4d04:	00dffc34 	movhi	r3,32752
    4d08:	10c01c26 	beq	r2,r3,4d7c <_dtoa_r+0xf0>
    4d0c:	000d883a 	mov	r6,zero
    4d10:	000f883a 	mov	r7,zero
    4d14:	9009883a 	mov	r4,r18
    4d18:	980b883a 	mov	r5,r19
    4d1c:	000dc9c0 	call	dc9c <__eqdf2>
    4d20:	10002b1e 	bne	r2,zero,4dd0 <_dtoa_r+0x144>
    4d24:	d9c02317 	ldw	r7,140(sp)
    4d28:	00800044 	movi	r2,1
    4d2c:	38800015 	stw	r2,0(r7)
    4d30:	d8802517 	ldw	r2,148(sp)
    4d34:	10019e26 	beq	r2,zero,53b0 <_dtoa_r+0x724>
    4d38:	d8c02517 	ldw	r3,148(sp)
    4d3c:	00800074 	movhi	r2,1
    4d40:	1088b244 	addi	r2,r2,8905
    4d44:	18800015 	stw	r2,0(r3)
    4d48:	10bfffc4 	addi	r2,r2,-1
    4d4c:	dfc02117 	ldw	ra,132(sp)
    4d50:	df002017 	ldw	fp,128(sp)
    4d54:	ddc01f17 	ldw	r23,124(sp)
    4d58:	dd801e17 	ldw	r22,120(sp)
    4d5c:	dd401d17 	ldw	r21,116(sp)
    4d60:	dd001c17 	ldw	r20,112(sp)
    4d64:	dcc01b17 	ldw	r19,108(sp)
    4d68:	dc801a17 	ldw	r18,104(sp)
    4d6c:	dc401917 	ldw	r17,100(sp)
    4d70:	dc001817 	ldw	r16,96(sp)
    4d74:	dec02204 	addi	sp,sp,136
    4d78:	f800283a 	ret
    4d7c:	d8c02317 	ldw	r3,140(sp)
    4d80:	0089c3c4 	movi	r2,9999
    4d84:	18800015 	stw	r2,0(r3)
    4d88:	90017726 	beq	r18,zero,5368 <_dtoa_r+0x6dc>
    4d8c:	00800074 	movhi	r2,1
    4d90:	1088be04 	addi	r2,r2,8952
    4d94:	d9002517 	ldw	r4,148(sp)
    4d98:	203fec26 	beq	r4,zero,4d4c <__alt_mem_onchip_memory2_0+0xf8003cbc>
    4d9c:	10c000c7 	ldb	r3,3(r2)
    4da0:	1801781e 	bne	r3,zero,5384 <_dtoa_r+0x6f8>
    4da4:	10c000c4 	addi	r3,r2,3
    4da8:	d9802517 	ldw	r6,148(sp)
    4dac:	30c00015 	stw	r3,0(r6)
    4db0:	003fe606 	br	4d4c <__alt_mem_onchip_memory2_0+0xf8003cbc>
    4db4:	04e00034 	movhi	r19,32768
    4db8:	9cffffc4 	addi	r19,r19,-1
    4dbc:	00800044 	movi	r2,1
    4dc0:	8ce6703a 	and	r19,r17,r19
    4dc4:	80800015 	stw	r2,0(r16)
    4dc8:	9823883a 	mov	r17,r19
    4dcc:	003fcc06 	br	4d00 <__alt_mem_onchip_memory2_0+0xf8003c70>
    4dd0:	d8800204 	addi	r2,sp,8
    4dd4:	d8800015 	stw	r2,0(sp)
    4dd8:	d9c00104 	addi	r7,sp,4
    4ddc:	900b883a 	mov	r5,r18
    4de0:	980d883a 	mov	r6,r19
    4de4:	e009883a 	mov	r4,fp
    4de8:	8820d53a 	srli	r16,r17,20
    4dec:	00090940 	call	9094 <__d2b>
    4df0:	d8800915 	stw	r2,36(sp)
    4df4:	8001651e 	bne	r16,zero,538c <_dtoa_r+0x700>
    4df8:	dd800217 	ldw	r22,8(sp)
    4dfc:	dc000117 	ldw	r16,4(sp)
    4e00:	00800804 	movi	r2,32
    4e04:	b421883a 	add	r16,r22,r16
    4e08:	80c10c84 	addi	r3,r16,1074
    4e0c:	10c2d10e 	bge	r2,r3,5954 <_dtoa_r+0xcc8>
    4e10:	00801004 	movi	r2,64
    4e14:	81010484 	addi	r4,r16,1042
    4e18:	10c7c83a 	sub	r3,r2,r3
    4e1c:	9108d83a 	srl	r4,r18,r4
    4e20:	88e2983a 	sll	r17,r17,r3
    4e24:	2448b03a 	or	r4,r4,r17
    4e28:	000f1b80 	call	f1b8 <__floatunsidf>
    4e2c:	017f8434 	movhi	r5,65040
    4e30:	01800044 	movi	r6,1
    4e34:	1009883a 	mov	r4,r2
    4e38:	194b883a 	add	r5,r3,r5
    4e3c:	843fffc4 	addi	r16,r16,-1
    4e40:	d9801115 	stw	r6,68(sp)
    4e44:	000d883a 	mov	r6,zero
    4e48:	01cffe34 	movhi	r7,16376
    4e4c:	000e7600 	call	e760 <__subdf3>
    4e50:	0198dbf4 	movhi	r6,25455
    4e54:	01cff4f4 	movhi	r7,16339
    4e58:	3190d844 	addi	r6,r6,17249
    4e5c:	39e1e9c4 	addi	r7,r7,-30809
    4e60:	1009883a 	mov	r4,r2
    4e64:	180b883a 	mov	r5,r3
    4e68:	000def40 	call	def4 <__muldf3>
    4e6c:	01a2d874 	movhi	r6,35681
    4e70:	01cff1f4 	movhi	r7,16327
    4e74:	31b22cc4 	addi	r6,r6,-14157
    4e78:	39e28a04 	addi	r7,r7,-30168
    4e7c:	180b883a 	mov	r5,r3
    4e80:	1009883a 	mov	r4,r2
    4e84:	000ca200 	call	ca20 <__adddf3>
    4e88:	8009883a 	mov	r4,r16
    4e8c:	1029883a 	mov	r20,r2
    4e90:	1823883a 	mov	r17,r3
    4e94:	000f0dc0 	call	f0dc <__floatsidf>
    4e98:	019427f4 	movhi	r6,20639
    4e9c:	01cff4f4 	movhi	r7,16339
    4ea0:	319e7ec4 	addi	r6,r6,31227
    4ea4:	39d104c4 	addi	r7,r7,17427
    4ea8:	1009883a 	mov	r4,r2
    4eac:	180b883a 	mov	r5,r3
    4eb0:	000def40 	call	def4 <__muldf3>
    4eb4:	100d883a 	mov	r6,r2
    4eb8:	180f883a 	mov	r7,r3
    4ebc:	a009883a 	mov	r4,r20
    4ec0:	880b883a 	mov	r5,r17
    4ec4:	000ca200 	call	ca20 <__adddf3>
    4ec8:	1009883a 	mov	r4,r2
    4ecc:	180b883a 	mov	r5,r3
    4ed0:	1029883a 	mov	r20,r2
    4ed4:	1823883a 	mov	r17,r3
    4ed8:	000f05c0 	call	f05c <__fixdfsi>
    4edc:	000d883a 	mov	r6,zero
    4ee0:	000f883a 	mov	r7,zero
    4ee4:	a009883a 	mov	r4,r20
    4ee8:	880b883a 	mov	r5,r17
    4eec:	d8800515 	stw	r2,20(sp)
    4ef0:	000de000 	call	de00 <__ledf2>
    4ef4:	10028716 	blt	r2,zero,5914 <_dtoa_r+0xc88>
    4ef8:	d8c00517 	ldw	r3,20(sp)
    4efc:	00800584 	movi	r2,22
    4f00:	10c27536 	bltu	r2,r3,58d8 <_dtoa_r+0xc4c>
    4f04:	180490fa 	slli	r2,r3,3
    4f08:	00c00074 	movhi	r3,1
    4f0c:	18c8da04 	addi	r3,r3,9064
    4f10:	1885883a 	add	r2,r3,r2
    4f14:	11000017 	ldw	r4,0(r2)
    4f18:	11400117 	ldw	r5,4(r2)
    4f1c:	900d883a 	mov	r6,r18
    4f20:	980f883a 	mov	r7,r19
    4f24:	000dd240 	call	dd24 <__gedf2>
    4f28:	00828d0e 	bge	zero,r2,5960 <_dtoa_r+0xcd4>
    4f2c:	d9000517 	ldw	r4,20(sp)
    4f30:	d8000e15 	stw	zero,56(sp)
    4f34:	213fffc4 	addi	r4,r4,-1
    4f38:	d9000515 	stw	r4,20(sp)
    4f3c:	b42dc83a 	sub	r22,r22,r16
    4f40:	b5bfffc4 	addi	r22,r22,-1
    4f44:	b0026f16 	blt	r22,zero,5904 <_dtoa_r+0xc78>
    4f48:	d8000815 	stw	zero,32(sp)
    4f4c:	d9c00517 	ldw	r7,20(sp)
    4f50:	38026416 	blt	r7,zero,58e4 <_dtoa_r+0xc58>
    4f54:	b1ed883a 	add	r22,r22,r7
    4f58:	d9c00d15 	stw	r7,52(sp)
    4f5c:	d8000a15 	stw	zero,40(sp)
    4f60:	d9800317 	ldw	r6,12(sp)
    4f64:	00800244 	movi	r2,9
    4f68:	11811436 	bltu	r2,r6,53bc <_dtoa_r+0x730>
    4f6c:	00800144 	movi	r2,5
    4f70:	1184e10e 	bge	r2,r6,62f8 <_dtoa_r+0x166c>
    4f74:	31bfff04 	addi	r6,r6,-4
    4f78:	d9800315 	stw	r6,12(sp)
    4f7c:	0023883a 	mov	r17,zero
    4f80:	d9800317 	ldw	r6,12(sp)
    4f84:	008000c4 	movi	r2,3
    4f88:	30836726 	beq	r6,r2,5d28 <_dtoa_r+0x109c>
    4f8c:	1183410e 	bge	r2,r6,5c94 <_dtoa_r+0x1008>
    4f90:	d9c00317 	ldw	r7,12(sp)
    4f94:	00800104 	movi	r2,4
    4f98:	38827c26 	beq	r7,r2,598c <_dtoa_r+0xd00>
    4f9c:	00800144 	movi	r2,5
    4fa0:	3884c41e 	bne	r7,r2,62b4 <_dtoa_r+0x1628>
    4fa4:	00800044 	movi	r2,1
    4fa8:	d8800b15 	stw	r2,44(sp)
    4fac:	d8c00517 	ldw	r3,20(sp)
    4fb0:	d9002217 	ldw	r4,136(sp)
    4fb4:	1907883a 	add	r3,r3,r4
    4fb8:	19800044 	addi	r6,r3,1
    4fbc:	d8c00c15 	stw	r3,48(sp)
    4fc0:	d9800615 	stw	r6,24(sp)
    4fc4:	0183a40e 	bge	zero,r6,5e58 <_dtoa_r+0x11cc>
    4fc8:	d9800617 	ldw	r6,24(sp)
    4fcc:	3021883a 	mov	r16,r6
    4fd0:	e0001115 	stw	zero,68(fp)
    4fd4:	008005c4 	movi	r2,23
    4fd8:	1184c92e 	bgeu	r2,r6,6300 <_dtoa_r+0x1674>
    4fdc:	00c00044 	movi	r3,1
    4fe0:	00800104 	movi	r2,4
    4fe4:	1085883a 	add	r2,r2,r2
    4fe8:	11000504 	addi	r4,r2,20
    4fec:	180b883a 	mov	r5,r3
    4ff0:	18c00044 	addi	r3,r3,1
    4ff4:	313ffb2e 	bgeu	r6,r4,4fe4 <__alt_mem_onchip_memory2_0+0xf8003f54>
    4ff8:	e1401115 	stw	r5,68(fp)
    4ffc:	e009883a 	mov	r4,fp
    5000:	00083440 	call	8344 <_Balloc>
    5004:	d8800715 	stw	r2,28(sp)
    5008:	e0801015 	stw	r2,64(fp)
    500c:	00800384 	movi	r2,14
    5010:	1400f736 	bltu	r2,r16,53f0 <_dtoa_r+0x764>
    5014:	8800f626 	beq	r17,zero,53f0 <_dtoa_r+0x764>
    5018:	d9c00517 	ldw	r7,20(sp)
    501c:	01c39a0e 	bge	zero,r7,5e88 <_dtoa_r+0x11fc>
    5020:	388003cc 	andi	r2,r7,15
    5024:	100490fa 	slli	r2,r2,3
    5028:	382bd13a 	srai	r21,r7,4
    502c:	00c00074 	movhi	r3,1
    5030:	18c8da04 	addi	r3,r3,9064
    5034:	1885883a 	add	r2,r3,r2
    5038:	a8c0040c 	andi	r3,r21,16
    503c:	12400017 	ldw	r9,0(r2)
    5040:	12000117 	ldw	r8,4(r2)
    5044:	18037926 	beq	r3,zero,5e2c <_dtoa_r+0x11a0>
    5048:	00800074 	movhi	r2,1
    504c:	1088d004 	addi	r2,r2,9024
    5050:	11800817 	ldw	r6,32(r2)
    5054:	11c00917 	ldw	r7,36(r2)
    5058:	9009883a 	mov	r4,r18
    505c:	980b883a 	mov	r5,r19
    5060:	da001715 	stw	r8,92(sp)
    5064:	da401615 	stw	r9,88(sp)
    5068:	000d2cc0 	call	d2cc <__divdf3>
    506c:	da001717 	ldw	r8,92(sp)
    5070:	da401617 	ldw	r9,88(sp)
    5074:	ad4003cc 	andi	r21,r21,15
    5078:	040000c4 	movi	r16,3
    507c:	1023883a 	mov	r17,r2
    5080:	1829883a 	mov	r20,r3
    5084:	a8001126 	beq	r21,zero,50cc <_dtoa_r+0x440>
    5088:	05c00074 	movhi	r23,1
    508c:	bdc8d004 	addi	r23,r23,9024
    5090:	4805883a 	mov	r2,r9
    5094:	4007883a 	mov	r3,r8
    5098:	a980004c 	andi	r6,r21,1
    509c:	1009883a 	mov	r4,r2
    50a0:	a82bd07a 	srai	r21,r21,1
    50a4:	180b883a 	mov	r5,r3
    50a8:	30000426 	beq	r6,zero,50bc <_dtoa_r+0x430>
    50ac:	b9800017 	ldw	r6,0(r23)
    50b0:	b9c00117 	ldw	r7,4(r23)
    50b4:	84000044 	addi	r16,r16,1
    50b8:	000def40 	call	def4 <__muldf3>
    50bc:	bdc00204 	addi	r23,r23,8
    50c0:	a83ff51e 	bne	r21,zero,5098 <__alt_mem_onchip_memory2_0+0xf8004008>
    50c4:	1013883a 	mov	r9,r2
    50c8:	1811883a 	mov	r8,r3
    50cc:	480d883a 	mov	r6,r9
    50d0:	400f883a 	mov	r7,r8
    50d4:	8809883a 	mov	r4,r17
    50d8:	a00b883a 	mov	r5,r20
    50dc:	000d2cc0 	call	d2cc <__divdf3>
    50e0:	d8800f15 	stw	r2,60(sp)
    50e4:	d8c01015 	stw	r3,64(sp)
    50e8:	d8c00e17 	ldw	r3,56(sp)
    50ec:	18000626 	beq	r3,zero,5108 <_dtoa_r+0x47c>
    50f0:	d9000f17 	ldw	r4,60(sp)
    50f4:	d9401017 	ldw	r5,64(sp)
    50f8:	000d883a 	mov	r6,zero
    50fc:	01cffc34 	movhi	r7,16368
    5100:	000de000 	call	de00 <__ledf2>
    5104:	10040b16 	blt	r2,zero,6134 <_dtoa_r+0x14a8>
    5108:	8009883a 	mov	r4,r16
    510c:	000f0dc0 	call	f0dc <__floatsidf>
    5110:	d9800f17 	ldw	r6,60(sp)
    5114:	d9c01017 	ldw	r7,64(sp)
    5118:	1009883a 	mov	r4,r2
    511c:	180b883a 	mov	r5,r3
    5120:	000def40 	call	def4 <__muldf3>
    5124:	000d883a 	mov	r6,zero
    5128:	01d00734 	movhi	r7,16412
    512c:	1009883a 	mov	r4,r2
    5130:	180b883a 	mov	r5,r3
    5134:	000ca200 	call	ca20 <__adddf3>
    5138:	1021883a 	mov	r16,r2
    513c:	d8800617 	ldw	r2,24(sp)
    5140:	047f3034 	movhi	r17,64704
    5144:	1c63883a 	add	r17,r3,r17
    5148:	10031826 	beq	r2,zero,5dac <_dtoa_r+0x1120>
    514c:	d8c00517 	ldw	r3,20(sp)
    5150:	db000617 	ldw	r12,24(sp)
    5154:	d8c01315 	stw	r3,76(sp)
    5158:	d9000b17 	ldw	r4,44(sp)
    515c:	20038f26 	beq	r4,zero,5f9c <_dtoa_r+0x1310>
    5160:	60bfffc4 	addi	r2,r12,-1
    5164:	100490fa 	slli	r2,r2,3
    5168:	00c00074 	movhi	r3,1
    516c:	18c8da04 	addi	r3,r3,9064
    5170:	1885883a 	add	r2,r3,r2
    5174:	11800017 	ldw	r6,0(r2)
    5178:	11c00117 	ldw	r7,4(r2)
    517c:	d8800717 	ldw	r2,28(sp)
    5180:	0009883a 	mov	r4,zero
    5184:	014ff834 	movhi	r5,16352
    5188:	db001615 	stw	r12,88(sp)
    518c:	15c00044 	addi	r23,r2,1
    5190:	000d2cc0 	call	d2cc <__divdf3>
    5194:	800d883a 	mov	r6,r16
    5198:	880f883a 	mov	r7,r17
    519c:	1009883a 	mov	r4,r2
    51a0:	180b883a 	mov	r5,r3
    51a4:	000e7600 	call	e760 <__subdf3>
    51a8:	d9401017 	ldw	r5,64(sp)
    51ac:	d9000f17 	ldw	r4,60(sp)
    51b0:	102b883a 	mov	r21,r2
    51b4:	d8c01215 	stw	r3,72(sp)
    51b8:	000f05c0 	call	f05c <__fixdfsi>
    51bc:	1009883a 	mov	r4,r2
    51c0:	1029883a 	mov	r20,r2
    51c4:	000f0dc0 	call	f0dc <__floatsidf>
    51c8:	d9000f17 	ldw	r4,60(sp)
    51cc:	d9401017 	ldw	r5,64(sp)
    51d0:	100d883a 	mov	r6,r2
    51d4:	180f883a 	mov	r7,r3
    51d8:	000e7600 	call	e760 <__subdf3>
    51dc:	1823883a 	mov	r17,r3
    51e0:	d8c00717 	ldw	r3,28(sp)
    51e4:	d9401217 	ldw	r5,72(sp)
    51e8:	a2000c04 	addi	r8,r20,48
    51ec:	1021883a 	mov	r16,r2
    51f0:	1a000005 	stb	r8,0(r3)
    51f4:	800d883a 	mov	r6,r16
    51f8:	880f883a 	mov	r7,r17
    51fc:	a809883a 	mov	r4,r21
    5200:	4029883a 	mov	r20,r8
    5204:	000dd240 	call	dd24 <__gedf2>
    5208:	00841d16 	blt	zero,r2,6280 <_dtoa_r+0x15f4>
    520c:	800d883a 	mov	r6,r16
    5210:	880f883a 	mov	r7,r17
    5214:	0009883a 	mov	r4,zero
    5218:	014ffc34 	movhi	r5,16368
    521c:	000e7600 	call	e760 <__subdf3>
    5220:	d9401217 	ldw	r5,72(sp)
    5224:	100d883a 	mov	r6,r2
    5228:	180f883a 	mov	r7,r3
    522c:	a809883a 	mov	r4,r21
    5230:	000dd240 	call	dd24 <__gedf2>
    5234:	db001617 	ldw	r12,88(sp)
    5238:	00840e16 	blt	zero,r2,6274 <_dtoa_r+0x15e8>
    523c:	00800044 	movi	r2,1
    5240:	13006b0e 	bge	r2,r12,53f0 <_dtoa_r+0x764>
    5244:	d9000717 	ldw	r4,28(sp)
    5248:	dd800f15 	stw	r22,60(sp)
    524c:	dcc01015 	stw	r19,64(sp)
    5250:	2319883a 	add	r12,r4,r12
    5254:	dcc01217 	ldw	r19,72(sp)
    5258:	602d883a 	mov	r22,r12
    525c:	dc801215 	stw	r18,72(sp)
    5260:	b825883a 	mov	r18,r23
    5264:	00000906 	br	528c <_dtoa_r+0x600>
    5268:	000e7600 	call	e760 <__subdf3>
    526c:	a80d883a 	mov	r6,r21
    5270:	980f883a 	mov	r7,r19
    5274:	1009883a 	mov	r4,r2
    5278:	180b883a 	mov	r5,r3
    527c:	000de000 	call	de00 <__ledf2>
    5280:	1003e816 	blt	r2,zero,6224 <_dtoa_r+0x1598>
    5284:	b825883a 	mov	r18,r23
    5288:	bd83e926 	beq	r23,r22,6230 <_dtoa_r+0x15a4>
    528c:	a809883a 	mov	r4,r21
    5290:	980b883a 	mov	r5,r19
    5294:	000d883a 	mov	r6,zero
    5298:	01d00934 	movhi	r7,16420
    529c:	000def40 	call	def4 <__muldf3>
    52a0:	000d883a 	mov	r6,zero
    52a4:	01d00934 	movhi	r7,16420
    52a8:	8009883a 	mov	r4,r16
    52ac:	880b883a 	mov	r5,r17
    52b0:	102b883a 	mov	r21,r2
    52b4:	1827883a 	mov	r19,r3
    52b8:	000def40 	call	def4 <__muldf3>
    52bc:	180b883a 	mov	r5,r3
    52c0:	1009883a 	mov	r4,r2
    52c4:	1821883a 	mov	r16,r3
    52c8:	1023883a 	mov	r17,r2
    52cc:	000f05c0 	call	f05c <__fixdfsi>
    52d0:	1009883a 	mov	r4,r2
    52d4:	1029883a 	mov	r20,r2
    52d8:	000f0dc0 	call	f0dc <__floatsidf>
    52dc:	8809883a 	mov	r4,r17
    52e0:	800b883a 	mov	r5,r16
    52e4:	100d883a 	mov	r6,r2
    52e8:	180f883a 	mov	r7,r3
    52ec:	000e7600 	call	e760 <__subdf3>
    52f0:	a5000c04 	addi	r20,r20,48
    52f4:	a80d883a 	mov	r6,r21
    52f8:	980f883a 	mov	r7,r19
    52fc:	1009883a 	mov	r4,r2
    5300:	180b883a 	mov	r5,r3
    5304:	95000005 	stb	r20,0(r18)
    5308:	1021883a 	mov	r16,r2
    530c:	1823883a 	mov	r17,r3
    5310:	000de000 	call	de00 <__ledf2>
    5314:	bdc00044 	addi	r23,r23,1
    5318:	800d883a 	mov	r6,r16
    531c:	880f883a 	mov	r7,r17
    5320:	0009883a 	mov	r4,zero
    5324:	014ffc34 	movhi	r5,16368
    5328:	103fcf0e 	bge	r2,zero,5268 <__alt_mem_onchip_memory2_0+0xf80041d8>
    532c:	d8c01317 	ldw	r3,76(sp)
    5330:	d8c00515 	stw	r3,20(sp)
    5334:	d9400917 	ldw	r5,36(sp)
    5338:	e009883a 	mov	r4,fp
    533c:	00083ec0 	call	83ec <_Bfree>
    5340:	d9000517 	ldw	r4,20(sp)
    5344:	d9802317 	ldw	r6,140(sp)
    5348:	d9c02517 	ldw	r7,148(sp)
    534c:	b8000005 	stb	zero,0(r23)
    5350:	20800044 	addi	r2,r4,1
    5354:	30800015 	stw	r2,0(r6)
    5358:	3802aa26 	beq	r7,zero,5e04 <_dtoa_r+0x1178>
    535c:	3dc00015 	stw	r23,0(r7)
    5360:	d8800717 	ldw	r2,28(sp)
    5364:	003e7906 	br	4d4c <__alt_mem_onchip_memory2_0+0xf8003cbc>
    5368:	00800434 	movhi	r2,16
    536c:	10bfffc4 	addi	r2,r2,-1
    5370:	88a2703a 	and	r17,r17,r2
    5374:	883e851e 	bne	r17,zero,4d8c <__alt_mem_onchip_memory2_0+0xf8003cfc>
    5378:	00800074 	movhi	r2,1
    537c:	1088bb04 	addi	r2,r2,8940
    5380:	003e8406 	br	4d94 <__alt_mem_onchip_memory2_0+0xf8003d04>
    5384:	10c00204 	addi	r3,r2,8
    5388:	003e8706 	br	4da8 <__alt_mem_onchip_memory2_0+0xf8003d18>
    538c:	01400434 	movhi	r5,16
    5390:	297fffc4 	addi	r5,r5,-1
    5394:	994a703a 	and	r5,r19,r5
    5398:	9009883a 	mov	r4,r18
    539c:	843f0044 	addi	r16,r16,-1023
    53a0:	294ffc34 	orhi	r5,r5,16368
    53a4:	dd800217 	ldw	r22,8(sp)
    53a8:	d8001115 	stw	zero,68(sp)
    53ac:	003ea506 	br	4e44 <__alt_mem_onchip_memory2_0+0xf8003db4>
    53b0:	00800074 	movhi	r2,1
    53b4:	1088b204 	addi	r2,r2,8904
    53b8:	003e6406 	br	4d4c <__alt_mem_onchip_memory2_0+0xf8003cbc>
    53bc:	e0001115 	stw	zero,68(fp)
    53c0:	000b883a 	mov	r5,zero
    53c4:	e009883a 	mov	r4,fp
    53c8:	00083440 	call	8344 <_Balloc>
    53cc:	01bfffc4 	movi	r6,-1
    53d0:	01c00044 	movi	r7,1
    53d4:	d8800715 	stw	r2,28(sp)
    53d8:	d9800c15 	stw	r6,48(sp)
    53dc:	e0801015 	stw	r2,64(fp)
    53e0:	d8000315 	stw	zero,12(sp)
    53e4:	d9c00b15 	stw	r7,44(sp)
    53e8:	d9800615 	stw	r6,24(sp)
    53ec:	d8002215 	stw	zero,136(sp)
    53f0:	d8800117 	ldw	r2,4(sp)
    53f4:	10008916 	blt	r2,zero,561c <_dtoa_r+0x990>
    53f8:	d9000517 	ldw	r4,20(sp)
    53fc:	00c00384 	movi	r3,14
    5400:	19008616 	blt	r3,r4,561c <_dtoa_r+0x990>
    5404:	200490fa 	slli	r2,r4,3
    5408:	00c00074 	movhi	r3,1
    540c:	d9802217 	ldw	r6,136(sp)
    5410:	18c8da04 	addi	r3,r3,9064
    5414:	1885883a 	add	r2,r3,r2
    5418:	14000017 	ldw	r16,0(r2)
    541c:	14400117 	ldw	r17,4(r2)
    5420:	30016316 	blt	r6,zero,59b0 <_dtoa_r+0xd24>
    5424:	800d883a 	mov	r6,r16
    5428:	880f883a 	mov	r7,r17
    542c:	9009883a 	mov	r4,r18
    5430:	980b883a 	mov	r5,r19
    5434:	000d2cc0 	call	d2cc <__divdf3>
    5438:	180b883a 	mov	r5,r3
    543c:	1009883a 	mov	r4,r2
    5440:	000f05c0 	call	f05c <__fixdfsi>
    5444:	1009883a 	mov	r4,r2
    5448:	102b883a 	mov	r21,r2
    544c:	000f0dc0 	call	f0dc <__floatsidf>
    5450:	800d883a 	mov	r6,r16
    5454:	880f883a 	mov	r7,r17
    5458:	1009883a 	mov	r4,r2
    545c:	180b883a 	mov	r5,r3
    5460:	000def40 	call	def4 <__muldf3>
    5464:	100d883a 	mov	r6,r2
    5468:	180f883a 	mov	r7,r3
    546c:	9009883a 	mov	r4,r18
    5470:	980b883a 	mov	r5,r19
    5474:	000e7600 	call	e760 <__subdf3>
    5478:	d9c00717 	ldw	r7,28(sp)
    547c:	1009883a 	mov	r4,r2
    5480:	a8800c04 	addi	r2,r21,48
    5484:	38800005 	stb	r2,0(r7)
    5488:	3dc00044 	addi	r23,r7,1
    548c:	d9c00617 	ldw	r7,24(sp)
    5490:	01800044 	movi	r6,1
    5494:	180b883a 	mov	r5,r3
    5498:	2005883a 	mov	r2,r4
    549c:	39803826 	beq	r7,r6,5580 <_dtoa_r+0x8f4>
    54a0:	000d883a 	mov	r6,zero
    54a4:	01d00934 	movhi	r7,16420
    54a8:	000def40 	call	def4 <__muldf3>
    54ac:	000d883a 	mov	r6,zero
    54b0:	000f883a 	mov	r7,zero
    54b4:	1009883a 	mov	r4,r2
    54b8:	180b883a 	mov	r5,r3
    54bc:	1025883a 	mov	r18,r2
    54c0:	1827883a 	mov	r19,r3
    54c4:	000dc9c0 	call	dc9c <__eqdf2>
    54c8:	103f9a26 	beq	r2,zero,5334 <__alt_mem_onchip_memory2_0+0xf80042a4>
    54cc:	d9c00617 	ldw	r7,24(sp)
    54d0:	d8c00717 	ldw	r3,28(sp)
    54d4:	b829883a 	mov	r20,r23
    54d8:	38bfffc4 	addi	r2,r7,-1
    54dc:	18ad883a 	add	r22,r3,r2
    54e0:	00000a06 	br	550c <_dtoa_r+0x880>
    54e4:	000def40 	call	def4 <__muldf3>
    54e8:	000d883a 	mov	r6,zero
    54ec:	000f883a 	mov	r7,zero
    54f0:	1009883a 	mov	r4,r2
    54f4:	180b883a 	mov	r5,r3
    54f8:	1025883a 	mov	r18,r2
    54fc:	1827883a 	mov	r19,r3
    5500:	b829883a 	mov	r20,r23
    5504:	000dc9c0 	call	dc9c <__eqdf2>
    5508:	103f8a26 	beq	r2,zero,5334 <__alt_mem_onchip_memory2_0+0xf80042a4>
    550c:	800d883a 	mov	r6,r16
    5510:	880f883a 	mov	r7,r17
    5514:	9009883a 	mov	r4,r18
    5518:	980b883a 	mov	r5,r19
    551c:	000d2cc0 	call	d2cc <__divdf3>
    5520:	180b883a 	mov	r5,r3
    5524:	1009883a 	mov	r4,r2
    5528:	000f05c0 	call	f05c <__fixdfsi>
    552c:	1009883a 	mov	r4,r2
    5530:	102b883a 	mov	r21,r2
    5534:	000f0dc0 	call	f0dc <__floatsidf>
    5538:	800d883a 	mov	r6,r16
    553c:	880f883a 	mov	r7,r17
    5540:	1009883a 	mov	r4,r2
    5544:	180b883a 	mov	r5,r3
    5548:	000def40 	call	def4 <__muldf3>
    554c:	100d883a 	mov	r6,r2
    5550:	180f883a 	mov	r7,r3
    5554:	9009883a 	mov	r4,r18
    5558:	980b883a 	mov	r5,r19
    555c:	000e7600 	call	e760 <__subdf3>
    5560:	aa000c04 	addi	r8,r21,48
    5564:	a2000005 	stb	r8,0(r20)
    5568:	000d883a 	mov	r6,zero
    556c:	01d00934 	movhi	r7,16420
    5570:	1009883a 	mov	r4,r2
    5574:	180b883a 	mov	r5,r3
    5578:	a5c00044 	addi	r23,r20,1
    557c:	b53fd91e 	bne	r22,r20,54e4 <__alt_mem_onchip_memory2_0+0xf8004454>
    5580:	100d883a 	mov	r6,r2
    5584:	180f883a 	mov	r7,r3
    5588:	1009883a 	mov	r4,r2
    558c:	180b883a 	mov	r5,r3
    5590:	000ca200 	call	ca20 <__adddf3>
    5594:	100d883a 	mov	r6,r2
    5598:	180f883a 	mov	r7,r3
    559c:	8009883a 	mov	r4,r16
    55a0:	880b883a 	mov	r5,r17
    55a4:	1027883a 	mov	r19,r2
    55a8:	1825883a 	mov	r18,r3
    55ac:	000de000 	call	de00 <__ledf2>
    55b0:	10000816 	blt	r2,zero,55d4 <_dtoa_r+0x948>
    55b4:	980d883a 	mov	r6,r19
    55b8:	900f883a 	mov	r7,r18
    55bc:	8009883a 	mov	r4,r16
    55c0:	880b883a 	mov	r5,r17
    55c4:	000dc9c0 	call	dc9c <__eqdf2>
    55c8:	103f5a1e 	bne	r2,zero,5334 <__alt_mem_onchip_memory2_0+0xf80042a4>
    55cc:	ad40004c 	andi	r21,r21,1
    55d0:	a83f5826 	beq	r21,zero,5334 <__alt_mem_onchip_memory2_0+0xf80042a4>
    55d4:	bd3fffc3 	ldbu	r20,-1(r23)
    55d8:	b8bfffc4 	addi	r2,r23,-1
    55dc:	1007883a 	mov	r3,r2
    55e0:	01400e44 	movi	r5,57
    55e4:	d9800717 	ldw	r6,28(sp)
    55e8:	00000506 	br	5600 <_dtoa_r+0x974>
    55ec:	18ffffc4 	addi	r3,r3,-1
    55f0:	11824726 	beq	r2,r6,5f10 <_dtoa_r+0x1284>
    55f4:	1d000003 	ldbu	r20,0(r3)
    55f8:	102f883a 	mov	r23,r2
    55fc:	10bfffc4 	addi	r2,r2,-1
    5600:	a1003fcc 	andi	r4,r20,255
    5604:	2100201c 	xori	r4,r4,128
    5608:	213fe004 	addi	r4,r4,-128
    560c:	217ff726 	beq	r4,r5,55ec <__alt_mem_onchip_memory2_0+0xf800455c>
    5610:	a2000044 	addi	r8,r20,1
    5614:	12000005 	stb	r8,0(r2)
    5618:	003f4606 	br	5334 <__alt_mem_onchip_memory2_0+0xf80042a4>
    561c:	d9000b17 	ldw	r4,44(sp)
    5620:	2000c826 	beq	r4,zero,5944 <_dtoa_r+0xcb8>
    5624:	d9800317 	ldw	r6,12(sp)
    5628:	00c00044 	movi	r3,1
    562c:	1980f90e 	bge	r3,r6,5a14 <_dtoa_r+0xd88>
    5630:	d8800617 	ldw	r2,24(sp)
    5634:	d8c00a17 	ldw	r3,40(sp)
    5638:	157fffc4 	addi	r21,r2,-1
    563c:	1d41f316 	blt	r3,r21,5e0c <_dtoa_r+0x1180>
    5640:	1d6bc83a 	sub	r21,r3,r21
    5644:	d9c00617 	ldw	r7,24(sp)
    5648:	3802aa16 	blt	r7,zero,60f4 <_dtoa_r+0x1468>
    564c:	dd000817 	ldw	r20,32(sp)
    5650:	d8800617 	ldw	r2,24(sp)
    5654:	d8c00817 	ldw	r3,32(sp)
    5658:	01400044 	movi	r5,1
    565c:	e009883a 	mov	r4,fp
    5660:	1887883a 	add	r3,r3,r2
    5664:	d8c00815 	stw	r3,32(sp)
    5668:	b0ad883a 	add	r22,r22,r2
    566c:	00087780 	call	8778 <__i2b>
    5670:	1023883a 	mov	r17,r2
    5674:	a0000826 	beq	r20,zero,5698 <_dtoa_r+0xa0c>
    5678:	0580070e 	bge	zero,r22,5698 <_dtoa_r+0xa0c>
    567c:	a005883a 	mov	r2,r20
    5680:	b500b916 	blt	r22,r20,5968 <_dtoa_r+0xcdc>
    5684:	d9000817 	ldw	r4,32(sp)
    5688:	a0a9c83a 	sub	r20,r20,r2
    568c:	b0adc83a 	sub	r22,r22,r2
    5690:	2089c83a 	sub	r4,r4,r2
    5694:	d9000815 	stw	r4,32(sp)
    5698:	d9800a17 	ldw	r6,40(sp)
    569c:	0181810e 	bge	zero,r6,5ca4 <_dtoa_r+0x1018>
    56a0:	d9c00b17 	ldw	r7,44(sp)
    56a4:	3800b326 	beq	r7,zero,5974 <_dtoa_r+0xce8>
    56a8:	a800b226 	beq	r21,zero,5974 <_dtoa_r+0xce8>
    56ac:	880b883a 	mov	r5,r17
    56b0:	a80d883a 	mov	r6,r21
    56b4:	e009883a 	mov	r4,fp
    56b8:	0008a400 	call	8a40 <__pow5mult>
    56bc:	d9800917 	ldw	r6,36(sp)
    56c0:	100b883a 	mov	r5,r2
    56c4:	e009883a 	mov	r4,fp
    56c8:	1023883a 	mov	r17,r2
    56cc:	00087b40 	call	87b4 <__multiply>
    56d0:	1021883a 	mov	r16,r2
    56d4:	d8800a17 	ldw	r2,40(sp)
    56d8:	d9400917 	ldw	r5,36(sp)
    56dc:	e009883a 	mov	r4,fp
    56e0:	1545c83a 	sub	r2,r2,r21
    56e4:	d8800a15 	stw	r2,40(sp)
    56e8:	00083ec0 	call	83ec <_Bfree>
    56ec:	d8c00a17 	ldw	r3,40(sp)
    56f0:	18009f1e 	bne	r3,zero,5970 <_dtoa_r+0xce4>
    56f4:	05c00044 	movi	r23,1
    56f8:	e009883a 	mov	r4,fp
    56fc:	b80b883a 	mov	r5,r23
    5700:	00087780 	call	8778 <__i2b>
    5704:	d9000d17 	ldw	r4,52(sp)
    5708:	102b883a 	mov	r21,r2
    570c:	2000ce26 	beq	r4,zero,5a48 <_dtoa_r+0xdbc>
    5710:	200d883a 	mov	r6,r4
    5714:	100b883a 	mov	r5,r2
    5718:	e009883a 	mov	r4,fp
    571c:	0008a400 	call	8a40 <__pow5mult>
    5720:	d9800317 	ldw	r6,12(sp)
    5724:	102b883a 	mov	r21,r2
    5728:	b981810e 	bge	r23,r6,5d30 <_dtoa_r+0x10a4>
    572c:	0027883a 	mov	r19,zero
    5730:	a8800417 	ldw	r2,16(r21)
    5734:	05c00804 	movi	r23,32
    5738:	10800104 	addi	r2,r2,4
    573c:	1085883a 	add	r2,r2,r2
    5740:	1085883a 	add	r2,r2,r2
    5744:	a885883a 	add	r2,r21,r2
    5748:	11000017 	ldw	r4,0(r2)
    574c:	00086600 	call	8660 <__hi0bits>
    5750:	b885c83a 	sub	r2,r23,r2
    5754:	1585883a 	add	r2,r2,r22
    5758:	108007cc 	andi	r2,r2,31
    575c:	1000b326 	beq	r2,zero,5a2c <_dtoa_r+0xda0>
    5760:	00c00804 	movi	r3,32
    5764:	1887c83a 	sub	r3,r3,r2
    5768:	01000104 	movi	r4,4
    576c:	20c2cd0e 	bge	r4,r3,62a4 <_dtoa_r+0x1618>
    5770:	00c00704 	movi	r3,28
    5774:	1885c83a 	sub	r2,r3,r2
    5778:	d8c00817 	ldw	r3,32(sp)
    577c:	a0a9883a 	add	r20,r20,r2
    5780:	b0ad883a 	add	r22,r22,r2
    5784:	1887883a 	add	r3,r3,r2
    5788:	d8c00815 	stw	r3,32(sp)
    578c:	d9800817 	ldw	r6,32(sp)
    5790:	0180040e 	bge	zero,r6,57a4 <_dtoa_r+0xb18>
    5794:	800b883a 	mov	r5,r16
    5798:	e009883a 	mov	r4,fp
    579c:	0008b800 	call	8b80 <__lshift>
    57a0:	1021883a 	mov	r16,r2
    57a4:	0580050e 	bge	zero,r22,57bc <_dtoa_r+0xb30>
    57a8:	a80b883a 	mov	r5,r21
    57ac:	b00d883a 	mov	r6,r22
    57b0:	e009883a 	mov	r4,fp
    57b4:	0008b800 	call	8b80 <__lshift>
    57b8:	102b883a 	mov	r21,r2
    57bc:	d9c00e17 	ldw	r7,56(sp)
    57c0:	3801211e 	bne	r7,zero,5c48 <_dtoa_r+0xfbc>
    57c4:	d9800617 	ldw	r6,24(sp)
    57c8:	0181380e 	bge	zero,r6,5cac <_dtoa_r+0x1020>
    57cc:	d8c00b17 	ldw	r3,44(sp)
    57d0:	1800ab1e 	bne	r3,zero,5a80 <_dtoa_r+0xdf4>
    57d4:	dc800717 	ldw	r18,28(sp)
    57d8:	dcc00617 	ldw	r19,24(sp)
    57dc:	9029883a 	mov	r20,r18
    57e0:	00000206 	br	57ec <_dtoa_r+0xb60>
    57e4:	00084140 	call	8414 <__multadd>
    57e8:	1021883a 	mov	r16,r2
    57ec:	a80b883a 	mov	r5,r21
    57f0:	8009883a 	mov	r4,r16
    57f4:	0004a640 	call	4a64 <quorem>
    57f8:	10800c04 	addi	r2,r2,48
    57fc:	90800005 	stb	r2,0(r18)
    5800:	94800044 	addi	r18,r18,1
    5804:	9507c83a 	sub	r3,r18,r20
    5808:	000f883a 	mov	r7,zero
    580c:	01800284 	movi	r6,10
    5810:	800b883a 	mov	r5,r16
    5814:	e009883a 	mov	r4,fp
    5818:	1cfff216 	blt	r3,r19,57e4 <__alt_mem_onchip_memory2_0+0xf8004754>
    581c:	1011883a 	mov	r8,r2
    5820:	d8800617 	ldw	r2,24(sp)
    5824:	0082370e 	bge	zero,r2,6104 <_dtoa_r+0x1478>
    5828:	d9000717 	ldw	r4,28(sp)
    582c:	0025883a 	mov	r18,zero
    5830:	20af883a 	add	r23,r4,r2
    5834:	01800044 	movi	r6,1
    5838:	800b883a 	mov	r5,r16
    583c:	e009883a 	mov	r4,fp
    5840:	da001715 	stw	r8,92(sp)
    5844:	0008b800 	call	8b80 <__lshift>
    5848:	a80b883a 	mov	r5,r21
    584c:	1009883a 	mov	r4,r2
    5850:	d8800915 	stw	r2,36(sp)
    5854:	0008cc80 	call	8cc8 <__mcmp>
    5858:	da001717 	ldw	r8,92(sp)
    585c:	0081800e 	bge	zero,r2,5e60 <_dtoa_r+0x11d4>
    5860:	b93fffc3 	ldbu	r4,-1(r23)
    5864:	b8bfffc4 	addi	r2,r23,-1
    5868:	1007883a 	mov	r3,r2
    586c:	01800e44 	movi	r6,57
    5870:	d9c00717 	ldw	r7,28(sp)
    5874:	00000506 	br	588c <_dtoa_r+0xc00>
    5878:	18ffffc4 	addi	r3,r3,-1
    587c:	11c12326 	beq	r2,r7,5d0c <_dtoa_r+0x1080>
    5880:	19000003 	ldbu	r4,0(r3)
    5884:	102f883a 	mov	r23,r2
    5888:	10bfffc4 	addi	r2,r2,-1
    588c:	21403fcc 	andi	r5,r4,255
    5890:	2940201c 	xori	r5,r5,128
    5894:	297fe004 	addi	r5,r5,-128
    5898:	29bff726 	beq	r5,r6,5878 <__alt_mem_onchip_memory2_0+0xf80047e8>
    589c:	21000044 	addi	r4,r4,1
    58a0:	11000005 	stb	r4,0(r2)
    58a4:	a80b883a 	mov	r5,r21
    58a8:	e009883a 	mov	r4,fp
    58ac:	00083ec0 	call	83ec <_Bfree>
    58b0:	883ea026 	beq	r17,zero,5334 <__alt_mem_onchip_memory2_0+0xf80042a4>
    58b4:	90000426 	beq	r18,zero,58c8 <_dtoa_r+0xc3c>
    58b8:	94400326 	beq	r18,r17,58c8 <_dtoa_r+0xc3c>
    58bc:	900b883a 	mov	r5,r18
    58c0:	e009883a 	mov	r4,fp
    58c4:	00083ec0 	call	83ec <_Bfree>
    58c8:	880b883a 	mov	r5,r17
    58cc:	e009883a 	mov	r4,fp
    58d0:	00083ec0 	call	83ec <_Bfree>
    58d4:	003e9706 	br	5334 <__alt_mem_onchip_memory2_0+0xf80042a4>
    58d8:	01800044 	movi	r6,1
    58dc:	d9800e15 	stw	r6,56(sp)
    58e0:	003d9606 	br	4f3c <__alt_mem_onchip_memory2_0+0xf8003eac>
    58e4:	d8800817 	ldw	r2,32(sp)
    58e8:	d8c00517 	ldw	r3,20(sp)
    58ec:	d8000d15 	stw	zero,52(sp)
    58f0:	10c5c83a 	sub	r2,r2,r3
    58f4:	00c9c83a 	sub	r4,zero,r3
    58f8:	d8800815 	stw	r2,32(sp)
    58fc:	d9000a15 	stw	r4,40(sp)
    5900:	003d9706 	br	4f60 <__alt_mem_onchip_memory2_0+0xf8003ed0>
    5904:	05adc83a 	sub	r22,zero,r22
    5908:	dd800815 	stw	r22,32(sp)
    590c:	002d883a 	mov	r22,zero
    5910:	003d8e06 	br	4f4c <__alt_mem_onchip_memory2_0+0xf8003ebc>
    5914:	d9000517 	ldw	r4,20(sp)
    5918:	000f0dc0 	call	f0dc <__floatsidf>
    591c:	100d883a 	mov	r6,r2
    5920:	180f883a 	mov	r7,r3
    5924:	a009883a 	mov	r4,r20
    5928:	880b883a 	mov	r5,r17
    592c:	000dc9c0 	call	dc9c <__eqdf2>
    5930:	103d7126 	beq	r2,zero,4ef8 <__alt_mem_onchip_memory2_0+0xf8003e68>
    5934:	d9c00517 	ldw	r7,20(sp)
    5938:	39ffffc4 	addi	r7,r7,-1
    593c:	d9c00515 	stw	r7,20(sp)
    5940:	003d6d06 	br	4ef8 <__alt_mem_onchip_memory2_0+0xf8003e68>
    5944:	dd400a17 	ldw	r21,40(sp)
    5948:	dd000817 	ldw	r20,32(sp)
    594c:	0023883a 	mov	r17,zero
    5950:	003f4806 	br	5674 <__alt_mem_onchip_memory2_0+0xf80045e4>
    5954:	10e3c83a 	sub	r17,r2,r3
    5958:	9448983a 	sll	r4,r18,r17
    595c:	003d3206 	br	4e28 <__alt_mem_onchip_memory2_0+0xf8003d98>
    5960:	d8000e15 	stw	zero,56(sp)
    5964:	003d7506 	br	4f3c <__alt_mem_onchip_memory2_0+0xf8003eac>
    5968:	b005883a 	mov	r2,r22
    596c:	003f4506 	br	5684 <__alt_mem_onchip_memory2_0+0xf80045f4>
    5970:	dc000915 	stw	r16,36(sp)
    5974:	d9800a17 	ldw	r6,40(sp)
    5978:	d9400917 	ldw	r5,36(sp)
    597c:	e009883a 	mov	r4,fp
    5980:	0008a400 	call	8a40 <__pow5mult>
    5984:	1021883a 	mov	r16,r2
    5988:	003f5a06 	br	56f4 <__alt_mem_onchip_memory2_0+0xf8004664>
    598c:	01c00044 	movi	r7,1
    5990:	d9c00b15 	stw	r7,44(sp)
    5994:	d8802217 	ldw	r2,136(sp)
    5998:	0081280e 	bge	zero,r2,5e3c <_dtoa_r+0x11b0>
    599c:	100d883a 	mov	r6,r2
    59a0:	1021883a 	mov	r16,r2
    59a4:	d8800c15 	stw	r2,48(sp)
    59a8:	d8800615 	stw	r2,24(sp)
    59ac:	003d8806 	br	4fd0 <__alt_mem_onchip_memory2_0+0xf8003f40>
    59b0:	d8800617 	ldw	r2,24(sp)
    59b4:	00be9b16 	blt	zero,r2,5424 <__alt_mem_onchip_memory2_0+0xf8004394>
    59b8:	10010f1e 	bne	r2,zero,5df8 <_dtoa_r+0x116c>
    59bc:	880b883a 	mov	r5,r17
    59c0:	000d883a 	mov	r6,zero
    59c4:	01d00534 	movhi	r7,16404
    59c8:	8009883a 	mov	r4,r16
    59cc:	000def40 	call	def4 <__muldf3>
    59d0:	900d883a 	mov	r6,r18
    59d4:	980f883a 	mov	r7,r19
    59d8:	1009883a 	mov	r4,r2
    59dc:	180b883a 	mov	r5,r3
    59e0:	000dd240 	call	dd24 <__gedf2>
    59e4:	002b883a 	mov	r21,zero
    59e8:	0023883a 	mov	r17,zero
    59ec:	1000bf16 	blt	r2,zero,5cec <_dtoa_r+0x1060>
    59f0:	d9802217 	ldw	r6,136(sp)
    59f4:	ddc00717 	ldw	r23,28(sp)
    59f8:	018c303a 	nor	r6,zero,r6
    59fc:	d9800515 	stw	r6,20(sp)
    5a00:	a80b883a 	mov	r5,r21
    5a04:	e009883a 	mov	r4,fp
    5a08:	00083ec0 	call	83ec <_Bfree>
    5a0c:	883e4926 	beq	r17,zero,5334 <__alt_mem_onchip_memory2_0+0xf80042a4>
    5a10:	003fad06 	br	58c8 <__alt_mem_onchip_memory2_0+0xf8004838>
    5a14:	d9c01117 	ldw	r7,68(sp)
    5a18:	3801bc26 	beq	r7,zero,610c <_dtoa_r+0x1480>
    5a1c:	10810cc4 	addi	r2,r2,1075
    5a20:	dd400a17 	ldw	r21,40(sp)
    5a24:	dd000817 	ldw	r20,32(sp)
    5a28:	003f0a06 	br	5654 <__alt_mem_onchip_memory2_0+0xf80045c4>
    5a2c:	00800704 	movi	r2,28
    5a30:	d9000817 	ldw	r4,32(sp)
    5a34:	a0a9883a 	add	r20,r20,r2
    5a38:	b0ad883a 	add	r22,r22,r2
    5a3c:	2089883a 	add	r4,r4,r2
    5a40:	d9000815 	stw	r4,32(sp)
    5a44:	003f5106 	br	578c <__alt_mem_onchip_memory2_0+0xf80046fc>
    5a48:	d8c00317 	ldw	r3,12(sp)
    5a4c:	b8c1fc0e 	bge	r23,r3,6240 <_dtoa_r+0x15b4>
    5a50:	0027883a 	mov	r19,zero
    5a54:	b805883a 	mov	r2,r23
    5a58:	003f3e06 	br	5754 <__alt_mem_onchip_memory2_0+0xf80046c4>
    5a5c:	880b883a 	mov	r5,r17
    5a60:	e009883a 	mov	r4,fp
    5a64:	000f883a 	mov	r7,zero
    5a68:	01800284 	movi	r6,10
    5a6c:	00084140 	call	8414 <__multadd>
    5a70:	d9000c17 	ldw	r4,48(sp)
    5a74:	1023883a 	mov	r17,r2
    5a78:	0102040e 	bge	zero,r4,628c <_dtoa_r+0x1600>
    5a7c:	d9000615 	stw	r4,24(sp)
    5a80:	0500050e 	bge	zero,r20,5a98 <_dtoa_r+0xe0c>
    5a84:	880b883a 	mov	r5,r17
    5a88:	a00d883a 	mov	r6,r20
    5a8c:	e009883a 	mov	r4,fp
    5a90:	0008b800 	call	8b80 <__lshift>
    5a94:	1023883a 	mov	r17,r2
    5a98:	9801241e 	bne	r19,zero,5f2c <_dtoa_r+0x12a0>
    5a9c:	8829883a 	mov	r20,r17
    5aa0:	d9000617 	ldw	r4,24(sp)
    5aa4:	dcc00717 	ldw	r19,28(sp)
    5aa8:	9480004c 	andi	r18,r18,1
    5aac:	20bfffc4 	addi	r2,r4,-1
    5ab0:	9885883a 	add	r2,r19,r2
    5ab4:	d8800415 	stw	r2,16(sp)
    5ab8:	dc800615 	stw	r18,24(sp)
    5abc:	a80b883a 	mov	r5,r21
    5ac0:	8009883a 	mov	r4,r16
    5ac4:	0004a640 	call	4a64 <quorem>
    5ac8:	880b883a 	mov	r5,r17
    5acc:	8009883a 	mov	r4,r16
    5ad0:	102f883a 	mov	r23,r2
    5ad4:	0008cc80 	call	8cc8 <__mcmp>
    5ad8:	a80b883a 	mov	r5,r21
    5adc:	a00d883a 	mov	r6,r20
    5ae0:	e009883a 	mov	r4,fp
    5ae4:	102d883a 	mov	r22,r2
    5ae8:	0008d280 	call	8d28 <__mdiff>
    5aec:	1007883a 	mov	r3,r2
    5af0:	10800317 	ldw	r2,12(r2)
    5af4:	bc800c04 	addi	r18,r23,48
    5af8:	180b883a 	mov	r5,r3
    5afc:	10004e1e 	bne	r2,zero,5c38 <_dtoa_r+0xfac>
    5b00:	8009883a 	mov	r4,r16
    5b04:	d8c01615 	stw	r3,88(sp)
    5b08:	0008cc80 	call	8cc8 <__mcmp>
    5b0c:	d8c01617 	ldw	r3,88(sp)
    5b10:	e009883a 	mov	r4,fp
    5b14:	d8801615 	stw	r2,88(sp)
    5b18:	180b883a 	mov	r5,r3
    5b1c:	00083ec0 	call	83ec <_Bfree>
    5b20:	d8801617 	ldw	r2,88(sp)
    5b24:	1000041e 	bne	r2,zero,5b38 <_dtoa_r+0xeac>
    5b28:	d9800317 	ldw	r6,12(sp)
    5b2c:	3000021e 	bne	r6,zero,5b38 <_dtoa_r+0xeac>
    5b30:	d8c00617 	ldw	r3,24(sp)
    5b34:	18003726 	beq	r3,zero,5c14 <_dtoa_r+0xf88>
    5b38:	b0002016 	blt	r22,zero,5bbc <_dtoa_r+0xf30>
    5b3c:	b000041e 	bne	r22,zero,5b50 <_dtoa_r+0xec4>
    5b40:	d9000317 	ldw	r4,12(sp)
    5b44:	2000021e 	bne	r4,zero,5b50 <_dtoa_r+0xec4>
    5b48:	d8c00617 	ldw	r3,24(sp)
    5b4c:	18001b26 	beq	r3,zero,5bbc <_dtoa_r+0xf30>
    5b50:	00810716 	blt	zero,r2,5f70 <_dtoa_r+0x12e4>
    5b54:	d8c00417 	ldw	r3,16(sp)
    5b58:	9d800044 	addi	r22,r19,1
    5b5c:	9c800005 	stb	r18,0(r19)
    5b60:	b02f883a 	mov	r23,r22
    5b64:	98c10626 	beq	r19,r3,5f80 <_dtoa_r+0x12f4>
    5b68:	800b883a 	mov	r5,r16
    5b6c:	000f883a 	mov	r7,zero
    5b70:	01800284 	movi	r6,10
    5b74:	e009883a 	mov	r4,fp
    5b78:	00084140 	call	8414 <__multadd>
    5b7c:	1021883a 	mov	r16,r2
    5b80:	000f883a 	mov	r7,zero
    5b84:	01800284 	movi	r6,10
    5b88:	880b883a 	mov	r5,r17
    5b8c:	e009883a 	mov	r4,fp
    5b90:	8d002526 	beq	r17,r20,5c28 <_dtoa_r+0xf9c>
    5b94:	00084140 	call	8414 <__multadd>
    5b98:	a00b883a 	mov	r5,r20
    5b9c:	000f883a 	mov	r7,zero
    5ba0:	01800284 	movi	r6,10
    5ba4:	e009883a 	mov	r4,fp
    5ba8:	1023883a 	mov	r17,r2
    5bac:	00084140 	call	8414 <__multadd>
    5bb0:	1029883a 	mov	r20,r2
    5bb4:	b027883a 	mov	r19,r22
    5bb8:	003fc006 	br	5abc <__alt_mem_onchip_memory2_0+0xf8004a2c>
    5bbc:	9011883a 	mov	r8,r18
    5bc0:	00800e0e 	bge	zero,r2,5bfc <_dtoa_r+0xf70>
    5bc4:	800b883a 	mov	r5,r16
    5bc8:	01800044 	movi	r6,1
    5bcc:	e009883a 	mov	r4,fp
    5bd0:	da001715 	stw	r8,92(sp)
    5bd4:	0008b800 	call	8b80 <__lshift>
    5bd8:	a80b883a 	mov	r5,r21
    5bdc:	1009883a 	mov	r4,r2
    5be0:	1021883a 	mov	r16,r2
    5be4:	0008cc80 	call	8cc8 <__mcmp>
    5be8:	da001717 	ldw	r8,92(sp)
    5bec:	0081960e 	bge	zero,r2,6248 <_dtoa_r+0x15bc>
    5bf0:	00800e44 	movi	r2,57
    5bf4:	40817026 	beq	r8,r2,61b8 <_dtoa_r+0x152c>
    5bf8:	ba000c44 	addi	r8,r23,49
    5bfc:	8825883a 	mov	r18,r17
    5c00:	9dc00044 	addi	r23,r19,1
    5c04:	9a000005 	stb	r8,0(r19)
    5c08:	a023883a 	mov	r17,r20
    5c0c:	dc000915 	stw	r16,36(sp)
    5c10:	003f2406 	br	58a4 <__alt_mem_onchip_memory2_0+0xf8004814>
    5c14:	00800e44 	movi	r2,57
    5c18:	9011883a 	mov	r8,r18
    5c1c:	90816626 	beq	r18,r2,61b8 <_dtoa_r+0x152c>
    5c20:	05bff516 	blt	zero,r22,5bf8 <__alt_mem_onchip_memory2_0+0xf8004b68>
    5c24:	003ff506 	br	5bfc <__alt_mem_onchip_memory2_0+0xf8004b6c>
    5c28:	00084140 	call	8414 <__multadd>
    5c2c:	1023883a 	mov	r17,r2
    5c30:	1029883a 	mov	r20,r2
    5c34:	003fdf06 	br	5bb4 <__alt_mem_onchip_memory2_0+0xf8004b24>
    5c38:	e009883a 	mov	r4,fp
    5c3c:	00083ec0 	call	83ec <_Bfree>
    5c40:	00800044 	movi	r2,1
    5c44:	003fbc06 	br	5b38 <__alt_mem_onchip_memory2_0+0xf8004aa8>
    5c48:	a80b883a 	mov	r5,r21
    5c4c:	8009883a 	mov	r4,r16
    5c50:	0008cc80 	call	8cc8 <__mcmp>
    5c54:	103edb0e 	bge	r2,zero,57c4 <__alt_mem_onchip_memory2_0+0xf8004734>
    5c58:	800b883a 	mov	r5,r16
    5c5c:	000f883a 	mov	r7,zero
    5c60:	01800284 	movi	r6,10
    5c64:	e009883a 	mov	r4,fp
    5c68:	00084140 	call	8414 <__multadd>
    5c6c:	1021883a 	mov	r16,r2
    5c70:	d8800517 	ldw	r2,20(sp)
    5c74:	d8c00b17 	ldw	r3,44(sp)
    5c78:	10bfffc4 	addi	r2,r2,-1
    5c7c:	d8800515 	stw	r2,20(sp)
    5c80:	183f761e 	bne	r3,zero,5a5c <__alt_mem_onchip_memory2_0+0xf80049cc>
    5c84:	d9000c17 	ldw	r4,48(sp)
    5c88:	0101730e 	bge	zero,r4,6258 <_dtoa_r+0x15cc>
    5c8c:	d9000615 	stw	r4,24(sp)
    5c90:	003ed006 	br	57d4 <__alt_mem_onchip_memory2_0+0xf8004744>
    5c94:	00800084 	movi	r2,2
    5c98:	3081861e 	bne	r6,r2,62b4 <_dtoa_r+0x1628>
    5c9c:	d8000b15 	stw	zero,44(sp)
    5ca0:	003f3c06 	br	5994 <__alt_mem_onchip_memory2_0+0xf8004904>
    5ca4:	dc000917 	ldw	r16,36(sp)
    5ca8:	003e9206 	br	56f4 <__alt_mem_onchip_memory2_0+0xf8004664>
    5cac:	d9c00317 	ldw	r7,12(sp)
    5cb0:	00800084 	movi	r2,2
    5cb4:	11fec50e 	bge	r2,r7,57cc <__alt_mem_onchip_memory2_0+0xf800473c>
    5cb8:	d9000617 	ldw	r4,24(sp)
    5cbc:	20013c1e 	bne	r4,zero,61b0 <_dtoa_r+0x1524>
    5cc0:	a80b883a 	mov	r5,r21
    5cc4:	000f883a 	mov	r7,zero
    5cc8:	01800144 	movi	r6,5
    5ccc:	e009883a 	mov	r4,fp
    5cd0:	00084140 	call	8414 <__multadd>
    5cd4:	100b883a 	mov	r5,r2
    5cd8:	8009883a 	mov	r4,r16
    5cdc:	102b883a 	mov	r21,r2
    5ce0:	0008cc80 	call	8cc8 <__mcmp>
    5ce4:	dc000915 	stw	r16,36(sp)
    5ce8:	00bf410e 	bge	zero,r2,59f0 <__alt_mem_onchip_memory2_0+0xf8004960>
    5cec:	d9c00717 	ldw	r7,28(sp)
    5cf0:	00800c44 	movi	r2,49
    5cf4:	38800005 	stb	r2,0(r7)
    5cf8:	d8800517 	ldw	r2,20(sp)
    5cfc:	3dc00044 	addi	r23,r7,1
    5d00:	10800044 	addi	r2,r2,1
    5d04:	d8800515 	stw	r2,20(sp)
    5d08:	003f3d06 	br	5a00 <__alt_mem_onchip_memory2_0+0xf8004970>
    5d0c:	d9800517 	ldw	r6,20(sp)
    5d10:	d9c00717 	ldw	r7,28(sp)
    5d14:	00800c44 	movi	r2,49
    5d18:	31800044 	addi	r6,r6,1
    5d1c:	d9800515 	stw	r6,20(sp)
    5d20:	38800005 	stb	r2,0(r7)
    5d24:	003edf06 	br	58a4 <__alt_mem_onchip_memory2_0+0xf8004814>
    5d28:	d8000b15 	stw	zero,44(sp)
    5d2c:	003c9f06 	br	4fac <__alt_mem_onchip_memory2_0+0xf8003f1c>
    5d30:	903e7e1e 	bne	r18,zero,572c <__alt_mem_onchip_memory2_0+0xf800469c>
    5d34:	00800434 	movhi	r2,16
    5d38:	10bfffc4 	addi	r2,r2,-1
    5d3c:	9884703a 	and	r2,r19,r2
    5d40:	1000ea1e 	bne	r2,zero,60ec <_dtoa_r+0x1460>
    5d44:	9cdffc2c 	andhi	r19,r19,32752
    5d48:	9800e826 	beq	r19,zero,60ec <_dtoa_r+0x1460>
    5d4c:	d9c00817 	ldw	r7,32(sp)
    5d50:	b5800044 	addi	r22,r22,1
    5d54:	04c00044 	movi	r19,1
    5d58:	39c00044 	addi	r7,r7,1
    5d5c:	d9c00815 	stw	r7,32(sp)
    5d60:	d8800d17 	ldw	r2,52(sp)
    5d64:	103e721e 	bne	r2,zero,5730 <__alt_mem_onchip_memory2_0+0xf80046a0>
    5d68:	00800044 	movi	r2,1
    5d6c:	003e7906 	br	5754 <__alt_mem_onchip_memory2_0+0xf80046c4>
    5d70:	8009883a 	mov	r4,r16
    5d74:	000f0dc0 	call	f0dc <__floatsidf>
    5d78:	d9800f17 	ldw	r6,60(sp)
    5d7c:	d9c01017 	ldw	r7,64(sp)
    5d80:	1009883a 	mov	r4,r2
    5d84:	180b883a 	mov	r5,r3
    5d88:	000def40 	call	def4 <__muldf3>
    5d8c:	000d883a 	mov	r6,zero
    5d90:	01d00734 	movhi	r7,16412
    5d94:	1009883a 	mov	r4,r2
    5d98:	180b883a 	mov	r5,r3
    5d9c:	000ca200 	call	ca20 <__adddf3>
    5da0:	047f3034 	movhi	r17,64704
    5da4:	1021883a 	mov	r16,r2
    5da8:	1c63883a 	add	r17,r3,r17
    5dac:	d9000f17 	ldw	r4,60(sp)
    5db0:	d9401017 	ldw	r5,64(sp)
    5db4:	000d883a 	mov	r6,zero
    5db8:	01d00534 	movhi	r7,16404
    5dbc:	000e7600 	call	e760 <__subdf3>
    5dc0:	800d883a 	mov	r6,r16
    5dc4:	880f883a 	mov	r7,r17
    5dc8:	1009883a 	mov	r4,r2
    5dcc:	180b883a 	mov	r5,r3
    5dd0:	102b883a 	mov	r21,r2
    5dd4:	1829883a 	mov	r20,r3
    5dd8:	000dd240 	call	dd24 <__gedf2>
    5ddc:	00806c16 	blt	zero,r2,5f90 <_dtoa_r+0x1304>
    5de0:	89e0003c 	xorhi	r7,r17,32768
    5de4:	800d883a 	mov	r6,r16
    5de8:	a809883a 	mov	r4,r21
    5dec:	a00b883a 	mov	r5,r20
    5df0:	000de000 	call	de00 <__ledf2>
    5df4:	103d7e0e 	bge	r2,zero,53f0 <__alt_mem_onchip_memory2_0+0xf8004360>
    5df8:	002b883a 	mov	r21,zero
    5dfc:	0023883a 	mov	r17,zero
    5e00:	003efb06 	br	59f0 <__alt_mem_onchip_memory2_0+0xf8004960>
    5e04:	d8800717 	ldw	r2,28(sp)
    5e08:	003bd006 	br	4d4c <__alt_mem_onchip_memory2_0+0xf8003cbc>
    5e0c:	d9000a17 	ldw	r4,40(sp)
    5e10:	d9800d17 	ldw	r6,52(sp)
    5e14:	dd400a15 	stw	r21,40(sp)
    5e18:	a905c83a 	sub	r2,r21,r4
    5e1c:	308d883a 	add	r6,r6,r2
    5e20:	d9800d15 	stw	r6,52(sp)
    5e24:	002b883a 	mov	r21,zero
    5e28:	003e0606 	br	5644 <__alt_mem_onchip_memory2_0+0xf80045b4>
    5e2c:	9023883a 	mov	r17,r18
    5e30:	9829883a 	mov	r20,r19
    5e34:	04000084 	movi	r16,2
    5e38:	003c9206 	br	5084 <__alt_mem_onchip_memory2_0+0xf8003ff4>
    5e3c:	04000044 	movi	r16,1
    5e40:	dc000c15 	stw	r16,48(sp)
    5e44:	dc000615 	stw	r16,24(sp)
    5e48:	dc002215 	stw	r16,136(sp)
    5e4c:	e0001115 	stw	zero,68(fp)
    5e50:	000b883a 	mov	r5,zero
    5e54:	003c6906 	br	4ffc <__alt_mem_onchip_memory2_0+0xf8003f6c>
    5e58:	3021883a 	mov	r16,r6
    5e5c:	003ffb06 	br	5e4c <__alt_mem_onchip_memory2_0+0xf8004dbc>
    5e60:	1000021e 	bne	r2,zero,5e6c <_dtoa_r+0x11e0>
    5e64:	4200004c 	andi	r8,r8,1
    5e68:	403e7d1e 	bne	r8,zero,5860 <__alt_mem_onchip_memory2_0+0xf80047d0>
    5e6c:	01000c04 	movi	r4,48
    5e70:	00000106 	br	5e78 <_dtoa_r+0x11ec>
    5e74:	102f883a 	mov	r23,r2
    5e78:	b8bfffc4 	addi	r2,r23,-1
    5e7c:	10c00007 	ldb	r3,0(r2)
    5e80:	193ffc26 	beq	r3,r4,5e74 <__alt_mem_onchip_memory2_0+0xf8004de4>
    5e84:	003e8706 	br	58a4 <__alt_mem_onchip_memory2_0+0xf8004814>
    5e88:	d8800517 	ldw	r2,20(sp)
    5e8c:	00a3c83a 	sub	r17,zero,r2
    5e90:	8800a426 	beq	r17,zero,6124 <_dtoa_r+0x1498>
    5e94:	888003cc 	andi	r2,r17,15
    5e98:	100490fa 	slli	r2,r2,3
    5e9c:	00c00074 	movhi	r3,1
    5ea0:	18c8da04 	addi	r3,r3,9064
    5ea4:	1885883a 	add	r2,r3,r2
    5ea8:	11800017 	ldw	r6,0(r2)
    5eac:	11c00117 	ldw	r7,4(r2)
    5eb0:	9009883a 	mov	r4,r18
    5eb4:	980b883a 	mov	r5,r19
    5eb8:	8823d13a 	srai	r17,r17,4
    5ebc:	000def40 	call	def4 <__muldf3>
    5ec0:	d8800f15 	stw	r2,60(sp)
    5ec4:	d8c01015 	stw	r3,64(sp)
    5ec8:	8800e826 	beq	r17,zero,626c <_dtoa_r+0x15e0>
    5ecc:	05000074 	movhi	r20,1
    5ed0:	a508d004 	addi	r20,r20,9024
    5ed4:	04000084 	movi	r16,2
    5ed8:	8980004c 	andi	r6,r17,1
    5edc:	1009883a 	mov	r4,r2
    5ee0:	8823d07a 	srai	r17,r17,1
    5ee4:	180b883a 	mov	r5,r3
    5ee8:	30000426 	beq	r6,zero,5efc <_dtoa_r+0x1270>
    5eec:	a1800017 	ldw	r6,0(r20)
    5ef0:	a1c00117 	ldw	r7,4(r20)
    5ef4:	84000044 	addi	r16,r16,1
    5ef8:	000def40 	call	def4 <__muldf3>
    5efc:	a5000204 	addi	r20,r20,8
    5f00:	883ff51e 	bne	r17,zero,5ed8 <__alt_mem_onchip_memory2_0+0xf8004e48>
    5f04:	d8800f15 	stw	r2,60(sp)
    5f08:	d8c01015 	stw	r3,64(sp)
    5f0c:	003c7606 	br	50e8 <__alt_mem_onchip_memory2_0+0xf8004058>
    5f10:	00c00c04 	movi	r3,48
    5f14:	10c00005 	stb	r3,0(r2)
    5f18:	d8c00517 	ldw	r3,20(sp)
    5f1c:	bd3fffc3 	ldbu	r20,-1(r23)
    5f20:	18c00044 	addi	r3,r3,1
    5f24:	d8c00515 	stw	r3,20(sp)
    5f28:	003db906 	br	5610 <__alt_mem_onchip_memory2_0+0xf8004580>
    5f2c:	89400117 	ldw	r5,4(r17)
    5f30:	e009883a 	mov	r4,fp
    5f34:	00083440 	call	8344 <_Balloc>
    5f38:	89800417 	ldw	r6,16(r17)
    5f3c:	89400304 	addi	r5,r17,12
    5f40:	11000304 	addi	r4,r2,12
    5f44:	31800084 	addi	r6,r6,2
    5f48:	318d883a 	add	r6,r6,r6
    5f4c:	318d883a 	add	r6,r6,r6
    5f50:	1027883a 	mov	r19,r2
    5f54:	0007f780 	call	7f78 <memcpy>
    5f58:	01800044 	movi	r6,1
    5f5c:	980b883a 	mov	r5,r19
    5f60:	e009883a 	mov	r4,fp
    5f64:	0008b800 	call	8b80 <__lshift>
    5f68:	1029883a 	mov	r20,r2
    5f6c:	003ecc06 	br	5aa0 <__alt_mem_onchip_memory2_0+0xf8004a10>
    5f70:	00800e44 	movi	r2,57
    5f74:	90809026 	beq	r18,r2,61b8 <_dtoa_r+0x152c>
    5f78:	92000044 	addi	r8,r18,1
    5f7c:	003f1f06 	br	5bfc <__alt_mem_onchip_memory2_0+0xf8004b6c>
    5f80:	9011883a 	mov	r8,r18
    5f84:	8825883a 	mov	r18,r17
    5f88:	a023883a 	mov	r17,r20
    5f8c:	003e2906 	br	5834 <__alt_mem_onchip_memory2_0+0xf80047a4>
    5f90:	002b883a 	mov	r21,zero
    5f94:	0023883a 	mov	r17,zero
    5f98:	003f5406 	br	5cec <__alt_mem_onchip_memory2_0+0xf8004c5c>
    5f9c:	61bfffc4 	addi	r6,r12,-1
    5fa0:	300490fa 	slli	r2,r6,3
    5fa4:	00c00074 	movhi	r3,1
    5fa8:	18c8da04 	addi	r3,r3,9064
    5fac:	1885883a 	add	r2,r3,r2
    5fb0:	11000017 	ldw	r4,0(r2)
    5fb4:	11400117 	ldw	r5,4(r2)
    5fb8:	d8800717 	ldw	r2,28(sp)
    5fbc:	880f883a 	mov	r7,r17
    5fc0:	d9801215 	stw	r6,72(sp)
    5fc4:	800d883a 	mov	r6,r16
    5fc8:	db001615 	stw	r12,88(sp)
    5fcc:	15c00044 	addi	r23,r2,1
    5fd0:	000def40 	call	def4 <__muldf3>
    5fd4:	d9401017 	ldw	r5,64(sp)
    5fd8:	d9000f17 	ldw	r4,60(sp)
    5fdc:	d8c01515 	stw	r3,84(sp)
    5fe0:	d8801415 	stw	r2,80(sp)
    5fe4:	000f05c0 	call	f05c <__fixdfsi>
    5fe8:	1009883a 	mov	r4,r2
    5fec:	1021883a 	mov	r16,r2
    5ff0:	000f0dc0 	call	f0dc <__floatsidf>
    5ff4:	d9000f17 	ldw	r4,60(sp)
    5ff8:	d9401017 	ldw	r5,64(sp)
    5ffc:	100d883a 	mov	r6,r2
    6000:	180f883a 	mov	r7,r3
    6004:	000e7600 	call	e760 <__subdf3>
    6008:	1829883a 	mov	r20,r3
    600c:	d8c00717 	ldw	r3,28(sp)
    6010:	84000c04 	addi	r16,r16,48
    6014:	1023883a 	mov	r17,r2
    6018:	1c000005 	stb	r16,0(r3)
    601c:	db001617 	ldw	r12,88(sp)
    6020:	00800044 	movi	r2,1
    6024:	60802226 	beq	r12,r2,60b0 <_dtoa_r+0x1424>
    6028:	d9c00717 	ldw	r7,28(sp)
    602c:	8805883a 	mov	r2,r17
    6030:	b82b883a 	mov	r21,r23
    6034:	3b19883a 	add	r12,r7,r12
    6038:	6023883a 	mov	r17,r12
    603c:	a007883a 	mov	r3,r20
    6040:	dc800f15 	stw	r18,60(sp)
    6044:	000d883a 	mov	r6,zero
    6048:	01d00934 	movhi	r7,16420
    604c:	1009883a 	mov	r4,r2
    6050:	180b883a 	mov	r5,r3
    6054:	000def40 	call	def4 <__muldf3>
    6058:	180b883a 	mov	r5,r3
    605c:	1009883a 	mov	r4,r2
    6060:	1829883a 	mov	r20,r3
    6064:	1025883a 	mov	r18,r2
    6068:	000f05c0 	call	f05c <__fixdfsi>
    606c:	1009883a 	mov	r4,r2
    6070:	1021883a 	mov	r16,r2
    6074:	000f0dc0 	call	f0dc <__floatsidf>
    6078:	100d883a 	mov	r6,r2
    607c:	180f883a 	mov	r7,r3
    6080:	9009883a 	mov	r4,r18
    6084:	a00b883a 	mov	r5,r20
    6088:	84000c04 	addi	r16,r16,48
    608c:	000e7600 	call	e760 <__subdf3>
    6090:	ad400044 	addi	r21,r21,1
    6094:	ac3fffc5 	stb	r16,-1(r21)
    6098:	ac7fea1e 	bne	r21,r17,6044 <__alt_mem_onchip_memory2_0+0xf8004fb4>
    609c:	1023883a 	mov	r17,r2
    60a0:	d8801217 	ldw	r2,72(sp)
    60a4:	dc800f17 	ldw	r18,60(sp)
    60a8:	1829883a 	mov	r20,r3
    60ac:	b8af883a 	add	r23,r23,r2
    60b0:	d9001417 	ldw	r4,80(sp)
    60b4:	d9401517 	ldw	r5,84(sp)
    60b8:	000d883a 	mov	r6,zero
    60bc:	01cff834 	movhi	r7,16352
    60c0:	000ca200 	call	ca20 <__adddf3>
    60c4:	880d883a 	mov	r6,r17
    60c8:	a00f883a 	mov	r7,r20
    60cc:	1009883a 	mov	r4,r2
    60d0:	180b883a 	mov	r5,r3
    60d4:	000de000 	call	de00 <__ledf2>
    60d8:	10003e0e 	bge	r2,zero,61d4 <_dtoa_r+0x1548>
    60dc:	d9001317 	ldw	r4,76(sp)
    60e0:	bd3fffc3 	ldbu	r20,-1(r23)
    60e4:	d9000515 	stw	r4,20(sp)
    60e8:	003d3b06 	br	55d8 <__alt_mem_onchip_memory2_0+0xf8004548>
    60ec:	0027883a 	mov	r19,zero
    60f0:	003f1b06 	br	5d60 <__alt_mem_onchip_memory2_0+0xf8004cd0>
    60f4:	d8800817 	ldw	r2,32(sp)
    60f8:	11e9c83a 	sub	r20,r2,r7
    60fc:	0005883a 	mov	r2,zero
    6100:	003d5406 	br	5654 <__alt_mem_onchip_memory2_0+0xf80045c4>
    6104:	00800044 	movi	r2,1
    6108:	003dc706 	br	5828 <__alt_mem_onchip_memory2_0+0xf8004798>
    610c:	d8c00217 	ldw	r3,8(sp)
    6110:	00800d84 	movi	r2,54
    6114:	dd400a17 	ldw	r21,40(sp)
    6118:	10c5c83a 	sub	r2,r2,r3
    611c:	dd000817 	ldw	r20,32(sp)
    6120:	003d4c06 	br	5654 <__alt_mem_onchip_memory2_0+0xf80045c4>
    6124:	dc800f15 	stw	r18,60(sp)
    6128:	dcc01015 	stw	r19,64(sp)
    612c:	04000084 	movi	r16,2
    6130:	003bed06 	br	50e8 <__alt_mem_onchip_memory2_0+0xf8004058>
    6134:	d9000617 	ldw	r4,24(sp)
    6138:	203f0d26 	beq	r4,zero,5d70 <__alt_mem_onchip_memory2_0+0xf8004ce0>
    613c:	d9800c17 	ldw	r6,48(sp)
    6140:	01bcab0e 	bge	zero,r6,53f0 <__alt_mem_onchip_memory2_0+0xf8004360>
    6144:	d9401017 	ldw	r5,64(sp)
    6148:	d9000f17 	ldw	r4,60(sp)
    614c:	000d883a 	mov	r6,zero
    6150:	01d00934 	movhi	r7,16420
    6154:	000def40 	call	def4 <__muldf3>
    6158:	81000044 	addi	r4,r16,1
    615c:	d8800f15 	stw	r2,60(sp)
    6160:	d8c01015 	stw	r3,64(sp)
    6164:	000f0dc0 	call	f0dc <__floatsidf>
    6168:	d9800f17 	ldw	r6,60(sp)
    616c:	d9c01017 	ldw	r7,64(sp)
    6170:	1009883a 	mov	r4,r2
    6174:	180b883a 	mov	r5,r3
    6178:	000def40 	call	def4 <__muldf3>
    617c:	01d00734 	movhi	r7,16412
    6180:	000d883a 	mov	r6,zero
    6184:	1009883a 	mov	r4,r2
    6188:	180b883a 	mov	r5,r3
    618c:	000ca200 	call	ca20 <__adddf3>
    6190:	d9c00517 	ldw	r7,20(sp)
    6194:	047f3034 	movhi	r17,64704
    6198:	1021883a 	mov	r16,r2
    619c:	39ffffc4 	addi	r7,r7,-1
    61a0:	d9c01315 	stw	r7,76(sp)
    61a4:	1c63883a 	add	r17,r3,r17
    61a8:	db000c17 	ldw	r12,48(sp)
    61ac:	003bea06 	br	5158 <__alt_mem_onchip_memory2_0+0xf80040c8>
    61b0:	dc000915 	stw	r16,36(sp)
    61b4:	003e0e06 	br	59f0 <__alt_mem_onchip_memory2_0+0xf8004960>
    61b8:	01000e44 	movi	r4,57
    61bc:	8825883a 	mov	r18,r17
    61c0:	9dc00044 	addi	r23,r19,1
    61c4:	99000005 	stb	r4,0(r19)
    61c8:	a023883a 	mov	r17,r20
    61cc:	dc000915 	stw	r16,36(sp)
    61d0:	003da406 	br	5864 <__alt_mem_onchip_memory2_0+0xf80047d4>
    61d4:	d9801417 	ldw	r6,80(sp)
    61d8:	d9c01517 	ldw	r7,84(sp)
    61dc:	0009883a 	mov	r4,zero
    61e0:	014ff834 	movhi	r5,16352
    61e4:	000e7600 	call	e760 <__subdf3>
    61e8:	880d883a 	mov	r6,r17
    61ec:	a00f883a 	mov	r7,r20
    61f0:	1009883a 	mov	r4,r2
    61f4:	180b883a 	mov	r5,r3
    61f8:	000dd240 	call	dd24 <__gedf2>
    61fc:	00bc7c0e 	bge	zero,r2,53f0 <__alt_mem_onchip_memory2_0+0xf8004360>
    6200:	01000c04 	movi	r4,48
    6204:	00000106 	br	620c <_dtoa_r+0x1580>
    6208:	102f883a 	mov	r23,r2
    620c:	b8bfffc4 	addi	r2,r23,-1
    6210:	10c00007 	ldb	r3,0(r2)
    6214:	193ffc26 	beq	r3,r4,6208 <__alt_mem_onchip_memory2_0+0xf8005178>
    6218:	d9801317 	ldw	r6,76(sp)
    621c:	d9800515 	stw	r6,20(sp)
    6220:	003c4406 	br	5334 <__alt_mem_onchip_memory2_0+0xf80042a4>
    6224:	d9801317 	ldw	r6,76(sp)
    6228:	d9800515 	stw	r6,20(sp)
    622c:	003cea06 	br	55d8 <__alt_mem_onchip_memory2_0+0xf8004548>
    6230:	dd800f17 	ldw	r22,60(sp)
    6234:	dcc01017 	ldw	r19,64(sp)
    6238:	dc801217 	ldw	r18,72(sp)
    623c:	003c6c06 	br	53f0 <__alt_mem_onchip_memory2_0+0xf8004360>
    6240:	903e031e 	bne	r18,zero,5a50 <__alt_mem_onchip_memory2_0+0xf80049c0>
    6244:	003ebb06 	br	5d34 <__alt_mem_onchip_memory2_0+0xf8004ca4>
    6248:	103e6c1e 	bne	r2,zero,5bfc <__alt_mem_onchip_memory2_0+0xf8004b6c>
    624c:	4080004c 	andi	r2,r8,1
    6250:	103e6a26 	beq	r2,zero,5bfc <__alt_mem_onchip_memory2_0+0xf8004b6c>
    6254:	003e6606 	br	5bf0 <__alt_mem_onchip_memory2_0+0xf8004b60>
    6258:	d8c00317 	ldw	r3,12(sp)
    625c:	00800084 	movi	r2,2
    6260:	10c02916 	blt	r2,r3,6308 <_dtoa_r+0x167c>
    6264:	d9000c17 	ldw	r4,48(sp)
    6268:	003e8806 	br	5c8c <__alt_mem_onchip_memory2_0+0xf8004bfc>
    626c:	04000084 	movi	r16,2
    6270:	003b9d06 	br	50e8 <__alt_mem_onchip_memory2_0+0xf8004058>
    6274:	d9001317 	ldw	r4,76(sp)
    6278:	d9000515 	stw	r4,20(sp)
    627c:	003cd606 	br	55d8 <__alt_mem_onchip_memory2_0+0xf8004548>
    6280:	d8801317 	ldw	r2,76(sp)
    6284:	d8800515 	stw	r2,20(sp)
    6288:	003c2a06 	br	5334 <__alt_mem_onchip_memory2_0+0xf80042a4>
    628c:	d9800317 	ldw	r6,12(sp)
    6290:	00800084 	movi	r2,2
    6294:	11801516 	blt	r2,r6,62ec <_dtoa_r+0x1660>
    6298:	d9c00c17 	ldw	r7,48(sp)
    629c:	d9c00615 	stw	r7,24(sp)
    62a0:	003df706 	br	5a80 <__alt_mem_onchip_memory2_0+0xf80049f0>
    62a4:	193d3926 	beq	r3,r4,578c <__alt_mem_onchip_memory2_0+0xf80046fc>
    62a8:	00c00f04 	movi	r3,60
    62ac:	1885c83a 	sub	r2,r3,r2
    62b0:	003ddf06 	br	5a30 <__alt_mem_onchip_memory2_0+0xf80049a0>
    62b4:	e009883a 	mov	r4,fp
    62b8:	e0001115 	stw	zero,68(fp)
    62bc:	000b883a 	mov	r5,zero
    62c0:	00083440 	call	8344 <_Balloc>
    62c4:	d8800715 	stw	r2,28(sp)
    62c8:	d8c00717 	ldw	r3,28(sp)
    62cc:	00bfffc4 	movi	r2,-1
    62d0:	01000044 	movi	r4,1
    62d4:	d8800c15 	stw	r2,48(sp)
    62d8:	e0c01015 	stw	r3,64(fp)
    62dc:	d9000b15 	stw	r4,44(sp)
    62e0:	d8800615 	stw	r2,24(sp)
    62e4:	d8002215 	stw	zero,136(sp)
    62e8:	003c4106 	br	53f0 <__alt_mem_onchip_memory2_0+0xf8004360>
    62ec:	d8c00c17 	ldw	r3,48(sp)
    62f0:	d8c00615 	stw	r3,24(sp)
    62f4:	003e7006 	br	5cb8 <__alt_mem_onchip_memory2_0+0xf8004c28>
    62f8:	04400044 	movi	r17,1
    62fc:	003b2006 	br	4f80 <__alt_mem_onchip_memory2_0+0xf8003ef0>
    6300:	000b883a 	mov	r5,zero
    6304:	003b3d06 	br	4ffc <__alt_mem_onchip_memory2_0+0xf8003f6c>
    6308:	d8800c17 	ldw	r2,48(sp)
    630c:	d8800615 	stw	r2,24(sp)
    6310:	003e6906 	br	5cb8 <__alt_mem_onchip_memory2_0+0xf8004c28>

00006314 <__sflush_r>:
    6314:	2880030b 	ldhu	r2,12(r5)
    6318:	defffb04 	addi	sp,sp,-20
    631c:	dcc00315 	stw	r19,12(sp)
    6320:	dc400115 	stw	r17,4(sp)
    6324:	dfc00415 	stw	ra,16(sp)
    6328:	dc800215 	stw	r18,8(sp)
    632c:	dc000015 	stw	r16,0(sp)
    6330:	10c0020c 	andi	r3,r2,8
    6334:	2823883a 	mov	r17,r5
    6338:	2027883a 	mov	r19,r4
    633c:	1800311e 	bne	r3,zero,6404 <__sflush_r+0xf0>
    6340:	28c00117 	ldw	r3,4(r5)
    6344:	10820014 	ori	r2,r2,2048
    6348:	2880030d 	sth	r2,12(r5)
    634c:	00c04b0e 	bge	zero,r3,647c <__sflush_r+0x168>
    6350:	8a000a17 	ldw	r8,40(r17)
    6354:	40002326 	beq	r8,zero,63e4 <__sflush_r+0xd0>
    6358:	9c000017 	ldw	r16,0(r19)
    635c:	10c4000c 	andi	r3,r2,4096
    6360:	98000015 	stw	zero,0(r19)
    6364:	18004826 	beq	r3,zero,6488 <__sflush_r+0x174>
    6368:	89801417 	ldw	r6,80(r17)
    636c:	10c0010c 	andi	r3,r2,4
    6370:	18000626 	beq	r3,zero,638c <__sflush_r+0x78>
    6374:	88c00117 	ldw	r3,4(r17)
    6378:	88800c17 	ldw	r2,48(r17)
    637c:	30cdc83a 	sub	r6,r6,r3
    6380:	10000226 	beq	r2,zero,638c <__sflush_r+0x78>
    6384:	88800f17 	ldw	r2,60(r17)
    6388:	308dc83a 	sub	r6,r6,r2
    638c:	89400717 	ldw	r5,28(r17)
    6390:	000f883a 	mov	r7,zero
    6394:	9809883a 	mov	r4,r19
    6398:	403ee83a 	callr	r8
    639c:	00ffffc4 	movi	r3,-1
    63a0:	10c04426 	beq	r2,r3,64b4 <__sflush_r+0x1a0>
    63a4:	88c0030b 	ldhu	r3,12(r17)
    63a8:	89000417 	ldw	r4,16(r17)
    63ac:	88000115 	stw	zero,4(r17)
    63b0:	197dffcc 	andi	r5,r3,63487
    63b4:	8940030d 	sth	r5,12(r17)
    63b8:	89000015 	stw	r4,0(r17)
    63bc:	18c4000c 	andi	r3,r3,4096
    63c0:	18002c1e 	bne	r3,zero,6474 <__sflush_r+0x160>
    63c4:	89400c17 	ldw	r5,48(r17)
    63c8:	9c000015 	stw	r16,0(r19)
    63cc:	28000526 	beq	r5,zero,63e4 <__sflush_r+0xd0>
    63d0:	88801004 	addi	r2,r17,64
    63d4:	28800226 	beq	r5,r2,63e0 <__sflush_r+0xcc>
    63d8:	9809883a 	mov	r4,r19
    63dc:	0006a900 	call	6a90 <_free_r>
    63e0:	88000c15 	stw	zero,48(r17)
    63e4:	0005883a 	mov	r2,zero
    63e8:	dfc00417 	ldw	ra,16(sp)
    63ec:	dcc00317 	ldw	r19,12(sp)
    63f0:	dc800217 	ldw	r18,8(sp)
    63f4:	dc400117 	ldw	r17,4(sp)
    63f8:	dc000017 	ldw	r16,0(sp)
    63fc:	dec00504 	addi	sp,sp,20
    6400:	f800283a 	ret
    6404:	2c800417 	ldw	r18,16(r5)
    6408:	903ff626 	beq	r18,zero,63e4 <__alt_mem_onchip_memory2_0+0xf8005354>
    640c:	2c000017 	ldw	r16,0(r5)
    6410:	108000cc 	andi	r2,r2,3
    6414:	2c800015 	stw	r18,0(r5)
    6418:	84a1c83a 	sub	r16,r16,r18
    641c:	1000131e 	bne	r2,zero,646c <__sflush_r+0x158>
    6420:	28800517 	ldw	r2,20(r5)
    6424:	88800215 	stw	r2,8(r17)
    6428:	04000316 	blt	zero,r16,6438 <__sflush_r+0x124>
    642c:	003fed06 	br	63e4 <__alt_mem_onchip_memory2_0+0xf8005354>
    6430:	90a5883a 	add	r18,r18,r2
    6434:	043feb0e 	bge	zero,r16,63e4 <__alt_mem_onchip_memory2_0+0xf8005354>
    6438:	88800917 	ldw	r2,36(r17)
    643c:	89400717 	ldw	r5,28(r17)
    6440:	800f883a 	mov	r7,r16
    6444:	900d883a 	mov	r6,r18
    6448:	9809883a 	mov	r4,r19
    644c:	103ee83a 	callr	r2
    6450:	80a1c83a 	sub	r16,r16,r2
    6454:	00bff616 	blt	zero,r2,6430 <__alt_mem_onchip_memory2_0+0xf80053a0>
    6458:	88c0030b 	ldhu	r3,12(r17)
    645c:	00bfffc4 	movi	r2,-1
    6460:	18c01014 	ori	r3,r3,64
    6464:	88c0030d 	sth	r3,12(r17)
    6468:	003fdf06 	br	63e8 <__alt_mem_onchip_memory2_0+0xf8005358>
    646c:	0005883a 	mov	r2,zero
    6470:	003fec06 	br	6424 <__alt_mem_onchip_memory2_0+0xf8005394>
    6474:	88801415 	stw	r2,80(r17)
    6478:	003fd206 	br	63c4 <__alt_mem_onchip_memory2_0+0xf8005334>
    647c:	28c00f17 	ldw	r3,60(r5)
    6480:	00ffb316 	blt	zero,r3,6350 <__alt_mem_onchip_memory2_0+0xf80052c0>
    6484:	003fd706 	br	63e4 <__alt_mem_onchip_memory2_0+0xf8005354>
    6488:	89400717 	ldw	r5,28(r17)
    648c:	000d883a 	mov	r6,zero
    6490:	01c00044 	movi	r7,1
    6494:	9809883a 	mov	r4,r19
    6498:	403ee83a 	callr	r8
    649c:	100d883a 	mov	r6,r2
    64a0:	00bfffc4 	movi	r2,-1
    64a4:	30801426 	beq	r6,r2,64f8 <__sflush_r+0x1e4>
    64a8:	8880030b 	ldhu	r2,12(r17)
    64ac:	8a000a17 	ldw	r8,40(r17)
    64b0:	003fae06 	br	636c <__alt_mem_onchip_memory2_0+0xf80052dc>
    64b4:	98c00017 	ldw	r3,0(r19)
    64b8:	183fba26 	beq	r3,zero,63a4 <__alt_mem_onchip_memory2_0+0xf8005314>
    64bc:	01000744 	movi	r4,29
    64c0:	19000626 	beq	r3,r4,64dc <__sflush_r+0x1c8>
    64c4:	01000584 	movi	r4,22
    64c8:	19000426 	beq	r3,r4,64dc <__sflush_r+0x1c8>
    64cc:	88c0030b 	ldhu	r3,12(r17)
    64d0:	18c01014 	ori	r3,r3,64
    64d4:	88c0030d 	sth	r3,12(r17)
    64d8:	003fc306 	br	63e8 <__alt_mem_onchip_memory2_0+0xf8005358>
    64dc:	8880030b 	ldhu	r2,12(r17)
    64e0:	88c00417 	ldw	r3,16(r17)
    64e4:	88000115 	stw	zero,4(r17)
    64e8:	10bdffcc 	andi	r2,r2,63487
    64ec:	8880030d 	sth	r2,12(r17)
    64f0:	88c00015 	stw	r3,0(r17)
    64f4:	003fb306 	br	63c4 <__alt_mem_onchip_memory2_0+0xf8005334>
    64f8:	98800017 	ldw	r2,0(r19)
    64fc:	103fea26 	beq	r2,zero,64a8 <__alt_mem_onchip_memory2_0+0xf8005418>
    6500:	00c00744 	movi	r3,29
    6504:	10c00226 	beq	r2,r3,6510 <__sflush_r+0x1fc>
    6508:	00c00584 	movi	r3,22
    650c:	10c0031e 	bne	r2,r3,651c <__sflush_r+0x208>
    6510:	9c000015 	stw	r16,0(r19)
    6514:	0005883a 	mov	r2,zero
    6518:	003fb306 	br	63e8 <__alt_mem_onchip_memory2_0+0xf8005358>
    651c:	88c0030b 	ldhu	r3,12(r17)
    6520:	3005883a 	mov	r2,r6
    6524:	18c01014 	ori	r3,r3,64
    6528:	88c0030d 	sth	r3,12(r17)
    652c:	003fae06 	br	63e8 <__alt_mem_onchip_memory2_0+0xf8005358>

00006530 <_fflush_r>:
    6530:	defffd04 	addi	sp,sp,-12
    6534:	dc000115 	stw	r16,4(sp)
    6538:	dfc00215 	stw	ra,8(sp)
    653c:	2021883a 	mov	r16,r4
    6540:	20000226 	beq	r4,zero,654c <_fflush_r+0x1c>
    6544:	20800e17 	ldw	r2,56(r4)
    6548:	10000c26 	beq	r2,zero,657c <_fflush_r+0x4c>
    654c:	2880030f 	ldh	r2,12(r5)
    6550:	1000051e 	bne	r2,zero,6568 <_fflush_r+0x38>
    6554:	0005883a 	mov	r2,zero
    6558:	dfc00217 	ldw	ra,8(sp)
    655c:	dc000117 	ldw	r16,4(sp)
    6560:	dec00304 	addi	sp,sp,12
    6564:	f800283a 	ret
    6568:	8009883a 	mov	r4,r16
    656c:	dfc00217 	ldw	ra,8(sp)
    6570:	dc000117 	ldw	r16,4(sp)
    6574:	dec00304 	addi	sp,sp,12
    6578:	00063141 	jmpi	6314 <__sflush_r>
    657c:	d9400015 	stw	r5,0(sp)
    6580:	000691c0 	call	691c <__sinit>
    6584:	d9400017 	ldw	r5,0(sp)
    6588:	003ff006 	br	654c <__alt_mem_onchip_memory2_0+0xf80054bc>

0000658c <fflush>:
    658c:	20000526 	beq	r4,zero,65a4 <fflush+0x18>
    6590:	00800074 	movhi	r2,1
    6594:	10900d04 	addi	r2,r2,16436
    6598:	200b883a 	mov	r5,r4
    659c:	11000017 	ldw	r4,0(r2)
    65a0:	00065301 	jmpi	6530 <_fflush_r>
    65a4:	00800074 	movhi	r2,1
    65a8:	10900c04 	addi	r2,r2,16432
    65ac:	11000017 	ldw	r4,0(r2)
    65b0:	01400034 	movhi	r5,0
    65b4:	29594c04 	addi	r5,r5,25904
    65b8:	000732c1 	jmpi	732c <_fwalk_reent>

000065bc <__fp_unlock>:
    65bc:	0005883a 	mov	r2,zero
    65c0:	f800283a 	ret

000065c4 <_cleanup_r>:
    65c4:	01400074 	movhi	r5,1
    65c8:	296d3204 	addi	r5,r5,-19256
    65cc:	000732c1 	jmpi	732c <_fwalk_reent>

000065d0 <__sinit.part.1>:
    65d0:	defff704 	addi	sp,sp,-36
    65d4:	00c00034 	movhi	r3,0
    65d8:	dfc00815 	stw	ra,32(sp)
    65dc:	ddc00715 	stw	r23,28(sp)
    65e0:	dd800615 	stw	r22,24(sp)
    65e4:	dd400515 	stw	r21,20(sp)
    65e8:	dd000415 	stw	r20,16(sp)
    65ec:	dcc00315 	stw	r19,12(sp)
    65f0:	dc800215 	stw	r18,8(sp)
    65f4:	dc400115 	stw	r17,4(sp)
    65f8:	dc000015 	stw	r16,0(sp)
    65fc:	18d97104 	addi	r3,r3,26052
    6600:	24000117 	ldw	r16,4(r4)
    6604:	20c00f15 	stw	r3,60(r4)
    6608:	2080bb04 	addi	r2,r4,748
    660c:	00c000c4 	movi	r3,3
    6610:	20c0b915 	stw	r3,740(r4)
    6614:	2080ba15 	stw	r2,744(r4)
    6618:	2000b815 	stw	zero,736(r4)
    661c:	05c00204 	movi	r23,8
    6620:	00800104 	movi	r2,4
    6624:	2025883a 	mov	r18,r4
    6628:	b80d883a 	mov	r6,r23
    662c:	81001704 	addi	r4,r16,92
    6630:	000b883a 	mov	r5,zero
    6634:	80000015 	stw	zero,0(r16)
    6638:	80000115 	stw	zero,4(r16)
    663c:	80000215 	stw	zero,8(r16)
    6640:	8080030d 	sth	r2,12(r16)
    6644:	80001915 	stw	zero,100(r16)
    6648:	8000038d 	sth	zero,14(r16)
    664c:	80000415 	stw	zero,16(r16)
    6650:	80000515 	stw	zero,20(r16)
    6654:	80000615 	stw	zero,24(r16)
    6658:	000821c0 	call	821c <memset>
    665c:	05800074 	movhi	r22,1
    6660:	94400217 	ldw	r17,8(r18)
    6664:	05400074 	movhi	r21,1
    6668:	05000074 	movhi	r20,1
    666c:	04c00074 	movhi	r19,1
    6670:	b5a68a04 	addi	r22,r22,-26072
    6674:	ad66a104 	addi	r21,r21,-25980
    6678:	a526c004 	addi	r20,r20,-25856
    667c:	9ce6d704 	addi	r19,r19,-25764
    6680:	85800815 	stw	r22,32(r16)
    6684:	85400915 	stw	r21,36(r16)
    6688:	85000a15 	stw	r20,40(r16)
    668c:	84c00b15 	stw	r19,44(r16)
    6690:	84000715 	stw	r16,28(r16)
    6694:	00800284 	movi	r2,10
    6698:	8880030d 	sth	r2,12(r17)
    669c:	00800044 	movi	r2,1
    66a0:	b80d883a 	mov	r6,r23
    66a4:	89001704 	addi	r4,r17,92
    66a8:	000b883a 	mov	r5,zero
    66ac:	88000015 	stw	zero,0(r17)
    66b0:	88000115 	stw	zero,4(r17)
    66b4:	88000215 	stw	zero,8(r17)
    66b8:	88001915 	stw	zero,100(r17)
    66bc:	8880038d 	sth	r2,14(r17)
    66c0:	88000415 	stw	zero,16(r17)
    66c4:	88000515 	stw	zero,20(r17)
    66c8:	88000615 	stw	zero,24(r17)
    66cc:	000821c0 	call	821c <memset>
    66d0:	94000317 	ldw	r16,12(r18)
    66d4:	00800484 	movi	r2,18
    66d8:	8c400715 	stw	r17,28(r17)
    66dc:	8d800815 	stw	r22,32(r17)
    66e0:	8d400915 	stw	r21,36(r17)
    66e4:	8d000a15 	stw	r20,40(r17)
    66e8:	8cc00b15 	stw	r19,44(r17)
    66ec:	8080030d 	sth	r2,12(r16)
    66f0:	00800084 	movi	r2,2
    66f4:	80000015 	stw	zero,0(r16)
    66f8:	80000115 	stw	zero,4(r16)
    66fc:	80000215 	stw	zero,8(r16)
    6700:	80001915 	stw	zero,100(r16)
    6704:	8080038d 	sth	r2,14(r16)
    6708:	80000415 	stw	zero,16(r16)
    670c:	80000515 	stw	zero,20(r16)
    6710:	80000615 	stw	zero,24(r16)
    6714:	b80d883a 	mov	r6,r23
    6718:	000b883a 	mov	r5,zero
    671c:	81001704 	addi	r4,r16,92
    6720:	000821c0 	call	821c <memset>
    6724:	00800044 	movi	r2,1
    6728:	84000715 	stw	r16,28(r16)
    672c:	85800815 	stw	r22,32(r16)
    6730:	85400915 	stw	r21,36(r16)
    6734:	85000a15 	stw	r20,40(r16)
    6738:	84c00b15 	stw	r19,44(r16)
    673c:	90800e15 	stw	r2,56(r18)
    6740:	dfc00817 	ldw	ra,32(sp)
    6744:	ddc00717 	ldw	r23,28(sp)
    6748:	dd800617 	ldw	r22,24(sp)
    674c:	dd400517 	ldw	r21,20(sp)
    6750:	dd000417 	ldw	r20,16(sp)
    6754:	dcc00317 	ldw	r19,12(sp)
    6758:	dc800217 	ldw	r18,8(sp)
    675c:	dc400117 	ldw	r17,4(sp)
    6760:	dc000017 	ldw	r16,0(sp)
    6764:	dec00904 	addi	sp,sp,36
    6768:	f800283a 	ret

0000676c <__fp_lock>:
    676c:	0005883a 	mov	r2,zero
    6770:	f800283a 	ret

00006774 <__sfmoreglue>:
    6774:	defffc04 	addi	sp,sp,-16
    6778:	dc800215 	stw	r18,8(sp)
    677c:	2825883a 	mov	r18,r5
    6780:	dc000015 	stw	r16,0(sp)
    6784:	01401a04 	movi	r5,104
    6788:	2021883a 	mov	r16,r4
    678c:	913fffc4 	addi	r4,r18,-1
    6790:	dfc00315 	stw	ra,12(sp)
    6794:	dc400115 	stw	r17,4(sp)
    6798:	000c9f80 	call	c9f8 <__mulsi3>
    679c:	8009883a 	mov	r4,r16
    67a0:	11401d04 	addi	r5,r2,116
    67a4:	1023883a 	mov	r17,r2
    67a8:	00076880 	call	7688 <_malloc_r>
    67ac:	1021883a 	mov	r16,r2
    67b0:	10000726 	beq	r2,zero,67d0 <__sfmoreglue+0x5c>
    67b4:	11000304 	addi	r4,r2,12
    67b8:	10000015 	stw	zero,0(r2)
    67bc:	14800115 	stw	r18,4(r2)
    67c0:	11000215 	stw	r4,8(r2)
    67c4:	89801a04 	addi	r6,r17,104
    67c8:	000b883a 	mov	r5,zero
    67cc:	000821c0 	call	821c <memset>
    67d0:	8005883a 	mov	r2,r16
    67d4:	dfc00317 	ldw	ra,12(sp)
    67d8:	dc800217 	ldw	r18,8(sp)
    67dc:	dc400117 	ldw	r17,4(sp)
    67e0:	dc000017 	ldw	r16,0(sp)
    67e4:	dec00404 	addi	sp,sp,16
    67e8:	f800283a 	ret

000067ec <__sfp>:
    67ec:	defffb04 	addi	sp,sp,-20
    67f0:	dc000015 	stw	r16,0(sp)
    67f4:	04000074 	movhi	r16,1
    67f8:	84100c04 	addi	r16,r16,16432
    67fc:	dcc00315 	stw	r19,12(sp)
    6800:	2027883a 	mov	r19,r4
    6804:	81000017 	ldw	r4,0(r16)
    6808:	dfc00415 	stw	ra,16(sp)
    680c:	dc800215 	stw	r18,8(sp)
    6810:	20800e17 	ldw	r2,56(r4)
    6814:	dc400115 	stw	r17,4(sp)
    6818:	1000021e 	bne	r2,zero,6824 <__sfp+0x38>
    681c:	00065d00 	call	65d0 <__sinit.part.1>
    6820:	81000017 	ldw	r4,0(r16)
    6824:	2480b804 	addi	r18,r4,736
    6828:	047fffc4 	movi	r17,-1
    682c:	91000117 	ldw	r4,4(r18)
    6830:	94000217 	ldw	r16,8(r18)
    6834:	213fffc4 	addi	r4,r4,-1
    6838:	20000a16 	blt	r4,zero,6864 <__sfp+0x78>
    683c:	8080030f 	ldh	r2,12(r16)
    6840:	10000c26 	beq	r2,zero,6874 <__sfp+0x88>
    6844:	80c01d04 	addi	r3,r16,116
    6848:	00000206 	br	6854 <__sfp+0x68>
    684c:	18bfe60f 	ldh	r2,-104(r3)
    6850:	10000826 	beq	r2,zero,6874 <__sfp+0x88>
    6854:	213fffc4 	addi	r4,r4,-1
    6858:	1c3ffd04 	addi	r16,r3,-12
    685c:	18c01a04 	addi	r3,r3,104
    6860:	247ffa1e 	bne	r4,r17,684c <__alt_mem_onchip_memory2_0+0xf80057bc>
    6864:	90800017 	ldw	r2,0(r18)
    6868:	10001d26 	beq	r2,zero,68e0 <__sfp+0xf4>
    686c:	1025883a 	mov	r18,r2
    6870:	003fee06 	br	682c <__alt_mem_onchip_memory2_0+0xf800579c>
    6874:	00bfffc4 	movi	r2,-1
    6878:	8080038d 	sth	r2,14(r16)
    687c:	00800044 	movi	r2,1
    6880:	8080030d 	sth	r2,12(r16)
    6884:	80001915 	stw	zero,100(r16)
    6888:	80000015 	stw	zero,0(r16)
    688c:	80000215 	stw	zero,8(r16)
    6890:	80000115 	stw	zero,4(r16)
    6894:	80000415 	stw	zero,16(r16)
    6898:	80000515 	stw	zero,20(r16)
    689c:	80000615 	stw	zero,24(r16)
    68a0:	01800204 	movi	r6,8
    68a4:	000b883a 	mov	r5,zero
    68a8:	81001704 	addi	r4,r16,92
    68ac:	000821c0 	call	821c <memset>
    68b0:	8005883a 	mov	r2,r16
    68b4:	80000c15 	stw	zero,48(r16)
    68b8:	80000d15 	stw	zero,52(r16)
    68bc:	80001115 	stw	zero,68(r16)
    68c0:	80001215 	stw	zero,72(r16)
    68c4:	dfc00417 	ldw	ra,16(sp)
    68c8:	dcc00317 	ldw	r19,12(sp)
    68cc:	dc800217 	ldw	r18,8(sp)
    68d0:	dc400117 	ldw	r17,4(sp)
    68d4:	dc000017 	ldw	r16,0(sp)
    68d8:	dec00504 	addi	sp,sp,20
    68dc:	f800283a 	ret
    68e0:	01400104 	movi	r5,4
    68e4:	9809883a 	mov	r4,r19
    68e8:	00067740 	call	6774 <__sfmoreglue>
    68ec:	90800015 	stw	r2,0(r18)
    68f0:	103fde1e 	bne	r2,zero,686c <__alt_mem_onchip_memory2_0+0xf80057dc>
    68f4:	00800304 	movi	r2,12
    68f8:	98800015 	stw	r2,0(r19)
    68fc:	0005883a 	mov	r2,zero
    6900:	003ff006 	br	68c4 <__alt_mem_onchip_memory2_0+0xf8005834>

00006904 <_cleanup>:
    6904:	00800074 	movhi	r2,1
    6908:	10900c04 	addi	r2,r2,16432
    690c:	11000017 	ldw	r4,0(r2)
    6910:	01400074 	movhi	r5,1
    6914:	296d3204 	addi	r5,r5,-19256
    6918:	000732c1 	jmpi	732c <_fwalk_reent>

0000691c <__sinit>:
    691c:	20800e17 	ldw	r2,56(r4)
    6920:	10000126 	beq	r2,zero,6928 <__sinit+0xc>
    6924:	f800283a 	ret
    6928:	00065d01 	jmpi	65d0 <__sinit.part.1>

0000692c <__sfp_lock_acquire>:
    692c:	f800283a 	ret

00006930 <__sfp_lock_release>:
    6930:	f800283a 	ret

00006934 <__sinit_lock_acquire>:
    6934:	f800283a 	ret

00006938 <__sinit_lock_release>:
    6938:	f800283a 	ret

0000693c <__fp_lock_all>:
    693c:	00800074 	movhi	r2,1
    6940:	10900d04 	addi	r2,r2,16436
    6944:	11000017 	ldw	r4,0(r2)
    6948:	01400034 	movhi	r5,0
    694c:	2959db04 	addi	r5,r5,26476
    6950:	00072681 	jmpi	7268 <_fwalk>

00006954 <__fp_unlock_all>:
    6954:	00800074 	movhi	r2,1
    6958:	10900d04 	addi	r2,r2,16436
    695c:	11000017 	ldw	r4,0(r2)
    6960:	01400034 	movhi	r5,0
    6964:	29596f04 	addi	r5,r5,26044
    6968:	00072681 	jmpi	7268 <_fwalk>

0000696c <_malloc_trim_r>:
    696c:	defffb04 	addi	sp,sp,-20
    6970:	dcc00315 	stw	r19,12(sp)
    6974:	04c00074 	movhi	r19,1
    6978:	dc800215 	stw	r18,8(sp)
    697c:	dc400115 	stw	r17,4(sp)
    6980:	dc000015 	stw	r16,0(sp)
    6984:	dfc00415 	stw	ra,16(sp)
    6988:	2821883a 	mov	r16,r5
    698c:	9cca8804 	addi	r19,r19,10784
    6990:	2025883a 	mov	r18,r4
    6994:	000f8600 	call	f860 <__malloc_lock>
    6998:	98800217 	ldw	r2,8(r19)
    699c:	14400117 	ldw	r17,4(r2)
    69a0:	00bfff04 	movi	r2,-4
    69a4:	88a2703a 	and	r17,r17,r2
    69a8:	8c21c83a 	sub	r16,r17,r16
    69ac:	8403fbc4 	addi	r16,r16,4079
    69b0:	8020d33a 	srli	r16,r16,12
    69b4:	0083ffc4 	movi	r2,4095
    69b8:	843fffc4 	addi	r16,r16,-1
    69bc:	8020933a 	slli	r16,r16,12
    69c0:	1400060e 	bge	r2,r16,69dc <_malloc_trim_r+0x70>
    69c4:	000b883a 	mov	r5,zero
    69c8:	9009883a 	mov	r4,r18
    69cc:	00099d40 	call	99d4 <_sbrk_r>
    69d0:	98c00217 	ldw	r3,8(r19)
    69d4:	1c47883a 	add	r3,r3,r17
    69d8:	10c00a26 	beq	r2,r3,6a04 <_malloc_trim_r+0x98>
    69dc:	9009883a 	mov	r4,r18
    69e0:	000f8840 	call	f884 <__malloc_unlock>
    69e4:	0005883a 	mov	r2,zero
    69e8:	dfc00417 	ldw	ra,16(sp)
    69ec:	dcc00317 	ldw	r19,12(sp)
    69f0:	dc800217 	ldw	r18,8(sp)
    69f4:	dc400117 	ldw	r17,4(sp)
    69f8:	dc000017 	ldw	r16,0(sp)
    69fc:	dec00504 	addi	sp,sp,20
    6a00:	f800283a 	ret
    6a04:	040bc83a 	sub	r5,zero,r16
    6a08:	9009883a 	mov	r4,r18
    6a0c:	00099d40 	call	99d4 <_sbrk_r>
    6a10:	00ffffc4 	movi	r3,-1
    6a14:	10c00d26 	beq	r2,r3,6a4c <_malloc_trim_r+0xe0>
    6a18:	00c00074 	movhi	r3,1
    6a1c:	18d6e604 	addi	r3,r3,23448
    6a20:	18800017 	ldw	r2,0(r3)
    6a24:	99000217 	ldw	r4,8(r19)
    6a28:	8c23c83a 	sub	r17,r17,r16
    6a2c:	8c400054 	ori	r17,r17,1
    6a30:	1421c83a 	sub	r16,r2,r16
    6a34:	24400115 	stw	r17,4(r4)
    6a38:	9009883a 	mov	r4,r18
    6a3c:	1c000015 	stw	r16,0(r3)
    6a40:	000f8840 	call	f884 <__malloc_unlock>
    6a44:	00800044 	movi	r2,1
    6a48:	003fe706 	br	69e8 <__alt_mem_onchip_memory2_0+0xf8005958>
    6a4c:	000b883a 	mov	r5,zero
    6a50:	9009883a 	mov	r4,r18
    6a54:	00099d40 	call	99d4 <_sbrk_r>
    6a58:	99000217 	ldw	r4,8(r19)
    6a5c:	014003c4 	movi	r5,15
    6a60:	1107c83a 	sub	r3,r2,r4
    6a64:	28ffdd0e 	bge	r5,r3,69dc <__alt_mem_onchip_memory2_0+0xf800594c>
    6a68:	01400074 	movhi	r5,1
    6a6c:	29500f04 	addi	r5,r5,16444
    6a70:	29400017 	ldw	r5,0(r5)
    6a74:	18c00054 	ori	r3,r3,1
    6a78:	20c00115 	stw	r3,4(r4)
    6a7c:	00c00074 	movhi	r3,1
    6a80:	1145c83a 	sub	r2,r2,r5
    6a84:	18d6e604 	addi	r3,r3,23448
    6a88:	18800015 	stw	r2,0(r3)
    6a8c:	003fd306 	br	69dc <__alt_mem_onchip_memory2_0+0xf800594c>

00006a90 <_free_r>:
    6a90:	28004126 	beq	r5,zero,6b98 <_free_r+0x108>
    6a94:	defffd04 	addi	sp,sp,-12
    6a98:	dc400115 	stw	r17,4(sp)
    6a9c:	dc000015 	stw	r16,0(sp)
    6aa0:	2023883a 	mov	r17,r4
    6aa4:	2821883a 	mov	r16,r5
    6aa8:	dfc00215 	stw	ra,8(sp)
    6aac:	000f8600 	call	f860 <__malloc_lock>
    6ab0:	81ffff17 	ldw	r7,-4(r16)
    6ab4:	00bfff84 	movi	r2,-2
    6ab8:	01000074 	movhi	r4,1
    6abc:	81bffe04 	addi	r6,r16,-8
    6ac0:	3884703a 	and	r2,r7,r2
    6ac4:	210a8804 	addi	r4,r4,10784
    6ac8:	308b883a 	add	r5,r6,r2
    6acc:	2a400117 	ldw	r9,4(r5)
    6ad0:	22000217 	ldw	r8,8(r4)
    6ad4:	00ffff04 	movi	r3,-4
    6ad8:	48c6703a 	and	r3,r9,r3
    6adc:	2a005726 	beq	r5,r8,6c3c <_free_r+0x1ac>
    6ae0:	28c00115 	stw	r3,4(r5)
    6ae4:	39c0004c 	andi	r7,r7,1
    6ae8:	3800091e 	bne	r7,zero,6b10 <_free_r+0x80>
    6aec:	823ffe17 	ldw	r8,-8(r16)
    6af0:	22400204 	addi	r9,r4,8
    6af4:	320dc83a 	sub	r6,r6,r8
    6af8:	31c00217 	ldw	r7,8(r6)
    6afc:	1205883a 	add	r2,r2,r8
    6b00:	3a406526 	beq	r7,r9,6c98 <_free_r+0x208>
    6b04:	32000317 	ldw	r8,12(r6)
    6b08:	3a000315 	stw	r8,12(r7)
    6b0c:	41c00215 	stw	r7,8(r8)
    6b10:	28cf883a 	add	r7,r5,r3
    6b14:	39c00117 	ldw	r7,4(r7)
    6b18:	39c0004c 	andi	r7,r7,1
    6b1c:	38003a26 	beq	r7,zero,6c08 <_free_r+0x178>
    6b20:	10c00054 	ori	r3,r2,1
    6b24:	30c00115 	stw	r3,4(r6)
    6b28:	3087883a 	add	r3,r6,r2
    6b2c:	18800015 	stw	r2,0(r3)
    6b30:	00c07fc4 	movi	r3,511
    6b34:	18801936 	bltu	r3,r2,6b9c <_free_r+0x10c>
    6b38:	1004d0fa 	srli	r2,r2,3
    6b3c:	01c00044 	movi	r7,1
    6b40:	21400117 	ldw	r5,4(r4)
    6b44:	10c00044 	addi	r3,r2,1
    6b48:	18c7883a 	add	r3,r3,r3
    6b4c:	1005d0ba 	srai	r2,r2,2
    6b50:	18c7883a 	add	r3,r3,r3
    6b54:	18c7883a 	add	r3,r3,r3
    6b58:	1907883a 	add	r3,r3,r4
    6b5c:	3884983a 	sll	r2,r7,r2
    6b60:	19c00017 	ldw	r7,0(r3)
    6b64:	1a3ffe04 	addi	r8,r3,-8
    6b68:	1144b03a 	or	r2,r2,r5
    6b6c:	32000315 	stw	r8,12(r6)
    6b70:	31c00215 	stw	r7,8(r6)
    6b74:	20800115 	stw	r2,4(r4)
    6b78:	19800015 	stw	r6,0(r3)
    6b7c:	39800315 	stw	r6,12(r7)
    6b80:	8809883a 	mov	r4,r17
    6b84:	dfc00217 	ldw	ra,8(sp)
    6b88:	dc400117 	ldw	r17,4(sp)
    6b8c:	dc000017 	ldw	r16,0(sp)
    6b90:	dec00304 	addi	sp,sp,12
    6b94:	000f8841 	jmpi	f884 <__malloc_unlock>
    6b98:	f800283a 	ret
    6b9c:	100ad27a 	srli	r5,r2,9
    6ba0:	00c00104 	movi	r3,4
    6ba4:	19404a36 	bltu	r3,r5,6cd0 <_free_r+0x240>
    6ba8:	100ad1ba 	srli	r5,r2,6
    6bac:	28c00e44 	addi	r3,r5,57
    6bb0:	18c7883a 	add	r3,r3,r3
    6bb4:	29400e04 	addi	r5,r5,56
    6bb8:	18c7883a 	add	r3,r3,r3
    6bbc:	18c7883a 	add	r3,r3,r3
    6bc0:	1909883a 	add	r4,r3,r4
    6bc4:	20c00017 	ldw	r3,0(r4)
    6bc8:	01c00074 	movhi	r7,1
    6bcc:	213ffe04 	addi	r4,r4,-8
    6bd0:	39ca8804 	addi	r7,r7,10784
    6bd4:	20c04426 	beq	r4,r3,6ce8 <_free_r+0x258>
    6bd8:	01ffff04 	movi	r7,-4
    6bdc:	19400117 	ldw	r5,4(r3)
    6be0:	29ca703a 	and	r5,r5,r7
    6be4:	1140022e 	bgeu	r2,r5,6bf0 <_free_r+0x160>
    6be8:	18c00217 	ldw	r3,8(r3)
    6bec:	20fffb1e 	bne	r4,r3,6bdc <__alt_mem_onchip_memory2_0+0xf8005b4c>
    6bf0:	19000317 	ldw	r4,12(r3)
    6bf4:	31000315 	stw	r4,12(r6)
    6bf8:	30c00215 	stw	r3,8(r6)
    6bfc:	21800215 	stw	r6,8(r4)
    6c00:	19800315 	stw	r6,12(r3)
    6c04:	003fde06 	br	6b80 <__alt_mem_onchip_memory2_0+0xf8005af0>
    6c08:	29c00217 	ldw	r7,8(r5)
    6c0c:	10c5883a 	add	r2,r2,r3
    6c10:	00c00074 	movhi	r3,1
    6c14:	18ca8a04 	addi	r3,r3,10792
    6c18:	38c03b26 	beq	r7,r3,6d08 <_free_r+0x278>
    6c1c:	2a000317 	ldw	r8,12(r5)
    6c20:	11400054 	ori	r5,r2,1
    6c24:	3087883a 	add	r3,r6,r2
    6c28:	3a000315 	stw	r8,12(r7)
    6c2c:	41c00215 	stw	r7,8(r8)
    6c30:	31400115 	stw	r5,4(r6)
    6c34:	18800015 	stw	r2,0(r3)
    6c38:	003fbd06 	br	6b30 <__alt_mem_onchip_memory2_0+0xf8005aa0>
    6c3c:	39c0004c 	andi	r7,r7,1
    6c40:	10c5883a 	add	r2,r2,r3
    6c44:	3800071e 	bne	r7,zero,6c64 <_free_r+0x1d4>
    6c48:	81fffe17 	ldw	r7,-8(r16)
    6c4c:	31cdc83a 	sub	r6,r6,r7
    6c50:	30c00317 	ldw	r3,12(r6)
    6c54:	31400217 	ldw	r5,8(r6)
    6c58:	11c5883a 	add	r2,r2,r7
    6c5c:	28c00315 	stw	r3,12(r5)
    6c60:	19400215 	stw	r5,8(r3)
    6c64:	10c00054 	ori	r3,r2,1
    6c68:	30c00115 	stw	r3,4(r6)
    6c6c:	00c00074 	movhi	r3,1
    6c70:	18d01004 	addi	r3,r3,16448
    6c74:	18c00017 	ldw	r3,0(r3)
    6c78:	21800215 	stw	r6,8(r4)
    6c7c:	10ffc036 	bltu	r2,r3,6b80 <__alt_mem_onchip_memory2_0+0xf8005af0>
    6c80:	00800074 	movhi	r2,1
    6c84:	1096dd04 	addi	r2,r2,23412
    6c88:	11400017 	ldw	r5,0(r2)
    6c8c:	8809883a 	mov	r4,r17
    6c90:	000696c0 	call	696c <_malloc_trim_r>
    6c94:	003fba06 	br	6b80 <__alt_mem_onchip_memory2_0+0xf8005af0>
    6c98:	28c9883a 	add	r4,r5,r3
    6c9c:	21000117 	ldw	r4,4(r4)
    6ca0:	2100004c 	andi	r4,r4,1
    6ca4:	2000391e 	bne	r4,zero,6d8c <_free_r+0x2fc>
    6ca8:	29c00217 	ldw	r7,8(r5)
    6cac:	29000317 	ldw	r4,12(r5)
    6cb0:	1885883a 	add	r2,r3,r2
    6cb4:	10c00054 	ori	r3,r2,1
    6cb8:	39000315 	stw	r4,12(r7)
    6cbc:	21c00215 	stw	r7,8(r4)
    6cc0:	30c00115 	stw	r3,4(r6)
    6cc4:	308d883a 	add	r6,r6,r2
    6cc8:	30800015 	stw	r2,0(r6)
    6ccc:	003fac06 	br	6b80 <__alt_mem_onchip_memory2_0+0xf8005af0>
    6cd0:	00c00504 	movi	r3,20
    6cd4:	19401536 	bltu	r3,r5,6d2c <_free_r+0x29c>
    6cd8:	28c01704 	addi	r3,r5,92
    6cdc:	18c7883a 	add	r3,r3,r3
    6ce0:	294016c4 	addi	r5,r5,91
    6ce4:	003fb406 	br	6bb8 <__alt_mem_onchip_memory2_0+0xf8005b28>
    6ce8:	280bd0ba 	srai	r5,r5,2
    6cec:	00c00044 	movi	r3,1
    6cf0:	38800117 	ldw	r2,4(r7)
    6cf4:	194a983a 	sll	r5,r3,r5
    6cf8:	2007883a 	mov	r3,r4
    6cfc:	2884b03a 	or	r2,r5,r2
    6d00:	38800115 	stw	r2,4(r7)
    6d04:	003fbb06 	br	6bf4 <__alt_mem_onchip_memory2_0+0xf8005b64>
    6d08:	21800515 	stw	r6,20(r4)
    6d0c:	21800415 	stw	r6,16(r4)
    6d10:	10c00054 	ori	r3,r2,1
    6d14:	31c00315 	stw	r7,12(r6)
    6d18:	31c00215 	stw	r7,8(r6)
    6d1c:	30c00115 	stw	r3,4(r6)
    6d20:	308d883a 	add	r6,r6,r2
    6d24:	30800015 	stw	r2,0(r6)
    6d28:	003f9506 	br	6b80 <__alt_mem_onchip_memory2_0+0xf8005af0>
    6d2c:	00c01504 	movi	r3,84
    6d30:	19400536 	bltu	r3,r5,6d48 <_free_r+0x2b8>
    6d34:	100ad33a 	srli	r5,r2,12
    6d38:	28c01bc4 	addi	r3,r5,111
    6d3c:	18c7883a 	add	r3,r3,r3
    6d40:	29401b84 	addi	r5,r5,110
    6d44:	003f9c06 	br	6bb8 <__alt_mem_onchip_memory2_0+0xf8005b28>
    6d48:	00c05504 	movi	r3,340
    6d4c:	19400536 	bltu	r3,r5,6d64 <_free_r+0x2d4>
    6d50:	100ad3fa 	srli	r5,r2,15
    6d54:	28c01e04 	addi	r3,r5,120
    6d58:	18c7883a 	add	r3,r3,r3
    6d5c:	29401dc4 	addi	r5,r5,119
    6d60:	003f9506 	br	6bb8 <__alt_mem_onchip_memory2_0+0xf8005b28>
    6d64:	00c15504 	movi	r3,1364
    6d68:	19400536 	bltu	r3,r5,6d80 <_free_r+0x2f0>
    6d6c:	100ad4ba 	srli	r5,r2,18
    6d70:	28c01f44 	addi	r3,r5,125
    6d74:	18c7883a 	add	r3,r3,r3
    6d78:	29401f04 	addi	r5,r5,124
    6d7c:	003f8e06 	br	6bb8 <__alt_mem_onchip_memory2_0+0xf8005b28>
    6d80:	00c03f84 	movi	r3,254
    6d84:	01401f84 	movi	r5,126
    6d88:	003f8b06 	br	6bb8 <__alt_mem_onchip_memory2_0+0xf8005b28>
    6d8c:	10c00054 	ori	r3,r2,1
    6d90:	30c00115 	stw	r3,4(r6)
    6d94:	308d883a 	add	r6,r6,r2
    6d98:	30800015 	stw	r2,0(r6)
    6d9c:	003f7806 	br	6b80 <__alt_mem_onchip_memory2_0+0xf8005af0>

00006da0 <__sfvwrite_r>:
    6da0:	30800217 	ldw	r2,8(r6)
    6da4:	10006726 	beq	r2,zero,6f44 <__sfvwrite_r+0x1a4>
    6da8:	28c0030b 	ldhu	r3,12(r5)
    6dac:	defff404 	addi	sp,sp,-48
    6db0:	dd400715 	stw	r21,28(sp)
    6db4:	dd000615 	stw	r20,24(sp)
    6db8:	dc000215 	stw	r16,8(sp)
    6dbc:	dfc00b15 	stw	ra,44(sp)
    6dc0:	df000a15 	stw	fp,40(sp)
    6dc4:	ddc00915 	stw	r23,36(sp)
    6dc8:	dd800815 	stw	r22,32(sp)
    6dcc:	dcc00515 	stw	r19,20(sp)
    6dd0:	dc800415 	stw	r18,16(sp)
    6dd4:	dc400315 	stw	r17,12(sp)
    6dd8:	1880020c 	andi	r2,r3,8
    6ddc:	2821883a 	mov	r16,r5
    6de0:	202b883a 	mov	r21,r4
    6de4:	3029883a 	mov	r20,r6
    6de8:	10002726 	beq	r2,zero,6e88 <__sfvwrite_r+0xe8>
    6dec:	28800417 	ldw	r2,16(r5)
    6df0:	10002526 	beq	r2,zero,6e88 <__sfvwrite_r+0xe8>
    6df4:	1880008c 	andi	r2,r3,2
    6df8:	a4400017 	ldw	r17,0(r20)
    6dfc:	10002a26 	beq	r2,zero,6ea8 <__sfvwrite_r+0x108>
    6e00:	05a00034 	movhi	r22,32768
    6e04:	0027883a 	mov	r19,zero
    6e08:	0025883a 	mov	r18,zero
    6e0c:	b5bf0004 	addi	r22,r22,-1024
    6e10:	980d883a 	mov	r6,r19
    6e14:	a809883a 	mov	r4,r21
    6e18:	90004626 	beq	r18,zero,6f34 <__sfvwrite_r+0x194>
    6e1c:	900f883a 	mov	r7,r18
    6e20:	b480022e 	bgeu	r22,r18,6e2c <__sfvwrite_r+0x8c>
    6e24:	01e00034 	movhi	r7,32768
    6e28:	39ff0004 	addi	r7,r7,-1024
    6e2c:	80800917 	ldw	r2,36(r16)
    6e30:	81400717 	ldw	r5,28(r16)
    6e34:	103ee83a 	callr	r2
    6e38:	00805a0e 	bge	zero,r2,6fa4 <__sfvwrite_r+0x204>
    6e3c:	a0c00217 	ldw	r3,8(r20)
    6e40:	98a7883a 	add	r19,r19,r2
    6e44:	90a5c83a 	sub	r18,r18,r2
    6e48:	1885c83a 	sub	r2,r3,r2
    6e4c:	a0800215 	stw	r2,8(r20)
    6e50:	103fef1e 	bne	r2,zero,6e10 <__alt_mem_onchip_memory2_0+0xf8005d80>
    6e54:	0005883a 	mov	r2,zero
    6e58:	dfc00b17 	ldw	ra,44(sp)
    6e5c:	df000a17 	ldw	fp,40(sp)
    6e60:	ddc00917 	ldw	r23,36(sp)
    6e64:	dd800817 	ldw	r22,32(sp)
    6e68:	dd400717 	ldw	r21,28(sp)
    6e6c:	dd000617 	ldw	r20,24(sp)
    6e70:	dcc00517 	ldw	r19,20(sp)
    6e74:	dc800417 	ldw	r18,16(sp)
    6e78:	dc400317 	ldw	r17,12(sp)
    6e7c:	dc000217 	ldw	r16,8(sp)
    6e80:	dec00c04 	addi	sp,sp,48
    6e84:	f800283a 	ret
    6e88:	800b883a 	mov	r5,r16
    6e8c:	a809883a 	mov	r4,r21
    6e90:	00049100 	call	4910 <__swsetup_r>
    6e94:	1000ee1e 	bne	r2,zero,7250 <__sfvwrite_r+0x4b0>
    6e98:	80c0030b 	ldhu	r3,12(r16)
    6e9c:	a4400017 	ldw	r17,0(r20)
    6ea0:	1880008c 	andi	r2,r3,2
    6ea4:	103fd61e 	bne	r2,zero,6e00 <__alt_mem_onchip_memory2_0+0xf8005d70>
    6ea8:	1880004c 	andi	r2,r3,1
    6eac:	1000421e 	bne	r2,zero,6fb8 <__sfvwrite_r+0x218>
    6eb0:	0039883a 	mov	fp,zero
    6eb4:	0025883a 	mov	r18,zero
    6eb8:	90001a26 	beq	r18,zero,6f24 <__sfvwrite_r+0x184>
    6ebc:	1880800c 	andi	r2,r3,512
    6ec0:	84c00217 	ldw	r19,8(r16)
    6ec4:	10002126 	beq	r2,zero,6f4c <__sfvwrite_r+0x1ac>
    6ec8:	982f883a 	mov	r23,r19
    6ecc:	94c09636 	bltu	r18,r19,7128 <__sfvwrite_r+0x388>
    6ed0:	1881200c 	andi	r2,r3,1152
    6ed4:	1000a11e 	bne	r2,zero,715c <__sfvwrite_r+0x3bc>
    6ed8:	81000017 	ldw	r4,0(r16)
    6edc:	b80d883a 	mov	r6,r23
    6ee0:	e00b883a 	mov	r5,fp
    6ee4:	00080c00 	call	80c0 <memmove>
    6ee8:	80c00217 	ldw	r3,8(r16)
    6eec:	81000017 	ldw	r4,0(r16)
    6ef0:	9005883a 	mov	r2,r18
    6ef4:	1ce7c83a 	sub	r19,r3,r19
    6ef8:	25cf883a 	add	r7,r4,r23
    6efc:	84c00215 	stw	r19,8(r16)
    6f00:	81c00015 	stw	r7,0(r16)
    6f04:	a0c00217 	ldw	r3,8(r20)
    6f08:	e0b9883a 	add	fp,fp,r2
    6f0c:	90a5c83a 	sub	r18,r18,r2
    6f10:	18a7c83a 	sub	r19,r3,r2
    6f14:	a4c00215 	stw	r19,8(r20)
    6f18:	983fce26 	beq	r19,zero,6e54 <__alt_mem_onchip_memory2_0+0xf8005dc4>
    6f1c:	80c0030b 	ldhu	r3,12(r16)
    6f20:	903fe61e 	bne	r18,zero,6ebc <__alt_mem_onchip_memory2_0+0xf8005e2c>
    6f24:	8f000017 	ldw	fp,0(r17)
    6f28:	8c800117 	ldw	r18,4(r17)
    6f2c:	8c400204 	addi	r17,r17,8
    6f30:	003fe106 	br	6eb8 <__alt_mem_onchip_memory2_0+0xf8005e28>
    6f34:	8cc00017 	ldw	r19,0(r17)
    6f38:	8c800117 	ldw	r18,4(r17)
    6f3c:	8c400204 	addi	r17,r17,8
    6f40:	003fb306 	br	6e10 <__alt_mem_onchip_memory2_0+0xf8005d80>
    6f44:	0005883a 	mov	r2,zero
    6f48:	f800283a 	ret
    6f4c:	81000017 	ldw	r4,0(r16)
    6f50:	80800417 	ldw	r2,16(r16)
    6f54:	11005a36 	bltu	r2,r4,70c0 <__sfvwrite_r+0x320>
    6f58:	85c00517 	ldw	r23,20(r16)
    6f5c:	95c05836 	bltu	r18,r23,70c0 <__sfvwrite_r+0x320>
    6f60:	00a00034 	movhi	r2,32768
    6f64:	10bfffc4 	addi	r2,r2,-1
    6f68:	9009883a 	mov	r4,r18
    6f6c:	1480012e 	bgeu	r2,r18,6f74 <__sfvwrite_r+0x1d4>
    6f70:	1009883a 	mov	r4,r2
    6f74:	b80b883a 	mov	r5,r23
    6f78:	000c8440 	call	c844 <__divsi3>
    6f7c:	b80b883a 	mov	r5,r23
    6f80:	1009883a 	mov	r4,r2
    6f84:	000c9f80 	call	c9f8 <__mulsi3>
    6f88:	81400717 	ldw	r5,28(r16)
    6f8c:	80c00917 	ldw	r3,36(r16)
    6f90:	100f883a 	mov	r7,r2
    6f94:	e00d883a 	mov	r6,fp
    6f98:	a809883a 	mov	r4,r21
    6f9c:	183ee83a 	callr	r3
    6fa0:	00bfd816 	blt	zero,r2,6f04 <__alt_mem_onchip_memory2_0+0xf8005e74>
    6fa4:	8080030b 	ldhu	r2,12(r16)
    6fa8:	10801014 	ori	r2,r2,64
    6fac:	8080030d 	sth	r2,12(r16)
    6fb0:	00bfffc4 	movi	r2,-1
    6fb4:	003fa806 	br	6e58 <__alt_mem_onchip_memory2_0+0xf8005dc8>
    6fb8:	0027883a 	mov	r19,zero
    6fbc:	0011883a 	mov	r8,zero
    6fc0:	0039883a 	mov	fp,zero
    6fc4:	0025883a 	mov	r18,zero
    6fc8:	90001f26 	beq	r18,zero,7048 <__sfvwrite_r+0x2a8>
    6fcc:	40005a26 	beq	r8,zero,7138 <__sfvwrite_r+0x398>
    6fd0:	982d883a 	mov	r22,r19
    6fd4:	94c0012e 	bgeu	r18,r19,6fdc <__sfvwrite_r+0x23c>
    6fd8:	902d883a 	mov	r22,r18
    6fdc:	81000017 	ldw	r4,0(r16)
    6fe0:	80800417 	ldw	r2,16(r16)
    6fe4:	b02f883a 	mov	r23,r22
    6fe8:	81c00517 	ldw	r7,20(r16)
    6fec:	1100032e 	bgeu	r2,r4,6ffc <__sfvwrite_r+0x25c>
    6ff0:	80c00217 	ldw	r3,8(r16)
    6ff4:	38c7883a 	add	r3,r7,r3
    6ff8:	1d801816 	blt	r3,r22,705c <__sfvwrite_r+0x2bc>
    6ffc:	b1c03e16 	blt	r22,r7,70f8 <__sfvwrite_r+0x358>
    7000:	80800917 	ldw	r2,36(r16)
    7004:	81400717 	ldw	r5,28(r16)
    7008:	e00d883a 	mov	r6,fp
    700c:	da000115 	stw	r8,4(sp)
    7010:	a809883a 	mov	r4,r21
    7014:	103ee83a 	callr	r2
    7018:	102f883a 	mov	r23,r2
    701c:	da000117 	ldw	r8,4(sp)
    7020:	00bfe00e 	bge	zero,r2,6fa4 <__alt_mem_onchip_memory2_0+0xf8005f14>
    7024:	9de7c83a 	sub	r19,r19,r23
    7028:	98001f26 	beq	r19,zero,70a8 <__sfvwrite_r+0x308>
    702c:	a0800217 	ldw	r2,8(r20)
    7030:	e5f9883a 	add	fp,fp,r23
    7034:	95e5c83a 	sub	r18,r18,r23
    7038:	15efc83a 	sub	r23,r2,r23
    703c:	a5c00215 	stw	r23,8(r20)
    7040:	b83f8426 	beq	r23,zero,6e54 <__alt_mem_onchip_memory2_0+0xf8005dc4>
    7044:	903fe11e 	bne	r18,zero,6fcc <__alt_mem_onchip_memory2_0+0xf8005f3c>
    7048:	8f000017 	ldw	fp,0(r17)
    704c:	8c800117 	ldw	r18,4(r17)
    7050:	0011883a 	mov	r8,zero
    7054:	8c400204 	addi	r17,r17,8
    7058:	003fdb06 	br	6fc8 <__alt_mem_onchip_memory2_0+0xf8005f38>
    705c:	180d883a 	mov	r6,r3
    7060:	e00b883a 	mov	r5,fp
    7064:	da000115 	stw	r8,4(sp)
    7068:	d8c00015 	stw	r3,0(sp)
    706c:	00080c00 	call	80c0 <memmove>
    7070:	d8c00017 	ldw	r3,0(sp)
    7074:	80800017 	ldw	r2,0(r16)
    7078:	800b883a 	mov	r5,r16
    707c:	a809883a 	mov	r4,r21
    7080:	10c5883a 	add	r2,r2,r3
    7084:	80800015 	stw	r2,0(r16)
    7088:	d8c00015 	stw	r3,0(sp)
    708c:	00065300 	call	6530 <_fflush_r>
    7090:	d8c00017 	ldw	r3,0(sp)
    7094:	da000117 	ldw	r8,4(sp)
    7098:	103fc21e 	bne	r2,zero,6fa4 <__alt_mem_onchip_memory2_0+0xf8005f14>
    709c:	182f883a 	mov	r23,r3
    70a0:	9de7c83a 	sub	r19,r19,r23
    70a4:	983fe11e 	bne	r19,zero,702c <__alt_mem_onchip_memory2_0+0xf8005f9c>
    70a8:	800b883a 	mov	r5,r16
    70ac:	a809883a 	mov	r4,r21
    70b0:	00065300 	call	6530 <_fflush_r>
    70b4:	103fbb1e 	bne	r2,zero,6fa4 <__alt_mem_onchip_memory2_0+0xf8005f14>
    70b8:	0011883a 	mov	r8,zero
    70bc:	003fdb06 	br	702c <__alt_mem_onchip_memory2_0+0xf8005f9c>
    70c0:	94c0012e 	bgeu	r18,r19,70c8 <__sfvwrite_r+0x328>
    70c4:	9027883a 	mov	r19,r18
    70c8:	980d883a 	mov	r6,r19
    70cc:	e00b883a 	mov	r5,fp
    70d0:	00080c00 	call	80c0 <memmove>
    70d4:	80800217 	ldw	r2,8(r16)
    70d8:	80c00017 	ldw	r3,0(r16)
    70dc:	14c5c83a 	sub	r2,r2,r19
    70e0:	1cc7883a 	add	r3,r3,r19
    70e4:	80800215 	stw	r2,8(r16)
    70e8:	80c00015 	stw	r3,0(r16)
    70ec:	10004326 	beq	r2,zero,71fc <__sfvwrite_r+0x45c>
    70f0:	9805883a 	mov	r2,r19
    70f4:	003f8306 	br	6f04 <__alt_mem_onchip_memory2_0+0xf8005e74>
    70f8:	b00d883a 	mov	r6,r22
    70fc:	e00b883a 	mov	r5,fp
    7100:	da000115 	stw	r8,4(sp)
    7104:	00080c00 	call	80c0 <memmove>
    7108:	80800217 	ldw	r2,8(r16)
    710c:	80c00017 	ldw	r3,0(r16)
    7110:	da000117 	ldw	r8,4(sp)
    7114:	1585c83a 	sub	r2,r2,r22
    7118:	1dad883a 	add	r22,r3,r22
    711c:	80800215 	stw	r2,8(r16)
    7120:	85800015 	stw	r22,0(r16)
    7124:	003fbf06 	br	7024 <__alt_mem_onchip_memory2_0+0xf8005f94>
    7128:	81000017 	ldw	r4,0(r16)
    712c:	9027883a 	mov	r19,r18
    7130:	902f883a 	mov	r23,r18
    7134:	003f6906 	br	6edc <__alt_mem_onchip_memory2_0+0xf8005e4c>
    7138:	900d883a 	mov	r6,r18
    713c:	01400284 	movi	r5,10
    7140:	e009883a 	mov	r4,fp
    7144:	0007e940 	call	7e94 <memchr>
    7148:	10003e26 	beq	r2,zero,7244 <__sfvwrite_r+0x4a4>
    714c:	10800044 	addi	r2,r2,1
    7150:	1727c83a 	sub	r19,r2,fp
    7154:	02000044 	movi	r8,1
    7158:	003f9d06 	br	6fd0 <__alt_mem_onchip_memory2_0+0xf8005f40>
    715c:	80800517 	ldw	r2,20(r16)
    7160:	81400417 	ldw	r5,16(r16)
    7164:	81c00017 	ldw	r7,0(r16)
    7168:	10a7883a 	add	r19,r2,r2
    716c:	9885883a 	add	r2,r19,r2
    7170:	1026d7fa 	srli	r19,r2,31
    7174:	396dc83a 	sub	r22,r7,r5
    7178:	b1000044 	addi	r4,r22,1
    717c:	9885883a 	add	r2,r19,r2
    7180:	1027d07a 	srai	r19,r2,1
    7184:	2485883a 	add	r2,r4,r18
    7188:	980d883a 	mov	r6,r19
    718c:	9880022e 	bgeu	r19,r2,7198 <__sfvwrite_r+0x3f8>
    7190:	1027883a 	mov	r19,r2
    7194:	100d883a 	mov	r6,r2
    7198:	18c1000c 	andi	r3,r3,1024
    719c:	18001c26 	beq	r3,zero,7210 <__sfvwrite_r+0x470>
    71a0:	300b883a 	mov	r5,r6
    71a4:	a809883a 	mov	r4,r21
    71a8:	00076880 	call	7688 <_malloc_r>
    71ac:	102f883a 	mov	r23,r2
    71b0:	10002926 	beq	r2,zero,7258 <__sfvwrite_r+0x4b8>
    71b4:	81400417 	ldw	r5,16(r16)
    71b8:	b00d883a 	mov	r6,r22
    71bc:	1009883a 	mov	r4,r2
    71c0:	0007f780 	call	7f78 <memcpy>
    71c4:	8080030b 	ldhu	r2,12(r16)
    71c8:	00fedfc4 	movi	r3,-1153
    71cc:	10c4703a 	and	r2,r2,r3
    71d0:	10802014 	ori	r2,r2,128
    71d4:	8080030d 	sth	r2,12(r16)
    71d8:	bd89883a 	add	r4,r23,r22
    71dc:	9d8fc83a 	sub	r7,r19,r22
    71e0:	85c00415 	stw	r23,16(r16)
    71e4:	84c00515 	stw	r19,20(r16)
    71e8:	81000015 	stw	r4,0(r16)
    71ec:	9027883a 	mov	r19,r18
    71f0:	81c00215 	stw	r7,8(r16)
    71f4:	902f883a 	mov	r23,r18
    71f8:	003f3806 	br	6edc <__alt_mem_onchip_memory2_0+0xf8005e4c>
    71fc:	800b883a 	mov	r5,r16
    7200:	a809883a 	mov	r4,r21
    7204:	00065300 	call	6530 <_fflush_r>
    7208:	103fb926 	beq	r2,zero,70f0 <__alt_mem_onchip_memory2_0+0xf8006060>
    720c:	003f6506 	br	6fa4 <__alt_mem_onchip_memory2_0+0xf8005f14>
    7210:	a809883a 	mov	r4,r21
    7214:	00093fc0 	call	93fc <_realloc_r>
    7218:	102f883a 	mov	r23,r2
    721c:	103fee1e 	bne	r2,zero,71d8 <__alt_mem_onchip_memory2_0+0xf8006148>
    7220:	81400417 	ldw	r5,16(r16)
    7224:	a809883a 	mov	r4,r21
    7228:	0006a900 	call	6a90 <_free_r>
    722c:	8080030b 	ldhu	r2,12(r16)
    7230:	00ffdfc4 	movi	r3,-129
    7234:	1884703a 	and	r2,r3,r2
    7238:	00c00304 	movi	r3,12
    723c:	a8c00015 	stw	r3,0(r21)
    7240:	003f5906 	br	6fa8 <__alt_mem_onchip_memory2_0+0xf8005f18>
    7244:	94c00044 	addi	r19,r18,1
    7248:	02000044 	movi	r8,1
    724c:	003f6006 	br	6fd0 <__alt_mem_onchip_memory2_0+0xf8005f40>
    7250:	00bfffc4 	movi	r2,-1
    7254:	003f0006 	br	6e58 <__alt_mem_onchip_memory2_0+0xf8005dc8>
    7258:	00800304 	movi	r2,12
    725c:	a8800015 	stw	r2,0(r21)
    7260:	8080030b 	ldhu	r2,12(r16)
    7264:	003f5006 	br	6fa8 <__alt_mem_onchip_memory2_0+0xf8005f18>

00007268 <_fwalk>:
    7268:	defff704 	addi	sp,sp,-36
    726c:	dd000415 	stw	r20,16(sp)
    7270:	dfc00815 	stw	ra,32(sp)
    7274:	ddc00715 	stw	r23,28(sp)
    7278:	dd800615 	stw	r22,24(sp)
    727c:	dd400515 	stw	r21,20(sp)
    7280:	dcc00315 	stw	r19,12(sp)
    7284:	dc800215 	stw	r18,8(sp)
    7288:	dc400115 	stw	r17,4(sp)
    728c:	dc000015 	stw	r16,0(sp)
    7290:	2500b804 	addi	r20,r4,736
    7294:	a0002326 	beq	r20,zero,7324 <_fwalk+0xbc>
    7298:	282b883a 	mov	r21,r5
    729c:	002f883a 	mov	r23,zero
    72a0:	05800044 	movi	r22,1
    72a4:	04ffffc4 	movi	r19,-1
    72a8:	a4400117 	ldw	r17,4(r20)
    72ac:	a4800217 	ldw	r18,8(r20)
    72b0:	8c7fffc4 	addi	r17,r17,-1
    72b4:	88000d16 	blt	r17,zero,72ec <_fwalk+0x84>
    72b8:	94000304 	addi	r16,r18,12
    72bc:	94800384 	addi	r18,r18,14
    72c0:	8080000b 	ldhu	r2,0(r16)
    72c4:	8c7fffc4 	addi	r17,r17,-1
    72c8:	813ffd04 	addi	r4,r16,-12
    72cc:	b080042e 	bgeu	r22,r2,72e0 <_fwalk+0x78>
    72d0:	9080000f 	ldh	r2,0(r18)
    72d4:	14c00226 	beq	r2,r19,72e0 <_fwalk+0x78>
    72d8:	a83ee83a 	callr	r21
    72dc:	b8aeb03a 	or	r23,r23,r2
    72e0:	84001a04 	addi	r16,r16,104
    72e4:	94801a04 	addi	r18,r18,104
    72e8:	8cfff51e 	bne	r17,r19,72c0 <__alt_mem_onchip_memory2_0+0xf8006230>
    72ec:	a5000017 	ldw	r20,0(r20)
    72f0:	a03fed1e 	bne	r20,zero,72a8 <__alt_mem_onchip_memory2_0+0xf8006218>
    72f4:	b805883a 	mov	r2,r23
    72f8:	dfc00817 	ldw	ra,32(sp)
    72fc:	ddc00717 	ldw	r23,28(sp)
    7300:	dd800617 	ldw	r22,24(sp)
    7304:	dd400517 	ldw	r21,20(sp)
    7308:	dd000417 	ldw	r20,16(sp)
    730c:	dcc00317 	ldw	r19,12(sp)
    7310:	dc800217 	ldw	r18,8(sp)
    7314:	dc400117 	ldw	r17,4(sp)
    7318:	dc000017 	ldw	r16,0(sp)
    731c:	dec00904 	addi	sp,sp,36
    7320:	f800283a 	ret
    7324:	002f883a 	mov	r23,zero
    7328:	003ff206 	br	72f4 <__alt_mem_onchip_memory2_0+0xf8006264>

0000732c <_fwalk_reent>:
    732c:	defff704 	addi	sp,sp,-36
    7330:	dd000415 	stw	r20,16(sp)
    7334:	dfc00815 	stw	ra,32(sp)
    7338:	ddc00715 	stw	r23,28(sp)
    733c:	dd800615 	stw	r22,24(sp)
    7340:	dd400515 	stw	r21,20(sp)
    7344:	dcc00315 	stw	r19,12(sp)
    7348:	dc800215 	stw	r18,8(sp)
    734c:	dc400115 	stw	r17,4(sp)
    7350:	dc000015 	stw	r16,0(sp)
    7354:	2500b804 	addi	r20,r4,736
    7358:	a0002326 	beq	r20,zero,73e8 <_fwalk_reent+0xbc>
    735c:	282b883a 	mov	r21,r5
    7360:	2027883a 	mov	r19,r4
    7364:	002f883a 	mov	r23,zero
    7368:	05800044 	movi	r22,1
    736c:	04bfffc4 	movi	r18,-1
    7370:	a4400117 	ldw	r17,4(r20)
    7374:	a4000217 	ldw	r16,8(r20)
    7378:	8c7fffc4 	addi	r17,r17,-1
    737c:	88000c16 	blt	r17,zero,73b0 <_fwalk_reent+0x84>
    7380:	84000304 	addi	r16,r16,12
    7384:	8080000b 	ldhu	r2,0(r16)
    7388:	8c7fffc4 	addi	r17,r17,-1
    738c:	817ffd04 	addi	r5,r16,-12
    7390:	b080052e 	bgeu	r22,r2,73a8 <_fwalk_reent+0x7c>
    7394:	8080008f 	ldh	r2,2(r16)
    7398:	9809883a 	mov	r4,r19
    739c:	14800226 	beq	r2,r18,73a8 <_fwalk_reent+0x7c>
    73a0:	a83ee83a 	callr	r21
    73a4:	b8aeb03a 	or	r23,r23,r2
    73a8:	84001a04 	addi	r16,r16,104
    73ac:	8cbff51e 	bne	r17,r18,7384 <__alt_mem_onchip_memory2_0+0xf80062f4>
    73b0:	a5000017 	ldw	r20,0(r20)
    73b4:	a03fee1e 	bne	r20,zero,7370 <__alt_mem_onchip_memory2_0+0xf80062e0>
    73b8:	b805883a 	mov	r2,r23
    73bc:	dfc00817 	ldw	ra,32(sp)
    73c0:	ddc00717 	ldw	r23,28(sp)
    73c4:	dd800617 	ldw	r22,24(sp)
    73c8:	dd400517 	ldw	r21,20(sp)
    73cc:	dd000417 	ldw	r20,16(sp)
    73d0:	dcc00317 	ldw	r19,12(sp)
    73d4:	dc800217 	ldw	r18,8(sp)
    73d8:	dc400117 	ldw	r17,4(sp)
    73dc:	dc000017 	ldw	r16,0(sp)
    73e0:	dec00904 	addi	sp,sp,36
    73e4:	f800283a 	ret
    73e8:	002f883a 	mov	r23,zero
    73ec:	003ff206 	br	73b8 <__alt_mem_onchip_memory2_0+0xf8006328>

000073f0 <_setlocale_r>:
    73f0:	30001b26 	beq	r6,zero,7460 <_setlocale_r+0x70>
    73f4:	01400074 	movhi	r5,1
    73f8:	defffe04 	addi	sp,sp,-8
    73fc:	2948c004 	addi	r5,r5,8960
    7400:	3009883a 	mov	r4,r6
    7404:	dc000015 	stw	r16,0(sp)
    7408:	dfc00115 	stw	ra,4(sp)
    740c:	3021883a 	mov	r16,r6
    7410:	0009b640 	call	9b64 <strcmp>
    7414:	1000061e 	bne	r2,zero,7430 <_setlocale_r+0x40>
    7418:	00800074 	movhi	r2,1
    741c:	1088bf04 	addi	r2,r2,8956
    7420:	dfc00117 	ldw	ra,4(sp)
    7424:	dc000017 	ldw	r16,0(sp)
    7428:	dec00204 	addi	sp,sp,8
    742c:	f800283a 	ret
    7430:	01400074 	movhi	r5,1
    7434:	2948bf04 	addi	r5,r5,8956
    7438:	8009883a 	mov	r4,r16
    743c:	0009b640 	call	9b64 <strcmp>
    7440:	103ff526 	beq	r2,zero,7418 <__alt_mem_onchip_memory2_0+0xf8006388>
    7444:	01400074 	movhi	r5,1
    7448:	2948aa04 	addi	r5,r5,8872
    744c:	8009883a 	mov	r4,r16
    7450:	0009b640 	call	9b64 <strcmp>
    7454:	103ff026 	beq	r2,zero,7418 <__alt_mem_onchip_memory2_0+0xf8006388>
    7458:	0005883a 	mov	r2,zero
    745c:	003ff006 	br	7420 <__alt_mem_onchip_memory2_0+0xf8006390>
    7460:	00800074 	movhi	r2,1
    7464:	1088bf04 	addi	r2,r2,8956
    7468:	f800283a 	ret

0000746c <__locale_charset>:
    746c:	00800074 	movhi	r2,1
    7470:	108a7204 	addi	r2,r2,10696
    7474:	f800283a 	ret

00007478 <__locale_mb_cur_max>:
    7478:	00800074 	movhi	r2,1
    747c:	10900e04 	addi	r2,r2,16440
    7480:	10800017 	ldw	r2,0(r2)
    7484:	f800283a 	ret

00007488 <__locale_msgcharset>:
    7488:	00800074 	movhi	r2,1
    748c:	108a6a04 	addi	r2,r2,10664
    7490:	f800283a 	ret

00007494 <__locale_cjk_lang>:
    7494:	0005883a 	mov	r2,zero
    7498:	f800283a 	ret

0000749c <_localeconv_r>:
    749c:	00800074 	movhi	r2,1
    74a0:	108a7a04 	addi	r2,r2,10728
    74a4:	f800283a 	ret

000074a8 <setlocale>:
    74a8:	00800074 	movhi	r2,1
    74ac:	10900d04 	addi	r2,r2,16436
    74b0:	280d883a 	mov	r6,r5
    74b4:	200b883a 	mov	r5,r4
    74b8:	11000017 	ldw	r4,0(r2)
    74bc:	00073f01 	jmpi	73f0 <_setlocale_r>

000074c0 <localeconv>:
    74c0:	00800074 	movhi	r2,1
    74c4:	108a7a04 	addi	r2,r2,10728
    74c8:	f800283a 	ret

000074cc <__smakebuf_r>:
    74cc:	2880030b 	ldhu	r2,12(r5)
    74d0:	10c0008c 	andi	r3,r2,2
    74d4:	1800411e 	bne	r3,zero,75dc <__smakebuf_r+0x110>
    74d8:	deffec04 	addi	sp,sp,-80
    74dc:	dc000f15 	stw	r16,60(sp)
    74e0:	2821883a 	mov	r16,r5
    74e4:	2940038f 	ldh	r5,14(r5)
    74e8:	dc401015 	stw	r17,64(sp)
    74ec:	dfc01315 	stw	ra,76(sp)
    74f0:	dcc01215 	stw	r19,72(sp)
    74f4:	dc801115 	stw	r18,68(sp)
    74f8:	2023883a 	mov	r17,r4
    74fc:	28001c16 	blt	r5,zero,7570 <__smakebuf_r+0xa4>
    7500:	d80d883a 	mov	r6,sp
    7504:	000b7d40 	call	b7d4 <_fstat_r>
    7508:	10001816 	blt	r2,zero,756c <__smakebuf_r+0xa0>
    750c:	d8800117 	ldw	r2,4(sp)
    7510:	00e00014 	movui	r3,32768
    7514:	10bc000c 	andi	r2,r2,61440
    7518:	14c80020 	cmpeqi	r19,r2,8192
    751c:	10c03726 	beq	r2,r3,75fc <__smakebuf_r+0x130>
    7520:	80c0030b 	ldhu	r3,12(r16)
    7524:	18c20014 	ori	r3,r3,2048
    7528:	80c0030d 	sth	r3,12(r16)
    752c:	00c80004 	movi	r3,8192
    7530:	10c0521e 	bne	r2,r3,767c <__smakebuf_r+0x1b0>
    7534:	8140038f 	ldh	r5,14(r16)
    7538:	8809883a 	mov	r4,r17
    753c:	000b8300 	call	b830 <_isatty_r>
    7540:	10004c26 	beq	r2,zero,7674 <__smakebuf_r+0x1a8>
    7544:	8080030b 	ldhu	r2,12(r16)
    7548:	80c010c4 	addi	r3,r16,67
    754c:	80c00015 	stw	r3,0(r16)
    7550:	10800054 	ori	r2,r2,1
    7554:	8080030d 	sth	r2,12(r16)
    7558:	00800044 	movi	r2,1
    755c:	80c00415 	stw	r3,16(r16)
    7560:	80800515 	stw	r2,20(r16)
    7564:	04810004 	movi	r18,1024
    7568:	00000706 	br	7588 <__smakebuf_r+0xbc>
    756c:	8080030b 	ldhu	r2,12(r16)
    7570:	10c0200c 	andi	r3,r2,128
    7574:	18001f1e 	bne	r3,zero,75f4 <__smakebuf_r+0x128>
    7578:	04810004 	movi	r18,1024
    757c:	10820014 	ori	r2,r2,2048
    7580:	8080030d 	sth	r2,12(r16)
    7584:	0027883a 	mov	r19,zero
    7588:	900b883a 	mov	r5,r18
    758c:	8809883a 	mov	r4,r17
    7590:	00076880 	call	7688 <_malloc_r>
    7594:	10002c26 	beq	r2,zero,7648 <__smakebuf_r+0x17c>
    7598:	80c0030b 	ldhu	r3,12(r16)
    759c:	01000034 	movhi	r4,0
    75a0:	21197104 	addi	r4,r4,26052
    75a4:	89000f15 	stw	r4,60(r17)
    75a8:	18c02014 	ori	r3,r3,128
    75ac:	80c0030d 	sth	r3,12(r16)
    75b0:	80800015 	stw	r2,0(r16)
    75b4:	80800415 	stw	r2,16(r16)
    75b8:	84800515 	stw	r18,20(r16)
    75bc:	98001a1e 	bne	r19,zero,7628 <__smakebuf_r+0x15c>
    75c0:	dfc01317 	ldw	ra,76(sp)
    75c4:	dcc01217 	ldw	r19,72(sp)
    75c8:	dc801117 	ldw	r18,68(sp)
    75cc:	dc401017 	ldw	r17,64(sp)
    75d0:	dc000f17 	ldw	r16,60(sp)
    75d4:	dec01404 	addi	sp,sp,80
    75d8:	f800283a 	ret
    75dc:	288010c4 	addi	r2,r5,67
    75e0:	28800015 	stw	r2,0(r5)
    75e4:	28800415 	stw	r2,16(r5)
    75e8:	00800044 	movi	r2,1
    75ec:	28800515 	stw	r2,20(r5)
    75f0:	f800283a 	ret
    75f4:	04801004 	movi	r18,64
    75f8:	003fe006 	br	757c <__alt_mem_onchip_memory2_0+0xf80064ec>
    75fc:	81000a17 	ldw	r4,40(r16)
    7600:	00c00074 	movhi	r3,1
    7604:	18e6c004 	addi	r3,r3,-25856
    7608:	20ffc51e 	bne	r4,r3,7520 <__alt_mem_onchip_memory2_0+0xf8006490>
    760c:	8080030b 	ldhu	r2,12(r16)
    7610:	04810004 	movi	r18,1024
    7614:	84801315 	stw	r18,76(r16)
    7618:	1484b03a 	or	r2,r2,r18
    761c:	8080030d 	sth	r2,12(r16)
    7620:	0027883a 	mov	r19,zero
    7624:	003fd806 	br	7588 <__alt_mem_onchip_memory2_0+0xf80064f8>
    7628:	8140038f 	ldh	r5,14(r16)
    762c:	8809883a 	mov	r4,r17
    7630:	000b8300 	call	b830 <_isatty_r>
    7634:	103fe226 	beq	r2,zero,75c0 <__alt_mem_onchip_memory2_0+0xf8006530>
    7638:	8080030b 	ldhu	r2,12(r16)
    763c:	10800054 	ori	r2,r2,1
    7640:	8080030d 	sth	r2,12(r16)
    7644:	003fde06 	br	75c0 <__alt_mem_onchip_memory2_0+0xf8006530>
    7648:	8080030b 	ldhu	r2,12(r16)
    764c:	10c0800c 	andi	r3,r2,512
    7650:	183fdb1e 	bne	r3,zero,75c0 <__alt_mem_onchip_memory2_0+0xf8006530>
    7654:	10800094 	ori	r2,r2,2
    7658:	80c010c4 	addi	r3,r16,67
    765c:	8080030d 	sth	r2,12(r16)
    7660:	00800044 	movi	r2,1
    7664:	80c00015 	stw	r3,0(r16)
    7668:	80c00415 	stw	r3,16(r16)
    766c:	80800515 	stw	r2,20(r16)
    7670:	003fd306 	br	75c0 <__alt_mem_onchip_memory2_0+0xf8006530>
    7674:	04810004 	movi	r18,1024
    7678:	003fc306 	br	7588 <__alt_mem_onchip_memory2_0+0xf80064f8>
    767c:	0027883a 	mov	r19,zero
    7680:	04810004 	movi	r18,1024
    7684:	003fc006 	br	7588 <__alt_mem_onchip_memory2_0+0xf80064f8>

00007688 <_malloc_r>:
    7688:	defff504 	addi	sp,sp,-44
    768c:	dc800315 	stw	r18,12(sp)
    7690:	dfc00a15 	stw	ra,40(sp)
    7694:	df000915 	stw	fp,36(sp)
    7698:	ddc00815 	stw	r23,32(sp)
    769c:	dd800715 	stw	r22,28(sp)
    76a0:	dd400615 	stw	r21,24(sp)
    76a4:	dd000515 	stw	r20,20(sp)
    76a8:	dcc00415 	stw	r19,16(sp)
    76ac:	dc400215 	stw	r17,8(sp)
    76b0:	dc000115 	stw	r16,4(sp)
    76b4:	288002c4 	addi	r2,r5,11
    76b8:	00c00584 	movi	r3,22
    76bc:	2025883a 	mov	r18,r4
    76c0:	18807f2e 	bgeu	r3,r2,78c0 <_malloc_r+0x238>
    76c4:	047ffe04 	movi	r17,-8
    76c8:	1462703a 	and	r17,r2,r17
    76cc:	8800a316 	blt	r17,zero,795c <_malloc_r+0x2d4>
    76d0:	8940a236 	bltu	r17,r5,795c <_malloc_r+0x2d4>
    76d4:	000f8600 	call	f860 <__malloc_lock>
    76d8:	00807dc4 	movi	r2,503
    76dc:	1441e92e 	bgeu	r2,r17,7e84 <_malloc_r+0x7fc>
    76e0:	8804d27a 	srli	r2,r17,9
    76e4:	1000a126 	beq	r2,zero,796c <_malloc_r+0x2e4>
    76e8:	00c00104 	movi	r3,4
    76ec:	18811e36 	bltu	r3,r2,7b68 <_malloc_r+0x4e0>
    76f0:	8804d1ba 	srli	r2,r17,6
    76f4:	12000e44 	addi	r8,r2,57
    76f8:	11c00e04 	addi	r7,r2,56
    76fc:	4209883a 	add	r4,r8,r8
    7700:	04c00074 	movhi	r19,1
    7704:	2109883a 	add	r4,r4,r4
    7708:	9cca8804 	addi	r19,r19,10784
    770c:	2109883a 	add	r4,r4,r4
    7710:	9909883a 	add	r4,r19,r4
    7714:	24000117 	ldw	r16,4(r4)
    7718:	213ffe04 	addi	r4,r4,-8
    771c:	24009726 	beq	r4,r16,797c <_malloc_r+0x2f4>
    7720:	80800117 	ldw	r2,4(r16)
    7724:	01bfff04 	movi	r6,-4
    7728:	014003c4 	movi	r5,15
    772c:	1184703a 	and	r2,r2,r6
    7730:	1447c83a 	sub	r3,r2,r17
    7734:	28c00716 	blt	r5,r3,7754 <_malloc_r+0xcc>
    7738:	1800920e 	bge	r3,zero,7984 <_malloc_r+0x2fc>
    773c:	84000317 	ldw	r16,12(r16)
    7740:	24008e26 	beq	r4,r16,797c <_malloc_r+0x2f4>
    7744:	80800117 	ldw	r2,4(r16)
    7748:	1184703a 	and	r2,r2,r6
    774c:	1447c83a 	sub	r3,r2,r17
    7750:	28fff90e 	bge	r5,r3,7738 <__alt_mem_onchip_memory2_0+0xf80066a8>
    7754:	3809883a 	mov	r4,r7
    7758:	01800074 	movhi	r6,1
    775c:	9c000417 	ldw	r16,16(r19)
    7760:	318a8804 	addi	r6,r6,10784
    7764:	32000204 	addi	r8,r6,8
    7768:	82013426 	beq	r16,r8,7c3c <_malloc_r+0x5b4>
    776c:	80c00117 	ldw	r3,4(r16)
    7770:	00bfff04 	movi	r2,-4
    7774:	188e703a 	and	r7,r3,r2
    7778:	3c45c83a 	sub	r2,r7,r17
    777c:	00c003c4 	movi	r3,15
    7780:	18811f16 	blt	r3,r2,7c00 <_malloc_r+0x578>
    7784:	32000515 	stw	r8,20(r6)
    7788:	32000415 	stw	r8,16(r6)
    778c:	10007f0e 	bge	r2,zero,798c <_malloc_r+0x304>
    7790:	00807fc4 	movi	r2,511
    7794:	11c0fd36 	bltu	r2,r7,7b8c <_malloc_r+0x504>
    7798:	3806d0fa 	srli	r3,r7,3
    779c:	01c00044 	movi	r7,1
    77a0:	30800117 	ldw	r2,4(r6)
    77a4:	19400044 	addi	r5,r3,1
    77a8:	294b883a 	add	r5,r5,r5
    77ac:	1807d0ba 	srai	r3,r3,2
    77b0:	294b883a 	add	r5,r5,r5
    77b4:	294b883a 	add	r5,r5,r5
    77b8:	298b883a 	add	r5,r5,r6
    77bc:	38c6983a 	sll	r3,r7,r3
    77c0:	29c00017 	ldw	r7,0(r5)
    77c4:	2a7ffe04 	addi	r9,r5,-8
    77c8:	1886b03a 	or	r3,r3,r2
    77cc:	82400315 	stw	r9,12(r16)
    77d0:	81c00215 	stw	r7,8(r16)
    77d4:	30c00115 	stw	r3,4(r6)
    77d8:	2c000015 	stw	r16,0(r5)
    77dc:	3c000315 	stw	r16,12(r7)
    77e0:	2005d0ba 	srai	r2,r4,2
    77e4:	01400044 	movi	r5,1
    77e8:	288a983a 	sll	r5,r5,r2
    77ec:	19406f36 	bltu	r3,r5,79ac <_malloc_r+0x324>
    77f0:	28c4703a 	and	r2,r5,r3
    77f4:	10000a1e 	bne	r2,zero,7820 <_malloc_r+0x198>
    77f8:	00bfff04 	movi	r2,-4
    77fc:	294b883a 	add	r5,r5,r5
    7800:	2088703a 	and	r4,r4,r2
    7804:	28c4703a 	and	r2,r5,r3
    7808:	21000104 	addi	r4,r4,4
    780c:	1000041e 	bne	r2,zero,7820 <_malloc_r+0x198>
    7810:	294b883a 	add	r5,r5,r5
    7814:	28c4703a 	and	r2,r5,r3
    7818:	21000104 	addi	r4,r4,4
    781c:	103ffc26 	beq	r2,zero,7810 <__alt_mem_onchip_memory2_0+0xf8006780>
    7820:	02bfff04 	movi	r10,-4
    7824:	024003c4 	movi	r9,15
    7828:	21800044 	addi	r6,r4,1
    782c:	318d883a 	add	r6,r6,r6
    7830:	318d883a 	add	r6,r6,r6
    7834:	318d883a 	add	r6,r6,r6
    7838:	998d883a 	add	r6,r19,r6
    783c:	333ffe04 	addi	r12,r6,-8
    7840:	2017883a 	mov	r11,r4
    7844:	31800104 	addi	r6,r6,4
    7848:	34000017 	ldw	r16,0(r6)
    784c:	31fffd04 	addi	r7,r6,-12
    7850:	81c0041e 	bne	r16,r7,7864 <_malloc_r+0x1dc>
    7854:	0000fb06 	br	7c44 <_malloc_r+0x5bc>
    7858:	1801030e 	bge	r3,zero,7c68 <_malloc_r+0x5e0>
    785c:	84000317 	ldw	r16,12(r16)
    7860:	81c0f826 	beq	r16,r7,7c44 <_malloc_r+0x5bc>
    7864:	80800117 	ldw	r2,4(r16)
    7868:	1284703a 	and	r2,r2,r10
    786c:	1447c83a 	sub	r3,r2,r17
    7870:	48fff90e 	bge	r9,r3,7858 <__alt_mem_onchip_memory2_0+0xf80067c8>
    7874:	80800317 	ldw	r2,12(r16)
    7878:	81000217 	ldw	r4,8(r16)
    787c:	89400054 	ori	r5,r17,1
    7880:	81400115 	stw	r5,4(r16)
    7884:	20800315 	stw	r2,12(r4)
    7888:	11000215 	stw	r4,8(r2)
    788c:	8463883a 	add	r17,r16,r17
    7890:	9c400515 	stw	r17,20(r19)
    7894:	9c400415 	stw	r17,16(r19)
    7898:	18800054 	ori	r2,r3,1
    789c:	88800115 	stw	r2,4(r17)
    78a0:	8a000315 	stw	r8,12(r17)
    78a4:	8a000215 	stw	r8,8(r17)
    78a8:	88e3883a 	add	r17,r17,r3
    78ac:	88c00015 	stw	r3,0(r17)
    78b0:	9009883a 	mov	r4,r18
    78b4:	000f8840 	call	f884 <__malloc_unlock>
    78b8:	80800204 	addi	r2,r16,8
    78bc:	00001b06 	br	792c <_malloc_r+0x2a4>
    78c0:	04400404 	movi	r17,16
    78c4:	89402536 	bltu	r17,r5,795c <_malloc_r+0x2d4>
    78c8:	000f8600 	call	f860 <__malloc_lock>
    78cc:	00800184 	movi	r2,6
    78d0:	01000084 	movi	r4,2
    78d4:	04c00074 	movhi	r19,1
    78d8:	1085883a 	add	r2,r2,r2
    78dc:	9cca8804 	addi	r19,r19,10784
    78e0:	1085883a 	add	r2,r2,r2
    78e4:	9885883a 	add	r2,r19,r2
    78e8:	14000117 	ldw	r16,4(r2)
    78ec:	10fffe04 	addi	r3,r2,-8
    78f0:	80c0d926 	beq	r16,r3,7c58 <_malloc_r+0x5d0>
    78f4:	80c00117 	ldw	r3,4(r16)
    78f8:	81000317 	ldw	r4,12(r16)
    78fc:	00bfff04 	movi	r2,-4
    7900:	1884703a 	and	r2,r3,r2
    7904:	81400217 	ldw	r5,8(r16)
    7908:	8085883a 	add	r2,r16,r2
    790c:	10c00117 	ldw	r3,4(r2)
    7910:	29000315 	stw	r4,12(r5)
    7914:	21400215 	stw	r5,8(r4)
    7918:	18c00054 	ori	r3,r3,1
    791c:	10c00115 	stw	r3,4(r2)
    7920:	9009883a 	mov	r4,r18
    7924:	000f8840 	call	f884 <__malloc_unlock>
    7928:	80800204 	addi	r2,r16,8
    792c:	dfc00a17 	ldw	ra,40(sp)
    7930:	df000917 	ldw	fp,36(sp)
    7934:	ddc00817 	ldw	r23,32(sp)
    7938:	dd800717 	ldw	r22,28(sp)
    793c:	dd400617 	ldw	r21,24(sp)
    7940:	dd000517 	ldw	r20,20(sp)
    7944:	dcc00417 	ldw	r19,16(sp)
    7948:	dc800317 	ldw	r18,12(sp)
    794c:	dc400217 	ldw	r17,8(sp)
    7950:	dc000117 	ldw	r16,4(sp)
    7954:	dec00b04 	addi	sp,sp,44
    7958:	f800283a 	ret
    795c:	00800304 	movi	r2,12
    7960:	90800015 	stw	r2,0(r18)
    7964:	0005883a 	mov	r2,zero
    7968:	003ff006 	br	792c <__alt_mem_onchip_memory2_0+0xf800689c>
    796c:	01002004 	movi	r4,128
    7970:	02001004 	movi	r8,64
    7974:	01c00fc4 	movi	r7,63
    7978:	003f6106 	br	7700 <__alt_mem_onchip_memory2_0+0xf8006670>
    797c:	4009883a 	mov	r4,r8
    7980:	003f7506 	br	7758 <__alt_mem_onchip_memory2_0+0xf80066c8>
    7984:	81000317 	ldw	r4,12(r16)
    7988:	003fde06 	br	7904 <__alt_mem_onchip_memory2_0+0xf8006874>
    798c:	81c5883a 	add	r2,r16,r7
    7990:	11400117 	ldw	r5,4(r2)
    7994:	9009883a 	mov	r4,r18
    7998:	29400054 	ori	r5,r5,1
    799c:	11400115 	stw	r5,4(r2)
    79a0:	000f8840 	call	f884 <__malloc_unlock>
    79a4:	80800204 	addi	r2,r16,8
    79a8:	003fe006 	br	792c <__alt_mem_onchip_memory2_0+0xf800689c>
    79ac:	9c000217 	ldw	r16,8(r19)
    79b0:	00bfff04 	movi	r2,-4
    79b4:	85800117 	ldw	r22,4(r16)
    79b8:	b0ac703a 	and	r22,r22,r2
    79bc:	b4400336 	bltu	r22,r17,79cc <_malloc_r+0x344>
    79c0:	b445c83a 	sub	r2,r22,r17
    79c4:	00c003c4 	movi	r3,15
    79c8:	18805d16 	blt	r3,r2,7b40 <_malloc_r+0x4b8>
    79cc:	05c00074 	movhi	r23,1
    79d0:	00800074 	movhi	r2,1
    79d4:	1096dd04 	addi	r2,r2,23412
    79d8:	bdd00f04 	addi	r23,r23,16444
    79dc:	15400017 	ldw	r21,0(r2)
    79e0:	b8c00017 	ldw	r3,0(r23)
    79e4:	00bfffc4 	movi	r2,-1
    79e8:	858d883a 	add	r6,r16,r22
    79ec:	8d6b883a 	add	r21,r17,r21
    79f0:	1880ea26 	beq	r3,r2,7d9c <_malloc_r+0x714>
    79f4:	ad4403c4 	addi	r21,r21,4111
    79f8:	00bc0004 	movi	r2,-4096
    79fc:	a8aa703a 	and	r21,r21,r2
    7a00:	a80b883a 	mov	r5,r21
    7a04:	9009883a 	mov	r4,r18
    7a08:	d9800015 	stw	r6,0(sp)
    7a0c:	00099d40 	call	99d4 <_sbrk_r>
    7a10:	1029883a 	mov	r20,r2
    7a14:	00bfffc4 	movi	r2,-1
    7a18:	d9800017 	ldw	r6,0(sp)
    7a1c:	a080e826 	beq	r20,r2,7dc0 <_malloc_r+0x738>
    7a20:	a180a636 	bltu	r20,r6,7cbc <_malloc_r+0x634>
    7a24:	07000074 	movhi	fp,1
    7a28:	e716e604 	addi	fp,fp,23448
    7a2c:	e0800017 	ldw	r2,0(fp)
    7a30:	a887883a 	add	r3,r21,r2
    7a34:	e0c00015 	stw	r3,0(fp)
    7a38:	3500e626 	beq	r6,r20,7dd4 <_malloc_r+0x74c>
    7a3c:	b9000017 	ldw	r4,0(r23)
    7a40:	00bfffc4 	movi	r2,-1
    7a44:	2080ee26 	beq	r4,r2,7e00 <_malloc_r+0x778>
    7a48:	a185c83a 	sub	r2,r20,r6
    7a4c:	10c5883a 	add	r2,r2,r3
    7a50:	e0800015 	stw	r2,0(fp)
    7a54:	a0c001cc 	andi	r3,r20,7
    7a58:	1800bc26 	beq	r3,zero,7d4c <_malloc_r+0x6c4>
    7a5c:	a0e9c83a 	sub	r20,r20,r3
    7a60:	00840204 	movi	r2,4104
    7a64:	a5000204 	addi	r20,r20,8
    7a68:	10c7c83a 	sub	r3,r2,r3
    7a6c:	a545883a 	add	r2,r20,r21
    7a70:	1083ffcc 	andi	r2,r2,4095
    7a74:	18abc83a 	sub	r21,r3,r2
    7a78:	a80b883a 	mov	r5,r21
    7a7c:	9009883a 	mov	r4,r18
    7a80:	00099d40 	call	99d4 <_sbrk_r>
    7a84:	00ffffc4 	movi	r3,-1
    7a88:	10c0e126 	beq	r2,r3,7e10 <_malloc_r+0x788>
    7a8c:	1505c83a 	sub	r2,r2,r20
    7a90:	1545883a 	add	r2,r2,r21
    7a94:	10800054 	ori	r2,r2,1
    7a98:	e0c00017 	ldw	r3,0(fp)
    7a9c:	9d000215 	stw	r20,8(r19)
    7aa0:	a0800115 	stw	r2,4(r20)
    7aa4:	a8c7883a 	add	r3,r21,r3
    7aa8:	e0c00015 	stw	r3,0(fp)
    7aac:	84c00e26 	beq	r16,r19,7ae8 <_malloc_r+0x460>
    7ab0:	018003c4 	movi	r6,15
    7ab4:	3580a72e 	bgeu	r6,r22,7d54 <_malloc_r+0x6cc>
    7ab8:	81400117 	ldw	r5,4(r16)
    7abc:	013ffe04 	movi	r4,-8
    7ac0:	b0bffd04 	addi	r2,r22,-12
    7ac4:	1104703a 	and	r2,r2,r4
    7ac8:	2900004c 	andi	r4,r5,1
    7acc:	2088b03a 	or	r4,r4,r2
    7ad0:	81000115 	stw	r4,4(r16)
    7ad4:	01400144 	movi	r5,5
    7ad8:	8089883a 	add	r4,r16,r2
    7adc:	21400115 	stw	r5,4(r4)
    7ae0:	21400215 	stw	r5,8(r4)
    7ae4:	3080cd36 	bltu	r6,r2,7e1c <_malloc_r+0x794>
    7ae8:	00800074 	movhi	r2,1
    7aec:	1096dc04 	addi	r2,r2,23408
    7af0:	11000017 	ldw	r4,0(r2)
    7af4:	20c0012e 	bgeu	r4,r3,7afc <_malloc_r+0x474>
    7af8:	10c00015 	stw	r3,0(r2)
    7afc:	00800074 	movhi	r2,1
    7b00:	1096db04 	addi	r2,r2,23404
    7b04:	11000017 	ldw	r4,0(r2)
    7b08:	9c000217 	ldw	r16,8(r19)
    7b0c:	20c0012e 	bgeu	r4,r3,7b14 <_malloc_r+0x48c>
    7b10:	10c00015 	stw	r3,0(r2)
    7b14:	80c00117 	ldw	r3,4(r16)
    7b18:	00bfff04 	movi	r2,-4
    7b1c:	1886703a 	and	r3,r3,r2
    7b20:	1c45c83a 	sub	r2,r3,r17
    7b24:	1c400236 	bltu	r3,r17,7b30 <_malloc_r+0x4a8>
    7b28:	00c003c4 	movi	r3,15
    7b2c:	18800416 	blt	r3,r2,7b40 <_malloc_r+0x4b8>
    7b30:	9009883a 	mov	r4,r18
    7b34:	000f8840 	call	f884 <__malloc_unlock>
    7b38:	0005883a 	mov	r2,zero
    7b3c:	003f7b06 	br	792c <__alt_mem_onchip_memory2_0+0xf800689c>
    7b40:	88c00054 	ori	r3,r17,1
    7b44:	80c00115 	stw	r3,4(r16)
    7b48:	8463883a 	add	r17,r16,r17
    7b4c:	10800054 	ori	r2,r2,1
    7b50:	9c400215 	stw	r17,8(r19)
    7b54:	88800115 	stw	r2,4(r17)
    7b58:	9009883a 	mov	r4,r18
    7b5c:	000f8840 	call	f884 <__malloc_unlock>
    7b60:	80800204 	addi	r2,r16,8
    7b64:	003f7106 	br	792c <__alt_mem_onchip_memory2_0+0xf800689c>
    7b68:	00c00504 	movi	r3,20
    7b6c:	18804a2e 	bgeu	r3,r2,7c98 <_malloc_r+0x610>
    7b70:	00c01504 	movi	r3,84
    7b74:	18806e36 	bltu	r3,r2,7d30 <_malloc_r+0x6a8>
    7b78:	8804d33a 	srli	r2,r17,12
    7b7c:	12001bc4 	addi	r8,r2,111
    7b80:	11c01b84 	addi	r7,r2,110
    7b84:	4209883a 	add	r4,r8,r8
    7b88:	003edd06 	br	7700 <__alt_mem_onchip_memory2_0+0xf8006670>
    7b8c:	3804d27a 	srli	r2,r7,9
    7b90:	00c00104 	movi	r3,4
    7b94:	1880442e 	bgeu	r3,r2,7ca8 <_malloc_r+0x620>
    7b98:	00c00504 	movi	r3,20
    7b9c:	18808136 	bltu	r3,r2,7da4 <_malloc_r+0x71c>
    7ba0:	11401704 	addi	r5,r2,92
    7ba4:	10c016c4 	addi	r3,r2,91
    7ba8:	294b883a 	add	r5,r5,r5
    7bac:	294b883a 	add	r5,r5,r5
    7bb0:	294b883a 	add	r5,r5,r5
    7bb4:	994b883a 	add	r5,r19,r5
    7bb8:	28800017 	ldw	r2,0(r5)
    7bbc:	01800074 	movhi	r6,1
    7bc0:	297ffe04 	addi	r5,r5,-8
    7bc4:	318a8804 	addi	r6,r6,10784
    7bc8:	28806526 	beq	r5,r2,7d60 <_malloc_r+0x6d8>
    7bcc:	01bfff04 	movi	r6,-4
    7bd0:	10c00117 	ldw	r3,4(r2)
    7bd4:	1986703a 	and	r3,r3,r6
    7bd8:	38c0022e 	bgeu	r7,r3,7be4 <_malloc_r+0x55c>
    7bdc:	10800217 	ldw	r2,8(r2)
    7be0:	28bffb1e 	bne	r5,r2,7bd0 <__alt_mem_onchip_memory2_0+0xf8006b40>
    7be4:	11400317 	ldw	r5,12(r2)
    7be8:	98c00117 	ldw	r3,4(r19)
    7bec:	81400315 	stw	r5,12(r16)
    7bf0:	80800215 	stw	r2,8(r16)
    7bf4:	2c000215 	stw	r16,8(r5)
    7bf8:	14000315 	stw	r16,12(r2)
    7bfc:	003ef806 	br	77e0 <__alt_mem_onchip_memory2_0+0xf8006750>
    7c00:	88c00054 	ori	r3,r17,1
    7c04:	80c00115 	stw	r3,4(r16)
    7c08:	8463883a 	add	r17,r16,r17
    7c0c:	34400515 	stw	r17,20(r6)
    7c10:	34400415 	stw	r17,16(r6)
    7c14:	10c00054 	ori	r3,r2,1
    7c18:	8a000315 	stw	r8,12(r17)
    7c1c:	8a000215 	stw	r8,8(r17)
    7c20:	88c00115 	stw	r3,4(r17)
    7c24:	88a3883a 	add	r17,r17,r2
    7c28:	88800015 	stw	r2,0(r17)
    7c2c:	9009883a 	mov	r4,r18
    7c30:	000f8840 	call	f884 <__malloc_unlock>
    7c34:	80800204 	addi	r2,r16,8
    7c38:	003f3c06 	br	792c <__alt_mem_onchip_memory2_0+0xf800689c>
    7c3c:	30c00117 	ldw	r3,4(r6)
    7c40:	003ee706 	br	77e0 <__alt_mem_onchip_memory2_0+0xf8006750>
    7c44:	5ac00044 	addi	r11,r11,1
    7c48:	588000cc 	andi	r2,r11,3
    7c4c:	31800204 	addi	r6,r6,8
    7c50:	103efd1e 	bne	r2,zero,7848 <__alt_mem_onchip_memory2_0+0xf80067b8>
    7c54:	00002406 	br	7ce8 <_malloc_r+0x660>
    7c58:	14000317 	ldw	r16,12(r2)
    7c5c:	143f251e 	bne	r2,r16,78f4 <__alt_mem_onchip_memory2_0+0xf8006864>
    7c60:	21000084 	addi	r4,r4,2
    7c64:	003ebc06 	br	7758 <__alt_mem_onchip_memory2_0+0xf80066c8>
    7c68:	8085883a 	add	r2,r16,r2
    7c6c:	10c00117 	ldw	r3,4(r2)
    7c70:	81000317 	ldw	r4,12(r16)
    7c74:	81400217 	ldw	r5,8(r16)
    7c78:	18c00054 	ori	r3,r3,1
    7c7c:	10c00115 	stw	r3,4(r2)
    7c80:	29000315 	stw	r4,12(r5)
    7c84:	21400215 	stw	r5,8(r4)
    7c88:	9009883a 	mov	r4,r18
    7c8c:	000f8840 	call	f884 <__malloc_unlock>
    7c90:	80800204 	addi	r2,r16,8
    7c94:	003f2506 	br	792c <__alt_mem_onchip_memory2_0+0xf800689c>
    7c98:	12001704 	addi	r8,r2,92
    7c9c:	11c016c4 	addi	r7,r2,91
    7ca0:	4209883a 	add	r4,r8,r8
    7ca4:	003e9606 	br	7700 <__alt_mem_onchip_memory2_0+0xf8006670>
    7ca8:	3804d1ba 	srli	r2,r7,6
    7cac:	11400e44 	addi	r5,r2,57
    7cb0:	10c00e04 	addi	r3,r2,56
    7cb4:	294b883a 	add	r5,r5,r5
    7cb8:	003fbc06 	br	7bac <__alt_mem_onchip_memory2_0+0xf8006b1c>
    7cbc:	84ff5926 	beq	r16,r19,7a24 <__alt_mem_onchip_memory2_0+0xf8006994>
    7cc0:	00800074 	movhi	r2,1
    7cc4:	108a8804 	addi	r2,r2,10784
    7cc8:	14000217 	ldw	r16,8(r2)
    7ccc:	00bfff04 	movi	r2,-4
    7cd0:	80c00117 	ldw	r3,4(r16)
    7cd4:	1886703a 	and	r3,r3,r2
    7cd8:	003f9106 	br	7b20 <__alt_mem_onchip_memory2_0+0xf8006a90>
    7cdc:	60800217 	ldw	r2,8(r12)
    7ce0:	213fffc4 	addi	r4,r4,-1
    7ce4:	1300651e 	bne	r2,r12,7e7c <_malloc_r+0x7f4>
    7ce8:	208000cc 	andi	r2,r4,3
    7cec:	633ffe04 	addi	r12,r12,-8
    7cf0:	103ffa1e 	bne	r2,zero,7cdc <__alt_mem_onchip_memory2_0+0xf8006c4c>
    7cf4:	98800117 	ldw	r2,4(r19)
    7cf8:	0146303a 	nor	r3,zero,r5
    7cfc:	1884703a 	and	r2,r3,r2
    7d00:	98800115 	stw	r2,4(r19)
    7d04:	294b883a 	add	r5,r5,r5
    7d08:	117f2836 	bltu	r2,r5,79ac <__alt_mem_onchip_memory2_0+0xf800691c>
    7d0c:	283f2726 	beq	r5,zero,79ac <__alt_mem_onchip_memory2_0+0xf800691c>
    7d10:	2886703a 	and	r3,r5,r2
    7d14:	5809883a 	mov	r4,r11
    7d18:	183ec31e 	bne	r3,zero,7828 <__alt_mem_onchip_memory2_0+0xf8006798>
    7d1c:	294b883a 	add	r5,r5,r5
    7d20:	2886703a 	and	r3,r5,r2
    7d24:	21000104 	addi	r4,r4,4
    7d28:	183ffc26 	beq	r3,zero,7d1c <__alt_mem_onchip_memory2_0+0xf8006c8c>
    7d2c:	003ebe06 	br	7828 <__alt_mem_onchip_memory2_0+0xf8006798>
    7d30:	00c05504 	movi	r3,340
    7d34:	18801236 	bltu	r3,r2,7d80 <_malloc_r+0x6f8>
    7d38:	8804d3fa 	srli	r2,r17,15
    7d3c:	12001e04 	addi	r8,r2,120
    7d40:	11c01dc4 	addi	r7,r2,119
    7d44:	4209883a 	add	r4,r8,r8
    7d48:	003e6d06 	br	7700 <__alt_mem_onchip_memory2_0+0xf8006670>
    7d4c:	00c40004 	movi	r3,4096
    7d50:	003f4606 	br	7a6c <__alt_mem_onchip_memory2_0+0xf80069dc>
    7d54:	00800044 	movi	r2,1
    7d58:	a0800115 	stw	r2,4(r20)
    7d5c:	003f7406 	br	7b30 <__alt_mem_onchip_memory2_0+0xf8006aa0>
    7d60:	1805d0ba 	srai	r2,r3,2
    7d64:	01c00044 	movi	r7,1
    7d68:	30c00117 	ldw	r3,4(r6)
    7d6c:	388e983a 	sll	r7,r7,r2
    7d70:	2805883a 	mov	r2,r5
    7d74:	38c6b03a 	or	r3,r7,r3
    7d78:	30c00115 	stw	r3,4(r6)
    7d7c:	003f9b06 	br	7bec <__alt_mem_onchip_memory2_0+0xf8006b5c>
    7d80:	00c15504 	movi	r3,1364
    7d84:	18801a36 	bltu	r3,r2,7df0 <_malloc_r+0x768>
    7d88:	8804d4ba 	srli	r2,r17,18
    7d8c:	12001f44 	addi	r8,r2,125
    7d90:	11c01f04 	addi	r7,r2,124
    7d94:	4209883a 	add	r4,r8,r8
    7d98:	003e5906 	br	7700 <__alt_mem_onchip_memory2_0+0xf8006670>
    7d9c:	ad400404 	addi	r21,r21,16
    7da0:	003f1706 	br	7a00 <__alt_mem_onchip_memory2_0+0xf8006970>
    7da4:	00c01504 	movi	r3,84
    7da8:	18802336 	bltu	r3,r2,7e38 <_malloc_r+0x7b0>
    7dac:	3804d33a 	srli	r2,r7,12
    7db0:	11401bc4 	addi	r5,r2,111
    7db4:	10c01b84 	addi	r3,r2,110
    7db8:	294b883a 	add	r5,r5,r5
    7dbc:	003f7b06 	br	7bac <__alt_mem_onchip_memory2_0+0xf8006b1c>
    7dc0:	9c000217 	ldw	r16,8(r19)
    7dc4:	00bfff04 	movi	r2,-4
    7dc8:	80c00117 	ldw	r3,4(r16)
    7dcc:	1886703a 	and	r3,r3,r2
    7dd0:	003f5306 	br	7b20 <__alt_mem_onchip_memory2_0+0xf8006a90>
    7dd4:	3083ffcc 	andi	r2,r6,4095
    7dd8:	103f181e 	bne	r2,zero,7a3c <__alt_mem_onchip_memory2_0+0xf80069ac>
    7ddc:	99000217 	ldw	r4,8(r19)
    7de0:	b545883a 	add	r2,r22,r21
    7de4:	10800054 	ori	r2,r2,1
    7de8:	20800115 	stw	r2,4(r4)
    7dec:	003f3e06 	br	7ae8 <__alt_mem_onchip_memory2_0+0xf8006a58>
    7df0:	01003f84 	movi	r4,254
    7df4:	02001fc4 	movi	r8,127
    7df8:	01c01f84 	movi	r7,126
    7dfc:	003e4006 	br	7700 <__alt_mem_onchip_memory2_0+0xf8006670>
    7e00:	00800074 	movhi	r2,1
    7e04:	10900f04 	addi	r2,r2,16444
    7e08:	15000015 	stw	r20,0(r2)
    7e0c:	003f1106 	br	7a54 <__alt_mem_onchip_memory2_0+0xf80069c4>
    7e10:	00800044 	movi	r2,1
    7e14:	002b883a 	mov	r21,zero
    7e18:	003f1f06 	br	7a98 <__alt_mem_onchip_memory2_0+0xf8006a08>
    7e1c:	81400204 	addi	r5,r16,8
    7e20:	9009883a 	mov	r4,r18
    7e24:	0006a900 	call	6a90 <_free_r>
    7e28:	00800074 	movhi	r2,1
    7e2c:	1096e604 	addi	r2,r2,23448
    7e30:	10c00017 	ldw	r3,0(r2)
    7e34:	003f2c06 	br	7ae8 <__alt_mem_onchip_memory2_0+0xf8006a58>
    7e38:	00c05504 	movi	r3,340
    7e3c:	18800536 	bltu	r3,r2,7e54 <_malloc_r+0x7cc>
    7e40:	3804d3fa 	srli	r2,r7,15
    7e44:	11401e04 	addi	r5,r2,120
    7e48:	10c01dc4 	addi	r3,r2,119
    7e4c:	294b883a 	add	r5,r5,r5
    7e50:	003f5606 	br	7bac <__alt_mem_onchip_memory2_0+0xf8006b1c>
    7e54:	00c15504 	movi	r3,1364
    7e58:	18800536 	bltu	r3,r2,7e70 <_malloc_r+0x7e8>
    7e5c:	3804d4ba 	srli	r2,r7,18
    7e60:	11401f44 	addi	r5,r2,125
    7e64:	10c01f04 	addi	r3,r2,124
    7e68:	294b883a 	add	r5,r5,r5
    7e6c:	003f4f06 	br	7bac <__alt_mem_onchip_memory2_0+0xf8006b1c>
    7e70:	01403f84 	movi	r5,254
    7e74:	00c01f84 	movi	r3,126
    7e78:	003f4c06 	br	7bac <__alt_mem_onchip_memory2_0+0xf8006b1c>
    7e7c:	98800117 	ldw	r2,4(r19)
    7e80:	003fa006 	br	7d04 <__alt_mem_onchip_memory2_0+0xf8006c74>
    7e84:	8808d0fa 	srli	r4,r17,3
    7e88:	20800044 	addi	r2,r4,1
    7e8c:	1085883a 	add	r2,r2,r2
    7e90:	003e9006 	br	78d4 <__alt_mem_onchip_memory2_0+0xf8006844>

00007e94 <memchr>:
    7e94:	208000cc 	andi	r2,r4,3
    7e98:	280f883a 	mov	r7,r5
    7e9c:	10003426 	beq	r2,zero,7f70 <memchr+0xdc>
    7ea0:	30bfffc4 	addi	r2,r6,-1
    7ea4:	30001a26 	beq	r6,zero,7f10 <memchr+0x7c>
    7ea8:	20c00003 	ldbu	r3,0(r4)
    7eac:	29803fcc 	andi	r6,r5,255
    7eb0:	30c0051e 	bne	r6,r3,7ec8 <memchr+0x34>
    7eb4:	00001806 	br	7f18 <memchr+0x84>
    7eb8:	10001526 	beq	r2,zero,7f10 <memchr+0x7c>
    7ebc:	20c00003 	ldbu	r3,0(r4)
    7ec0:	10bfffc4 	addi	r2,r2,-1
    7ec4:	30c01426 	beq	r6,r3,7f18 <memchr+0x84>
    7ec8:	21000044 	addi	r4,r4,1
    7ecc:	20c000cc 	andi	r3,r4,3
    7ed0:	183ff91e 	bne	r3,zero,7eb8 <__alt_mem_onchip_memory2_0+0xf8006e28>
    7ed4:	020000c4 	movi	r8,3
    7ed8:	40801136 	bltu	r8,r2,7f20 <memchr+0x8c>
    7edc:	10000c26 	beq	r2,zero,7f10 <memchr+0x7c>
    7ee0:	20c00003 	ldbu	r3,0(r4)
    7ee4:	29403fcc 	andi	r5,r5,255
    7ee8:	28c00b26 	beq	r5,r3,7f18 <memchr+0x84>
    7eec:	20c00044 	addi	r3,r4,1
    7ef0:	39803fcc 	andi	r6,r7,255
    7ef4:	2089883a 	add	r4,r4,r2
    7ef8:	00000306 	br	7f08 <memchr+0x74>
    7efc:	18c00044 	addi	r3,r3,1
    7f00:	197fffc3 	ldbu	r5,-1(r3)
    7f04:	31400526 	beq	r6,r5,7f1c <memchr+0x88>
    7f08:	1805883a 	mov	r2,r3
    7f0c:	20fffb1e 	bne	r4,r3,7efc <__alt_mem_onchip_memory2_0+0xf8006e6c>
    7f10:	0005883a 	mov	r2,zero
    7f14:	f800283a 	ret
    7f18:	2005883a 	mov	r2,r4
    7f1c:	f800283a 	ret
    7f20:	28c03fcc 	andi	r3,r5,255
    7f24:	1812923a 	slli	r9,r3,8
    7f28:	02ffbff4 	movhi	r11,65279
    7f2c:	02a02074 	movhi	r10,32897
    7f30:	48d2b03a 	or	r9,r9,r3
    7f34:	4806943a 	slli	r3,r9,16
    7f38:	5affbfc4 	addi	r11,r11,-257
    7f3c:	52a02004 	addi	r10,r10,-32640
    7f40:	48d2b03a 	or	r9,r9,r3
    7f44:	20c00017 	ldw	r3,0(r4)
    7f48:	48c6f03a 	xor	r3,r9,r3
    7f4c:	1acd883a 	add	r6,r3,r11
    7f50:	00c6303a 	nor	r3,zero,r3
    7f54:	30c6703a 	and	r3,r6,r3
    7f58:	1a86703a 	and	r3,r3,r10
    7f5c:	183fe01e 	bne	r3,zero,7ee0 <__alt_mem_onchip_memory2_0+0xf8006e50>
    7f60:	10bfff04 	addi	r2,r2,-4
    7f64:	21000104 	addi	r4,r4,4
    7f68:	40bff636 	bltu	r8,r2,7f44 <__alt_mem_onchip_memory2_0+0xf8006eb4>
    7f6c:	003fdb06 	br	7edc <__alt_mem_onchip_memory2_0+0xf8006e4c>
    7f70:	3005883a 	mov	r2,r6
    7f74:	003fd706 	br	7ed4 <__alt_mem_onchip_memory2_0+0xf8006e44>

00007f78 <memcpy>:
    7f78:	defffd04 	addi	sp,sp,-12
    7f7c:	dfc00215 	stw	ra,8(sp)
    7f80:	dc400115 	stw	r17,4(sp)
    7f84:	dc000015 	stw	r16,0(sp)
    7f88:	00c003c4 	movi	r3,15
    7f8c:	2005883a 	mov	r2,r4
    7f90:	1980452e 	bgeu	r3,r6,80a8 <memcpy+0x130>
    7f94:	2906b03a 	or	r3,r5,r4
    7f98:	18c000cc 	andi	r3,r3,3
    7f9c:	1800441e 	bne	r3,zero,80b0 <memcpy+0x138>
    7fa0:	347ffc04 	addi	r17,r6,-16
    7fa4:	8822d13a 	srli	r17,r17,4
    7fa8:	28c00104 	addi	r3,r5,4
    7fac:	23400104 	addi	r13,r4,4
    7fb0:	8820913a 	slli	r16,r17,4
    7fb4:	2b000204 	addi	r12,r5,8
    7fb8:	22c00204 	addi	r11,r4,8
    7fbc:	84000504 	addi	r16,r16,20
    7fc0:	2a800304 	addi	r10,r5,12
    7fc4:	22400304 	addi	r9,r4,12
    7fc8:	2c21883a 	add	r16,r5,r16
    7fcc:	2811883a 	mov	r8,r5
    7fd0:	200f883a 	mov	r7,r4
    7fd4:	41000017 	ldw	r4,0(r8)
    7fd8:	1fc00017 	ldw	ra,0(r3)
    7fdc:	63c00017 	ldw	r15,0(r12)
    7fe0:	39000015 	stw	r4,0(r7)
    7fe4:	53800017 	ldw	r14,0(r10)
    7fe8:	6fc00015 	stw	ra,0(r13)
    7fec:	5bc00015 	stw	r15,0(r11)
    7ff0:	4b800015 	stw	r14,0(r9)
    7ff4:	18c00404 	addi	r3,r3,16
    7ff8:	39c00404 	addi	r7,r7,16
    7ffc:	42000404 	addi	r8,r8,16
    8000:	6b400404 	addi	r13,r13,16
    8004:	63000404 	addi	r12,r12,16
    8008:	5ac00404 	addi	r11,r11,16
    800c:	52800404 	addi	r10,r10,16
    8010:	4a400404 	addi	r9,r9,16
    8014:	1c3fef1e 	bne	r3,r16,7fd4 <__alt_mem_onchip_memory2_0+0xf8006f44>
    8018:	89c00044 	addi	r7,r17,1
    801c:	380e913a 	slli	r7,r7,4
    8020:	310003cc 	andi	r4,r6,15
    8024:	02c000c4 	movi	r11,3
    8028:	11c7883a 	add	r3,r2,r7
    802c:	29cb883a 	add	r5,r5,r7
    8030:	5900212e 	bgeu	r11,r4,80b8 <memcpy+0x140>
    8034:	1813883a 	mov	r9,r3
    8038:	2811883a 	mov	r8,r5
    803c:	200f883a 	mov	r7,r4
    8040:	42800017 	ldw	r10,0(r8)
    8044:	4a400104 	addi	r9,r9,4
    8048:	39ffff04 	addi	r7,r7,-4
    804c:	4abfff15 	stw	r10,-4(r9)
    8050:	42000104 	addi	r8,r8,4
    8054:	59fffa36 	bltu	r11,r7,8040 <__alt_mem_onchip_memory2_0+0xf8006fb0>
    8058:	213fff04 	addi	r4,r4,-4
    805c:	2008d0ba 	srli	r4,r4,2
    8060:	318000cc 	andi	r6,r6,3
    8064:	21000044 	addi	r4,r4,1
    8068:	2109883a 	add	r4,r4,r4
    806c:	2109883a 	add	r4,r4,r4
    8070:	1907883a 	add	r3,r3,r4
    8074:	290b883a 	add	r5,r5,r4
    8078:	30000626 	beq	r6,zero,8094 <memcpy+0x11c>
    807c:	198d883a 	add	r6,r3,r6
    8080:	29c00003 	ldbu	r7,0(r5)
    8084:	18c00044 	addi	r3,r3,1
    8088:	29400044 	addi	r5,r5,1
    808c:	19ffffc5 	stb	r7,-1(r3)
    8090:	19bffb1e 	bne	r3,r6,8080 <__alt_mem_onchip_memory2_0+0xf8006ff0>
    8094:	dfc00217 	ldw	ra,8(sp)
    8098:	dc400117 	ldw	r17,4(sp)
    809c:	dc000017 	ldw	r16,0(sp)
    80a0:	dec00304 	addi	sp,sp,12
    80a4:	f800283a 	ret
    80a8:	2007883a 	mov	r3,r4
    80ac:	003ff206 	br	8078 <__alt_mem_onchip_memory2_0+0xf8006fe8>
    80b0:	2007883a 	mov	r3,r4
    80b4:	003ff106 	br	807c <__alt_mem_onchip_memory2_0+0xf8006fec>
    80b8:	200d883a 	mov	r6,r4
    80bc:	003fee06 	br	8078 <__alt_mem_onchip_memory2_0+0xf8006fe8>

000080c0 <memmove>:
    80c0:	2005883a 	mov	r2,r4
    80c4:	29000b2e 	bgeu	r5,r4,80f4 <memmove+0x34>
    80c8:	298f883a 	add	r7,r5,r6
    80cc:	21c0092e 	bgeu	r4,r7,80f4 <memmove+0x34>
    80d0:	2187883a 	add	r3,r4,r6
    80d4:	198bc83a 	sub	r5,r3,r6
    80d8:	30004826 	beq	r6,zero,81fc <memmove+0x13c>
    80dc:	39ffffc4 	addi	r7,r7,-1
    80e0:	39000003 	ldbu	r4,0(r7)
    80e4:	18ffffc4 	addi	r3,r3,-1
    80e8:	19000005 	stb	r4,0(r3)
    80ec:	28fffb1e 	bne	r5,r3,80dc <__alt_mem_onchip_memory2_0+0xf800704c>
    80f0:	f800283a 	ret
    80f4:	00c003c4 	movi	r3,15
    80f8:	1980412e 	bgeu	r3,r6,8200 <memmove+0x140>
    80fc:	2886b03a 	or	r3,r5,r2
    8100:	18c000cc 	andi	r3,r3,3
    8104:	1800401e 	bne	r3,zero,8208 <memmove+0x148>
    8108:	33fffc04 	addi	r15,r6,-16
    810c:	781ed13a 	srli	r15,r15,4
    8110:	28c00104 	addi	r3,r5,4
    8114:	13400104 	addi	r13,r2,4
    8118:	781c913a 	slli	r14,r15,4
    811c:	2b000204 	addi	r12,r5,8
    8120:	12c00204 	addi	r11,r2,8
    8124:	73800504 	addi	r14,r14,20
    8128:	2a800304 	addi	r10,r5,12
    812c:	12400304 	addi	r9,r2,12
    8130:	2b9d883a 	add	r14,r5,r14
    8134:	2811883a 	mov	r8,r5
    8138:	100f883a 	mov	r7,r2
    813c:	41000017 	ldw	r4,0(r8)
    8140:	39c00404 	addi	r7,r7,16
    8144:	18c00404 	addi	r3,r3,16
    8148:	393ffc15 	stw	r4,-16(r7)
    814c:	193ffc17 	ldw	r4,-16(r3)
    8150:	6b400404 	addi	r13,r13,16
    8154:	5ac00404 	addi	r11,r11,16
    8158:	693ffc15 	stw	r4,-16(r13)
    815c:	61000017 	ldw	r4,0(r12)
    8160:	4a400404 	addi	r9,r9,16
    8164:	42000404 	addi	r8,r8,16
    8168:	593ffc15 	stw	r4,-16(r11)
    816c:	51000017 	ldw	r4,0(r10)
    8170:	63000404 	addi	r12,r12,16
    8174:	52800404 	addi	r10,r10,16
    8178:	493ffc15 	stw	r4,-16(r9)
    817c:	1bbfef1e 	bne	r3,r14,813c <__alt_mem_onchip_memory2_0+0xf80070ac>
    8180:	79000044 	addi	r4,r15,1
    8184:	2008913a 	slli	r4,r4,4
    8188:	328003cc 	andi	r10,r6,15
    818c:	02c000c4 	movi	r11,3
    8190:	1107883a 	add	r3,r2,r4
    8194:	290b883a 	add	r5,r5,r4
    8198:	5a801e2e 	bgeu	r11,r10,8214 <memmove+0x154>
    819c:	1813883a 	mov	r9,r3
    81a0:	2811883a 	mov	r8,r5
    81a4:	500f883a 	mov	r7,r10
    81a8:	41000017 	ldw	r4,0(r8)
    81ac:	4a400104 	addi	r9,r9,4
    81b0:	39ffff04 	addi	r7,r7,-4
    81b4:	493fff15 	stw	r4,-4(r9)
    81b8:	42000104 	addi	r8,r8,4
    81bc:	59fffa36 	bltu	r11,r7,81a8 <__alt_mem_onchip_memory2_0+0xf8007118>
    81c0:	513fff04 	addi	r4,r10,-4
    81c4:	2008d0ba 	srli	r4,r4,2
    81c8:	318000cc 	andi	r6,r6,3
    81cc:	21000044 	addi	r4,r4,1
    81d0:	2109883a 	add	r4,r4,r4
    81d4:	2109883a 	add	r4,r4,r4
    81d8:	1907883a 	add	r3,r3,r4
    81dc:	290b883a 	add	r5,r5,r4
    81e0:	30000b26 	beq	r6,zero,8210 <memmove+0x150>
    81e4:	198d883a 	add	r6,r3,r6
    81e8:	29c00003 	ldbu	r7,0(r5)
    81ec:	18c00044 	addi	r3,r3,1
    81f0:	29400044 	addi	r5,r5,1
    81f4:	19ffffc5 	stb	r7,-1(r3)
    81f8:	19bffb1e 	bne	r3,r6,81e8 <__alt_mem_onchip_memory2_0+0xf8007158>
    81fc:	f800283a 	ret
    8200:	1007883a 	mov	r3,r2
    8204:	003ff606 	br	81e0 <__alt_mem_onchip_memory2_0+0xf8007150>
    8208:	1007883a 	mov	r3,r2
    820c:	003ff506 	br	81e4 <__alt_mem_onchip_memory2_0+0xf8007154>
    8210:	f800283a 	ret
    8214:	500d883a 	mov	r6,r10
    8218:	003ff106 	br	81e0 <__alt_mem_onchip_memory2_0+0xf8007150>

0000821c <memset>:
    821c:	20c000cc 	andi	r3,r4,3
    8220:	2005883a 	mov	r2,r4
    8224:	18004426 	beq	r3,zero,8338 <memset+0x11c>
    8228:	31ffffc4 	addi	r7,r6,-1
    822c:	30004026 	beq	r6,zero,8330 <memset+0x114>
    8230:	2813883a 	mov	r9,r5
    8234:	200d883a 	mov	r6,r4
    8238:	2007883a 	mov	r3,r4
    823c:	00000406 	br	8250 <memset+0x34>
    8240:	3a3fffc4 	addi	r8,r7,-1
    8244:	31800044 	addi	r6,r6,1
    8248:	38003926 	beq	r7,zero,8330 <memset+0x114>
    824c:	400f883a 	mov	r7,r8
    8250:	18c00044 	addi	r3,r3,1
    8254:	32400005 	stb	r9,0(r6)
    8258:	1a0000cc 	andi	r8,r3,3
    825c:	403ff81e 	bne	r8,zero,8240 <__alt_mem_onchip_memory2_0+0xf80071b0>
    8260:	010000c4 	movi	r4,3
    8264:	21c02d2e 	bgeu	r4,r7,831c <memset+0x100>
    8268:	29003fcc 	andi	r4,r5,255
    826c:	200c923a 	slli	r6,r4,8
    8270:	3108b03a 	or	r4,r6,r4
    8274:	200c943a 	slli	r6,r4,16
    8278:	218cb03a 	or	r6,r4,r6
    827c:	010003c4 	movi	r4,15
    8280:	21c0182e 	bgeu	r4,r7,82e4 <memset+0xc8>
    8284:	3b3ffc04 	addi	r12,r7,-16
    8288:	6018d13a 	srli	r12,r12,4
    828c:	1a000104 	addi	r8,r3,4
    8290:	1ac00204 	addi	r11,r3,8
    8294:	6008913a 	slli	r4,r12,4
    8298:	1a800304 	addi	r10,r3,12
    829c:	1813883a 	mov	r9,r3
    82a0:	21000504 	addi	r4,r4,20
    82a4:	1909883a 	add	r4,r3,r4
    82a8:	49800015 	stw	r6,0(r9)
    82ac:	41800015 	stw	r6,0(r8)
    82b0:	59800015 	stw	r6,0(r11)
    82b4:	51800015 	stw	r6,0(r10)
    82b8:	42000404 	addi	r8,r8,16
    82bc:	4a400404 	addi	r9,r9,16
    82c0:	5ac00404 	addi	r11,r11,16
    82c4:	52800404 	addi	r10,r10,16
    82c8:	413ff71e 	bne	r8,r4,82a8 <__alt_mem_onchip_memory2_0+0xf8007218>
    82cc:	63000044 	addi	r12,r12,1
    82d0:	6018913a 	slli	r12,r12,4
    82d4:	39c003cc 	andi	r7,r7,15
    82d8:	010000c4 	movi	r4,3
    82dc:	1b07883a 	add	r3,r3,r12
    82e0:	21c00e2e 	bgeu	r4,r7,831c <memset+0x100>
    82e4:	1813883a 	mov	r9,r3
    82e8:	3811883a 	mov	r8,r7
    82ec:	010000c4 	movi	r4,3
    82f0:	49800015 	stw	r6,0(r9)
    82f4:	423fff04 	addi	r8,r8,-4
    82f8:	4a400104 	addi	r9,r9,4
    82fc:	223ffc36 	bltu	r4,r8,82f0 <__alt_mem_onchip_memory2_0+0xf8007260>
    8300:	393fff04 	addi	r4,r7,-4
    8304:	2008d0ba 	srli	r4,r4,2
    8308:	39c000cc 	andi	r7,r7,3
    830c:	21000044 	addi	r4,r4,1
    8310:	2109883a 	add	r4,r4,r4
    8314:	2109883a 	add	r4,r4,r4
    8318:	1907883a 	add	r3,r3,r4
    831c:	38000526 	beq	r7,zero,8334 <memset+0x118>
    8320:	19cf883a 	add	r7,r3,r7
    8324:	19400005 	stb	r5,0(r3)
    8328:	18c00044 	addi	r3,r3,1
    832c:	38fffd1e 	bne	r7,r3,8324 <__alt_mem_onchip_memory2_0+0xf8007294>
    8330:	f800283a 	ret
    8334:	f800283a 	ret
    8338:	2007883a 	mov	r3,r4
    833c:	300f883a 	mov	r7,r6
    8340:	003fc706 	br	8260 <__alt_mem_onchip_memory2_0+0xf80071d0>

00008344 <_Balloc>:
    8344:	20801317 	ldw	r2,76(r4)
    8348:	defffc04 	addi	sp,sp,-16
    834c:	dc400115 	stw	r17,4(sp)
    8350:	dc000015 	stw	r16,0(sp)
    8354:	dfc00315 	stw	ra,12(sp)
    8358:	dc800215 	stw	r18,8(sp)
    835c:	2023883a 	mov	r17,r4
    8360:	2821883a 	mov	r16,r5
    8364:	10000f26 	beq	r2,zero,83a4 <_Balloc+0x60>
    8368:	8407883a 	add	r3,r16,r16
    836c:	18c7883a 	add	r3,r3,r3
    8370:	10c7883a 	add	r3,r2,r3
    8374:	18800017 	ldw	r2,0(r3)
    8378:	10001126 	beq	r2,zero,83c0 <_Balloc+0x7c>
    837c:	11000017 	ldw	r4,0(r2)
    8380:	19000015 	stw	r4,0(r3)
    8384:	10000415 	stw	zero,16(r2)
    8388:	10000315 	stw	zero,12(r2)
    838c:	dfc00317 	ldw	ra,12(sp)
    8390:	dc800217 	ldw	r18,8(sp)
    8394:	dc400117 	ldw	r17,4(sp)
    8398:	dc000017 	ldw	r16,0(sp)
    839c:	dec00404 	addi	sp,sp,16
    83a0:	f800283a 	ret
    83a4:	01800844 	movi	r6,33
    83a8:	01400104 	movi	r5,4
    83ac:	000b3ec0 	call	b3ec <_calloc_r>
    83b0:	88801315 	stw	r2,76(r17)
    83b4:	103fec1e 	bne	r2,zero,8368 <__alt_mem_onchip_memory2_0+0xf80072d8>
    83b8:	0005883a 	mov	r2,zero
    83bc:	003ff306 	br	838c <__alt_mem_onchip_memory2_0+0xf80072fc>
    83c0:	01400044 	movi	r5,1
    83c4:	2c24983a 	sll	r18,r5,r16
    83c8:	8809883a 	mov	r4,r17
    83cc:	91800144 	addi	r6,r18,5
    83d0:	318d883a 	add	r6,r6,r6
    83d4:	318d883a 	add	r6,r6,r6
    83d8:	000b3ec0 	call	b3ec <_calloc_r>
    83dc:	103ff626 	beq	r2,zero,83b8 <__alt_mem_onchip_memory2_0+0xf8007328>
    83e0:	14000115 	stw	r16,4(r2)
    83e4:	14800215 	stw	r18,8(r2)
    83e8:	003fe606 	br	8384 <__alt_mem_onchip_memory2_0+0xf80072f4>

000083ec <_Bfree>:
    83ec:	28000826 	beq	r5,zero,8410 <_Bfree+0x24>
    83f0:	28c00117 	ldw	r3,4(r5)
    83f4:	20801317 	ldw	r2,76(r4)
    83f8:	18c7883a 	add	r3,r3,r3
    83fc:	18c7883a 	add	r3,r3,r3
    8400:	10c5883a 	add	r2,r2,r3
    8404:	10c00017 	ldw	r3,0(r2)
    8408:	28c00015 	stw	r3,0(r5)
    840c:	11400015 	stw	r5,0(r2)
    8410:	f800283a 	ret

00008414 <__multadd>:
    8414:	defff704 	addi	sp,sp,-36
    8418:	dc800215 	stw	r18,8(sp)
    841c:	2c800417 	ldw	r18,16(r5)
    8420:	dd800615 	stw	r22,24(sp)
    8424:	dd400515 	stw	r21,20(sp)
    8428:	dd000415 	stw	r20,16(sp)
    842c:	dcc00315 	stw	r19,12(sp)
    8430:	dc400115 	stw	r17,4(sp)
    8434:	dc000015 	stw	r16,0(sp)
    8438:	dfc00815 	stw	ra,32(sp)
    843c:	ddc00715 	stw	r23,28(sp)
    8440:	2827883a 	mov	r19,r5
    8444:	2029883a 	mov	r20,r4
    8448:	3023883a 	mov	r17,r6
    844c:	3821883a 	mov	r16,r7
    8450:	2d400504 	addi	r21,r5,20
    8454:	002d883a 	mov	r22,zero
    8458:	adc00017 	ldw	r23,0(r21)
    845c:	880b883a 	mov	r5,r17
    8460:	ad400104 	addi	r21,r21,4
    8464:	b93fffcc 	andi	r4,r23,65535
    8468:	000c9f80 	call	c9f8 <__mulsi3>
    846c:	b808d43a 	srli	r4,r23,16
    8470:	880b883a 	mov	r5,r17
    8474:	1421883a 	add	r16,r2,r16
    8478:	000c9f80 	call	c9f8 <__mulsi3>
    847c:	800ed43a 	srli	r7,r16,16
    8480:	80ffffcc 	andi	r3,r16,65535
    8484:	b5800044 	addi	r22,r22,1
    8488:	11c5883a 	add	r2,r2,r7
    848c:	100e943a 	slli	r7,r2,16
    8490:	1020d43a 	srli	r16,r2,16
    8494:	38c7883a 	add	r3,r7,r3
    8498:	a8ffff15 	stw	r3,-4(r21)
    849c:	b4bfee16 	blt	r22,r18,8458 <__alt_mem_onchip_memory2_0+0xf80073c8>
    84a0:	80000926 	beq	r16,zero,84c8 <__multadd+0xb4>
    84a4:	98800217 	ldw	r2,8(r19)
    84a8:	9080130e 	bge	r18,r2,84f8 <__multadd+0xe4>
    84ac:	90800144 	addi	r2,r18,5
    84b0:	1085883a 	add	r2,r2,r2
    84b4:	1085883a 	add	r2,r2,r2
    84b8:	9885883a 	add	r2,r19,r2
    84bc:	14000015 	stw	r16,0(r2)
    84c0:	94800044 	addi	r18,r18,1
    84c4:	9c800415 	stw	r18,16(r19)
    84c8:	9805883a 	mov	r2,r19
    84cc:	dfc00817 	ldw	ra,32(sp)
    84d0:	ddc00717 	ldw	r23,28(sp)
    84d4:	dd800617 	ldw	r22,24(sp)
    84d8:	dd400517 	ldw	r21,20(sp)
    84dc:	dd000417 	ldw	r20,16(sp)
    84e0:	dcc00317 	ldw	r19,12(sp)
    84e4:	dc800217 	ldw	r18,8(sp)
    84e8:	dc400117 	ldw	r17,4(sp)
    84ec:	dc000017 	ldw	r16,0(sp)
    84f0:	dec00904 	addi	sp,sp,36
    84f4:	f800283a 	ret
    84f8:	99400117 	ldw	r5,4(r19)
    84fc:	a009883a 	mov	r4,r20
    8500:	29400044 	addi	r5,r5,1
    8504:	00083440 	call	8344 <_Balloc>
    8508:	99800417 	ldw	r6,16(r19)
    850c:	99400304 	addi	r5,r19,12
    8510:	11000304 	addi	r4,r2,12
    8514:	31800084 	addi	r6,r6,2
    8518:	318d883a 	add	r6,r6,r6
    851c:	318d883a 	add	r6,r6,r6
    8520:	1023883a 	mov	r17,r2
    8524:	0007f780 	call	7f78 <memcpy>
    8528:	98000a26 	beq	r19,zero,8554 <__multadd+0x140>
    852c:	98c00117 	ldw	r3,4(r19)
    8530:	a0801317 	ldw	r2,76(r20)
    8534:	18c7883a 	add	r3,r3,r3
    8538:	18c7883a 	add	r3,r3,r3
    853c:	10c5883a 	add	r2,r2,r3
    8540:	10c00017 	ldw	r3,0(r2)
    8544:	98c00015 	stw	r3,0(r19)
    8548:	14c00015 	stw	r19,0(r2)
    854c:	8827883a 	mov	r19,r17
    8550:	003fd606 	br	84ac <__alt_mem_onchip_memory2_0+0xf800741c>
    8554:	8827883a 	mov	r19,r17
    8558:	003fd406 	br	84ac <__alt_mem_onchip_memory2_0+0xf800741c>

0000855c <__s2b>:
    855c:	defff904 	addi	sp,sp,-28
    8560:	dc400115 	stw	r17,4(sp)
    8564:	dc000015 	stw	r16,0(sp)
    8568:	2023883a 	mov	r17,r4
    856c:	2821883a 	mov	r16,r5
    8570:	39000204 	addi	r4,r7,8
    8574:	01400244 	movi	r5,9
    8578:	dcc00315 	stw	r19,12(sp)
    857c:	dc800215 	stw	r18,8(sp)
    8580:	dfc00615 	stw	ra,24(sp)
    8584:	dd400515 	stw	r21,20(sp)
    8588:	dd000415 	stw	r20,16(sp)
    858c:	3825883a 	mov	r18,r7
    8590:	3027883a 	mov	r19,r6
    8594:	000c8440 	call	c844 <__divsi3>
    8598:	00c00044 	movi	r3,1
    859c:	000b883a 	mov	r5,zero
    85a0:	1880030e 	bge	r3,r2,85b0 <__s2b+0x54>
    85a4:	18c7883a 	add	r3,r3,r3
    85a8:	29400044 	addi	r5,r5,1
    85ac:	18bffd16 	blt	r3,r2,85a4 <__alt_mem_onchip_memory2_0+0xf8007514>
    85b0:	8809883a 	mov	r4,r17
    85b4:	00083440 	call	8344 <_Balloc>
    85b8:	d8c00717 	ldw	r3,28(sp)
    85bc:	10c00515 	stw	r3,20(r2)
    85c0:	00c00044 	movi	r3,1
    85c4:	10c00415 	stw	r3,16(r2)
    85c8:	00c00244 	movi	r3,9
    85cc:	1cc0210e 	bge	r3,r19,8654 <__s2b+0xf8>
    85d0:	80eb883a 	add	r21,r16,r3
    85d4:	a829883a 	mov	r20,r21
    85d8:	84e1883a 	add	r16,r16,r19
    85dc:	a1c00007 	ldb	r7,0(r20)
    85e0:	01800284 	movi	r6,10
    85e4:	a5000044 	addi	r20,r20,1
    85e8:	100b883a 	mov	r5,r2
    85ec:	39fff404 	addi	r7,r7,-48
    85f0:	8809883a 	mov	r4,r17
    85f4:	00084140 	call	8414 <__multadd>
    85f8:	a43ff81e 	bne	r20,r16,85dc <__alt_mem_onchip_memory2_0+0xf800754c>
    85fc:	ace1883a 	add	r16,r21,r19
    8600:	843ffe04 	addi	r16,r16,-8
    8604:	9c800a0e 	bge	r19,r18,8630 <__s2b+0xd4>
    8608:	94e5c83a 	sub	r18,r18,r19
    860c:	84a5883a 	add	r18,r16,r18
    8610:	81c00007 	ldb	r7,0(r16)
    8614:	01800284 	movi	r6,10
    8618:	84000044 	addi	r16,r16,1
    861c:	100b883a 	mov	r5,r2
    8620:	39fff404 	addi	r7,r7,-48
    8624:	8809883a 	mov	r4,r17
    8628:	00084140 	call	8414 <__multadd>
    862c:	84bff81e 	bne	r16,r18,8610 <__alt_mem_onchip_memory2_0+0xf8007580>
    8630:	dfc00617 	ldw	ra,24(sp)
    8634:	dd400517 	ldw	r21,20(sp)
    8638:	dd000417 	ldw	r20,16(sp)
    863c:	dcc00317 	ldw	r19,12(sp)
    8640:	dc800217 	ldw	r18,8(sp)
    8644:	dc400117 	ldw	r17,4(sp)
    8648:	dc000017 	ldw	r16,0(sp)
    864c:	dec00704 	addi	sp,sp,28
    8650:	f800283a 	ret
    8654:	84000284 	addi	r16,r16,10
    8658:	1827883a 	mov	r19,r3
    865c:	003fe906 	br	8604 <__alt_mem_onchip_memory2_0+0xf8007574>

00008660 <__hi0bits>:
    8660:	20bfffec 	andhi	r2,r4,65535
    8664:	1000141e 	bne	r2,zero,86b8 <__hi0bits+0x58>
    8668:	2008943a 	slli	r4,r4,16
    866c:	00800404 	movi	r2,16
    8670:	20ffc02c 	andhi	r3,r4,65280
    8674:	1800021e 	bne	r3,zero,8680 <__hi0bits+0x20>
    8678:	2008923a 	slli	r4,r4,8
    867c:	10800204 	addi	r2,r2,8
    8680:	20fc002c 	andhi	r3,r4,61440
    8684:	1800021e 	bne	r3,zero,8690 <__hi0bits+0x30>
    8688:	2008913a 	slli	r4,r4,4
    868c:	10800104 	addi	r2,r2,4
    8690:	20f0002c 	andhi	r3,r4,49152
    8694:	1800031e 	bne	r3,zero,86a4 <__hi0bits+0x44>
    8698:	2109883a 	add	r4,r4,r4
    869c:	10800084 	addi	r2,r2,2
    86a0:	2109883a 	add	r4,r4,r4
    86a4:	20000316 	blt	r4,zero,86b4 <__hi0bits+0x54>
    86a8:	2110002c 	andhi	r4,r4,16384
    86ac:	2000041e 	bne	r4,zero,86c0 <__hi0bits+0x60>
    86b0:	00800804 	movi	r2,32
    86b4:	f800283a 	ret
    86b8:	0005883a 	mov	r2,zero
    86bc:	003fec06 	br	8670 <__alt_mem_onchip_memory2_0+0xf80075e0>
    86c0:	10800044 	addi	r2,r2,1
    86c4:	f800283a 	ret

000086c8 <__lo0bits>:
    86c8:	20c00017 	ldw	r3,0(r4)
    86cc:	188001cc 	andi	r2,r3,7
    86d0:	10000826 	beq	r2,zero,86f4 <__lo0bits+0x2c>
    86d4:	1880004c 	andi	r2,r3,1
    86d8:	1000211e 	bne	r2,zero,8760 <__lo0bits+0x98>
    86dc:	1880008c 	andi	r2,r3,2
    86e0:	1000211e 	bne	r2,zero,8768 <__lo0bits+0xa0>
    86e4:	1806d0ba 	srli	r3,r3,2
    86e8:	00800084 	movi	r2,2
    86ec:	20c00015 	stw	r3,0(r4)
    86f0:	f800283a 	ret
    86f4:	18bfffcc 	andi	r2,r3,65535
    86f8:	10001326 	beq	r2,zero,8748 <__lo0bits+0x80>
    86fc:	0005883a 	mov	r2,zero
    8700:	19403fcc 	andi	r5,r3,255
    8704:	2800021e 	bne	r5,zero,8710 <__lo0bits+0x48>
    8708:	1806d23a 	srli	r3,r3,8
    870c:	10800204 	addi	r2,r2,8
    8710:	194003cc 	andi	r5,r3,15
    8714:	2800021e 	bne	r5,zero,8720 <__lo0bits+0x58>
    8718:	1806d13a 	srli	r3,r3,4
    871c:	10800104 	addi	r2,r2,4
    8720:	194000cc 	andi	r5,r3,3
    8724:	2800021e 	bne	r5,zero,8730 <__lo0bits+0x68>
    8728:	1806d0ba 	srli	r3,r3,2
    872c:	10800084 	addi	r2,r2,2
    8730:	1940004c 	andi	r5,r3,1
    8734:	2800081e 	bne	r5,zero,8758 <__lo0bits+0x90>
    8738:	1806d07a 	srli	r3,r3,1
    873c:	1800051e 	bne	r3,zero,8754 <__lo0bits+0x8c>
    8740:	00800804 	movi	r2,32
    8744:	f800283a 	ret
    8748:	1806d43a 	srli	r3,r3,16
    874c:	00800404 	movi	r2,16
    8750:	003feb06 	br	8700 <__alt_mem_onchip_memory2_0+0xf8007670>
    8754:	10800044 	addi	r2,r2,1
    8758:	20c00015 	stw	r3,0(r4)
    875c:	f800283a 	ret
    8760:	0005883a 	mov	r2,zero
    8764:	f800283a 	ret
    8768:	1806d07a 	srli	r3,r3,1
    876c:	00800044 	movi	r2,1
    8770:	20c00015 	stw	r3,0(r4)
    8774:	f800283a 	ret

00008778 <__i2b>:
    8778:	defffd04 	addi	sp,sp,-12
    877c:	dc000015 	stw	r16,0(sp)
    8780:	04000044 	movi	r16,1
    8784:	dc400115 	stw	r17,4(sp)
    8788:	2823883a 	mov	r17,r5
    878c:	800b883a 	mov	r5,r16
    8790:	dfc00215 	stw	ra,8(sp)
    8794:	00083440 	call	8344 <_Balloc>
    8798:	14400515 	stw	r17,20(r2)
    879c:	14000415 	stw	r16,16(r2)
    87a0:	dfc00217 	ldw	ra,8(sp)
    87a4:	dc400117 	ldw	r17,4(sp)
    87a8:	dc000017 	ldw	r16,0(sp)
    87ac:	dec00304 	addi	sp,sp,12
    87b0:	f800283a 	ret

000087b4 <__multiply>:
    87b4:	deffef04 	addi	sp,sp,-68
    87b8:	dc400815 	stw	r17,32(sp)
    87bc:	dc000715 	stw	r16,28(sp)
    87c0:	34400417 	ldw	r17,16(r6)
    87c4:	2c000417 	ldw	r16,16(r5)
    87c8:	dd800d15 	stw	r22,52(sp)
    87cc:	dc800915 	stw	r18,36(sp)
    87d0:	dfc01015 	stw	ra,64(sp)
    87d4:	df000f15 	stw	fp,60(sp)
    87d8:	ddc00e15 	stw	r23,56(sp)
    87dc:	dd400c15 	stw	r21,48(sp)
    87e0:	dd000b15 	stw	r20,44(sp)
    87e4:	dcc00a15 	stw	r19,40(sp)
    87e8:	2825883a 	mov	r18,r5
    87ec:	302d883a 	mov	r22,r6
    87f0:	8440050e 	bge	r16,r17,8808 <__multiply+0x54>
    87f4:	8007883a 	mov	r3,r16
    87f8:	3025883a 	mov	r18,r6
    87fc:	8821883a 	mov	r16,r17
    8800:	282d883a 	mov	r22,r5
    8804:	1823883a 	mov	r17,r3
    8808:	90800217 	ldw	r2,8(r18)
    880c:	8447883a 	add	r3,r16,r17
    8810:	d8c00215 	stw	r3,8(sp)
    8814:	91400117 	ldw	r5,4(r18)
    8818:	10c0010e 	bge	r2,r3,8820 <__multiply+0x6c>
    881c:	29400044 	addi	r5,r5,1
    8820:	00083440 	call	8344 <_Balloc>
    8824:	d8c00217 	ldw	r3,8(sp)
    8828:	d8800615 	stw	r2,24(sp)
    882c:	18eb883a 	add	r21,r3,r3
    8830:	ad6b883a 	add	r21,r21,r21
    8834:	10c00504 	addi	r3,r2,20
    8838:	1d6b883a 	add	r21,r3,r21
    883c:	d8c00115 	stw	r3,4(sp)
    8840:	dd400315 	stw	r21,12(sp)
    8844:	1805883a 	mov	r2,r3
    8848:	1d40042e 	bgeu	r3,r21,885c <__multiply+0xa8>
    884c:	d8c00317 	ldw	r3,12(sp)
    8850:	10000015 	stw	zero,0(r2)
    8854:	10800104 	addi	r2,r2,4
    8858:	10fffc36 	bltu	r2,r3,884c <__alt_mem_onchip_memory2_0+0xf80077bc>
    885c:	8c63883a 	add	r17,r17,r17
    8860:	b5800504 	addi	r22,r22,20
    8864:	8c63883a 	add	r17,r17,r17
    8868:	94800504 	addi	r18,r18,20
    886c:	8421883a 	add	r16,r16,r16
    8870:	b463883a 	add	r17,r22,r17
    8874:	8421883a 	add	r16,r16,r16
    8878:	dd800015 	stw	r22,0(sp)
    887c:	dc800415 	stw	r18,16(sp)
    8880:	dc400515 	stw	r17,20(sp)
    8884:	9429883a 	add	r20,r18,r16
    8888:	b4404f2e 	bgeu	r22,r17,89c8 <__multiply+0x214>
    888c:	d8c00017 	ldw	r3,0(sp)
    8890:	1c800017 	ldw	r18,0(r3)
    8894:	947fffcc 	andi	r17,r18,65535
    8898:	88001e26 	beq	r17,zero,8914 <__multiply+0x160>
    889c:	dd800117 	ldw	r22,4(sp)
    88a0:	dd400417 	ldw	r21,16(sp)
    88a4:	0027883a 	mov	r19,zero
    88a8:	ac800017 	ldw	r18,0(r21)
    88ac:	b4000017 	ldw	r16,0(r22)
    88b0:	880b883a 	mov	r5,r17
    88b4:	913fffcc 	andi	r4,r18,65535
    88b8:	000c9f80 	call	c9f8 <__mulsi3>
    88bc:	9008d43a 	srli	r4,r18,16
    88c0:	84bfffcc 	andi	r18,r16,65535
    88c4:	1485883a 	add	r2,r2,r18
    88c8:	14e5883a 	add	r18,r2,r19
    88cc:	8020d43a 	srli	r16,r16,16
    88d0:	9026d43a 	srli	r19,r18,16
    88d4:	880b883a 	mov	r5,r17
    88d8:	000c9f80 	call	c9f8 <__mulsi3>
    88dc:	1405883a 	add	r2,r2,r16
    88e0:	14e1883a 	add	r16,r2,r19
    88e4:	90ffffcc 	andi	r3,r18,65535
    88e8:	8024943a 	slli	r18,r16,16
    88ec:	ad400104 	addi	r21,r21,4
    88f0:	b005883a 	mov	r2,r22
    88f4:	90c6b03a 	or	r3,r18,r3
    88f8:	b0c00015 	stw	r3,0(r22)
    88fc:	8026d43a 	srli	r19,r16,16
    8900:	b5800104 	addi	r22,r22,4
    8904:	ad3fe836 	bltu	r21,r20,88a8 <__alt_mem_onchip_memory2_0+0xf8007818>
    8908:	d8c00017 	ldw	r3,0(sp)
    890c:	14c00115 	stw	r19,4(r2)
    8910:	1c800017 	ldw	r18,0(r3)
    8914:	9024d43a 	srli	r18,r18,16
    8918:	90002226 	beq	r18,zero,89a4 <__multiply+0x1f0>
    891c:	d8c00117 	ldw	r3,4(sp)
    8920:	dd800417 	ldw	r22,16(sp)
    8924:	002f883a 	mov	r23,zero
    8928:	1f000017 	ldw	fp,0(r3)
    892c:	1823883a 	mov	r17,r3
    8930:	182b883a 	mov	r21,r3
    8934:	e021883a 	mov	r16,fp
    8938:	00000106 	br	8940 <__multiply+0x18c>
    893c:	982b883a 	mov	r21,r19
    8940:	b100000b 	ldhu	r4,0(r22)
    8944:	8020d43a 	srli	r16,r16,16
    8948:	900b883a 	mov	r5,r18
    894c:	000c9f80 	call	c9f8 <__mulsi3>
    8950:	1405883a 	add	r2,r2,r16
    8954:	15ef883a 	add	r23,r2,r23
    8958:	b804943a 	slli	r2,r23,16
    895c:	e0ffffcc 	andi	r3,fp,65535
    8960:	8c400104 	addi	r17,r17,4
    8964:	10c6b03a 	or	r3,r2,r3
    8968:	88ffff15 	stw	r3,-4(r17)
    896c:	b5800104 	addi	r22,r22,4
    8970:	b13fff17 	ldw	r4,-4(r22)
    8974:	acc00104 	addi	r19,r21,4
    8978:	900b883a 	mov	r5,r18
    897c:	2008d43a 	srli	r4,r4,16
    8980:	9c000017 	ldw	r16,0(r19)
    8984:	000c9f80 	call	c9f8 <__mulsi3>
    8988:	b806d43a 	srli	r3,r23,16
    898c:	813fffcc 	andi	r4,r16,65535
    8990:	1105883a 	add	r2,r2,r4
    8994:	10f9883a 	add	fp,r2,r3
    8998:	e02ed43a 	srli	r23,fp,16
    899c:	b53fe736 	bltu	r22,r20,893c <__alt_mem_onchip_memory2_0+0xf80078ac>
    89a0:	af000115 	stw	fp,4(r21)
    89a4:	d8c00017 	ldw	r3,0(sp)
    89a8:	d9000517 	ldw	r4,20(sp)
    89ac:	18c00104 	addi	r3,r3,4
    89b0:	d8c00015 	stw	r3,0(sp)
    89b4:	d8c00117 	ldw	r3,4(sp)
    89b8:	18c00104 	addi	r3,r3,4
    89bc:	d8c00115 	stw	r3,4(sp)
    89c0:	d8c00017 	ldw	r3,0(sp)
    89c4:	193fb136 	bltu	r3,r4,888c <__alt_mem_onchip_memory2_0+0xf80077fc>
    89c8:	d8c00217 	ldw	r3,8(sp)
    89cc:	00c00c0e 	bge	zero,r3,8a00 <__multiply+0x24c>
    89d0:	d8c00317 	ldw	r3,12(sp)
    89d4:	18bfff17 	ldw	r2,-4(r3)
    89d8:	1d7fff04 	addi	r21,r3,-4
    89dc:	10000326 	beq	r2,zero,89ec <__multiply+0x238>
    89e0:	00000706 	br	8a00 <__multiply+0x24c>
    89e4:	a8800017 	ldw	r2,0(r21)
    89e8:	1000051e 	bne	r2,zero,8a00 <__multiply+0x24c>
    89ec:	d8c00217 	ldw	r3,8(sp)
    89f0:	ad7fff04 	addi	r21,r21,-4
    89f4:	18ffffc4 	addi	r3,r3,-1
    89f8:	d8c00215 	stw	r3,8(sp)
    89fc:	183ff91e 	bne	r3,zero,89e4 <__alt_mem_onchip_memory2_0+0xf8007954>
    8a00:	d8c00617 	ldw	r3,24(sp)
    8a04:	d9000217 	ldw	r4,8(sp)
    8a08:	1805883a 	mov	r2,r3
    8a0c:	19000415 	stw	r4,16(r3)
    8a10:	dfc01017 	ldw	ra,64(sp)
    8a14:	df000f17 	ldw	fp,60(sp)
    8a18:	ddc00e17 	ldw	r23,56(sp)
    8a1c:	dd800d17 	ldw	r22,52(sp)
    8a20:	dd400c17 	ldw	r21,48(sp)
    8a24:	dd000b17 	ldw	r20,44(sp)
    8a28:	dcc00a17 	ldw	r19,40(sp)
    8a2c:	dc800917 	ldw	r18,36(sp)
    8a30:	dc400817 	ldw	r17,32(sp)
    8a34:	dc000717 	ldw	r16,28(sp)
    8a38:	dec01104 	addi	sp,sp,68
    8a3c:	f800283a 	ret

00008a40 <__pow5mult>:
    8a40:	defffa04 	addi	sp,sp,-24
    8a44:	dcc00315 	stw	r19,12(sp)
    8a48:	dc000015 	stw	r16,0(sp)
    8a4c:	dfc00515 	stw	ra,20(sp)
    8a50:	dd000415 	stw	r20,16(sp)
    8a54:	dc800215 	stw	r18,8(sp)
    8a58:	dc400115 	stw	r17,4(sp)
    8a5c:	308000cc 	andi	r2,r6,3
    8a60:	3021883a 	mov	r16,r6
    8a64:	2027883a 	mov	r19,r4
    8a68:	10002f1e 	bne	r2,zero,8b28 <__pow5mult+0xe8>
    8a6c:	2825883a 	mov	r18,r5
    8a70:	8021d0ba 	srai	r16,r16,2
    8a74:	80001a26 	beq	r16,zero,8ae0 <__pow5mult+0xa0>
    8a78:	9c401217 	ldw	r17,72(r19)
    8a7c:	8800061e 	bne	r17,zero,8a98 <__pow5mult+0x58>
    8a80:	00003406 	br	8b54 <__pow5mult+0x114>
    8a84:	8021d07a 	srai	r16,r16,1
    8a88:	80001526 	beq	r16,zero,8ae0 <__pow5mult+0xa0>
    8a8c:	88800017 	ldw	r2,0(r17)
    8a90:	10001c26 	beq	r2,zero,8b04 <__pow5mult+0xc4>
    8a94:	1023883a 	mov	r17,r2
    8a98:	8080004c 	andi	r2,r16,1
    8a9c:	103ff926 	beq	r2,zero,8a84 <__alt_mem_onchip_memory2_0+0xf80079f4>
    8aa0:	880d883a 	mov	r6,r17
    8aa4:	900b883a 	mov	r5,r18
    8aa8:	9809883a 	mov	r4,r19
    8aac:	00087b40 	call	87b4 <__multiply>
    8ab0:	90001b26 	beq	r18,zero,8b20 <__pow5mult+0xe0>
    8ab4:	91000117 	ldw	r4,4(r18)
    8ab8:	98c01317 	ldw	r3,76(r19)
    8abc:	8021d07a 	srai	r16,r16,1
    8ac0:	2109883a 	add	r4,r4,r4
    8ac4:	2109883a 	add	r4,r4,r4
    8ac8:	1907883a 	add	r3,r3,r4
    8acc:	19000017 	ldw	r4,0(r3)
    8ad0:	91000015 	stw	r4,0(r18)
    8ad4:	1c800015 	stw	r18,0(r3)
    8ad8:	1025883a 	mov	r18,r2
    8adc:	803feb1e 	bne	r16,zero,8a8c <__alt_mem_onchip_memory2_0+0xf80079fc>
    8ae0:	9005883a 	mov	r2,r18
    8ae4:	dfc00517 	ldw	ra,20(sp)
    8ae8:	dd000417 	ldw	r20,16(sp)
    8aec:	dcc00317 	ldw	r19,12(sp)
    8af0:	dc800217 	ldw	r18,8(sp)
    8af4:	dc400117 	ldw	r17,4(sp)
    8af8:	dc000017 	ldw	r16,0(sp)
    8afc:	dec00604 	addi	sp,sp,24
    8b00:	f800283a 	ret
    8b04:	880d883a 	mov	r6,r17
    8b08:	880b883a 	mov	r5,r17
    8b0c:	9809883a 	mov	r4,r19
    8b10:	00087b40 	call	87b4 <__multiply>
    8b14:	88800015 	stw	r2,0(r17)
    8b18:	10000015 	stw	zero,0(r2)
    8b1c:	003fdd06 	br	8a94 <__alt_mem_onchip_memory2_0+0xf8007a04>
    8b20:	1025883a 	mov	r18,r2
    8b24:	003fd706 	br	8a84 <__alt_mem_onchip_memory2_0+0xf80079f4>
    8b28:	10bfffc4 	addi	r2,r2,-1
    8b2c:	1085883a 	add	r2,r2,r2
    8b30:	00c00074 	movhi	r3,1
    8b34:	18c8c304 	addi	r3,r3,8972
    8b38:	1085883a 	add	r2,r2,r2
    8b3c:	1885883a 	add	r2,r3,r2
    8b40:	11800017 	ldw	r6,0(r2)
    8b44:	000f883a 	mov	r7,zero
    8b48:	00084140 	call	8414 <__multadd>
    8b4c:	1025883a 	mov	r18,r2
    8b50:	003fc706 	br	8a70 <__alt_mem_onchip_memory2_0+0xf80079e0>
    8b54:	05000044 	movi	r20,1
    8b58:	a00b883a 	mov	r5,r20
    8b5c:	9809883a 	mov	r4,r19
    8b60:	00083440 	call	8344 <_Balloc>
    8b64:	1023883a 	mov	r17,r2
    8b68:	00809c44 	movi	r2,625
    8b6c:	88800515 	stw	r2,20(r17)
    8b70:	8d000415 	stw	r20,16(r17)
    8b74:	9c401215 	stw	r17,72(r19)
    8b78:	88000015 	stw	zero,0(r17)
    8b7c:	003fc606 	br	8a98 <__alt_mem_onchip_memory2_0+0xf8007a08>

00008b80 <__lshift>:
    8b80:	defff904 	addi	sp,sp,-28
    8b84:	dd400515 	stw	r21,20(sp)
    8b88:	dcc00315 	stw	r19,12(sp)
    8b8c:	302bd17a 	srai	r21,r6,5
    8b90:	2cc00417 	ldw	r19,16(r5)
    8b94:	28800217 	ldw	r2,8(r5)
    8b98:	dd000415 	stw	r20,16(sp)
    8b9c:	ace7883a 	add	r19,r21,r19
    8ba0:	dc800215 	stw	r18,8(sp)
    8ba4:	dc400115 	stw	r17,4(sp)
    8ba8:	dc000015 	stw	r16,0(sp)
    8bac:	dfc00615 	stw	ra,24(sp)
    8bb0:	9c000044 	addi	r16,r19,1
    8bb4:	2823883a 	mov	r17,r5
    8bb8:	3029883a 	mov	r20,r6
    8bbc:	2025883a 	mov	r18,r4
    8bc0:	29400117 	ldw	r5,4(r5)
    8bc4:	1400030e 	bge	r2,r16,8bd4 <__lshift+0x54>
    8bc8:	1085883a 	add	r2,r2,r2
    8bcc:	29400044 	addi	r5,r5,1
    8bd0:	143ffd16 	blt	r2,r16,8bc8 <__alt_mem_onchip_memory2_0+0xf8007b38>
    8bd4:	9009883a 	mov	r4,r18
    8bd8:	00083440 	call	8344 <_Balloc>
    8bdc:	10c00504 	addi	r3,r2,20
    8be0:	0540070e 	bge	zero,r21,8c00 <__lshift+0x80>
    8be4:	ad6b883a 	add	r21,r21,r21
    8be8:	ad6b883a 	add	r21,r21,r21
    8bec:	1809883a 	mov	r4,r3
    8bf0:	1d47883a 	add	r3,r3,r21
    8bf4:	20000015 	stw	zero,0(r4)
    8bf8:	21000104 	addi	r4,r4,4
    8bfc:	193ffd1e 	bne	r3,r4,8bf4 <__alt_mem_onchip_memory2_0+0xf8007b64>
    8c00:	8a000417 	ldw	r8,16(r17)
    8c04:	89000504 	addi	r4,r17,20
    8c08:	a18007cc 	andi	r6,r20,31
    8c0c:	4211883a 	add	r8,r8,r8
    8c10:	4211883a 	add	r8,r8,r8
    8c14:	2211883a 	add	r8,r4,r8
    8c18:	30002326 	beq	r6,zero,8ca8 <__lshift+0x128>
    8c1c:	02400804 	movi	r9,32
    8c20:	4993c83a 	sub	r9,r9,r6
    8c24:	000b883a 	mov	r5,zero
    8c28:	21c00017 	ldw	r7,0(r4)
    8c2c:	1815883a 	mov	r10,r3
    8c30:	18c00104 	addi	r3,r3,4
    8c34:	398e983a 	sll	r7,r7,r6
    8c38:	21000104 	addi	r4,r4,4
    8c3c:	394ab03a 	or	r5,r7,r5
    8c40:	197fff15 	stw	r5,-4(r3)
    8c44:	217fff17 	ldw	r5,-4(r4)
    8c48:	2a4ad83a 	srl	r5,r5,r9
    8c4c:	223ff636 	bltu	r4,r8,8c28 <__alt_mem_onchip_memory2_0+0xf8007b98>
    8c50:	51400115 	stw	r5,4(r10)
    8c54:	28001a1e 	bne	r5,zero,8cc0 <__lshift+0x140>
    8c58:	843fffc4 	addi	r16,r16,-1
    8c5c:	14000415 	stw	r16,16(r2)
    8c60:	88000826 	beq	r17,zero,8c84 <__lshift+0x104>
    8c64:	89000117 	ldw	r4,4(r17)
    8c68:	90c01317 	ldw	r3,76(r18)
    8c6c:	2109883a 	add	r4,r4,r4
    8c70:	2109883a 	add	r4,r4,r4
    8c74:	1907883a 	add	r3,r3,r4
    8c78:	19000017 	ldw	r4,0(r3)
    8c7c:	89000015 	stw	r4,0(r17)
    8c80:	1c400015 	stw	r17,0(r3)
    8c84:	dfc00617 	ldw	ra,24(sp)
    8c88:	dd400517 	ldw	r21,20(sp)
    8c8c:	dd000417 	ldw	r20,16(sp)
    8c90:	dcc00317 	ldw	r19,12(sp)
    8c94:	dc800217 	ldw	r18,8(sp)
    8c98:	dc400117 	ldw	r17,4(sp)
    8c9c:	dc000017 	ldw	r16,0(sp)
    8ca0:	dec00704 	addi	sp,sp,28
    8ca4:	f800283a 	ret
    8ca8:	21400017 	ldw	r5,0(r4)
    8cac:	18c00104 	addi	r3,r3,4
    8cb0:	21000104 	addi	r4,r4,4
    8cb4:	197fff15 	stw	r5,-4(r3)
    8cb8:	223ffb36 	bltu	r4,r8,8ca8 <__alt_mem_onchip_memory2_0+0xf8007c18>
    8cbc:	003fe606 	br	8c58 <__alt_mem_onchip_memory2_0+0xf8007bc8>
    8cc0:	9c000084 	addi	r16,r19,2
    8cc4:	003fe406 	br	8c58 <__alt_mem_onchip_memory2_0+0xf8007bc8>

00008cc8 <__mcmp>:
    8cc8:	20800417 	ldw	r2,16(r4)
    8ccc:	28c00417 	ldw	r3,16(r5)
    8cd0:	10c5c83a 	sub	r2,r2,r3
    8cd4:	1000111e 	bne	r2,zero,8d1c <__mcmp+0x54>
    8cd8:	18c7883a 	add	r3,r3,r3
    8cdc:	18c7883a 	add	r3,r3,r3
    8ce0:	21000504 	addi	r4,r4,20
    8ce4:	29400504 	addi	r5,r5,20
    8ce8:	20c5883a 	add	r2,r4,r3
    8cec:	28cb883a 	add	r5,r5,r3
    8cf0:	00000106 	br	8cf8 <__mcmp+0x30>
    8cf4:	20800a2e 	bgeu	r4,r2,8d20 <__mcmp+0x58>
    8cf8:	10bfff04 	addi	r2,r2,-4
    8cfc:	297fff04 	addi	r5,r5,-4
    8d00:	11800017 	ldw	r6,0(r2)
    8d04:	28c00017 	ldw	r3,0(r5)
    8d08:	30fffa26 	beq	r6,r3,8cf4 <__alt_mem_onchip_memory2_0+0xf8007c64>
    8d0c:	30c00236 	bltu	r6,r3,8d18 <__mcmp+0x50>
    8d10:	00800044 	movi	r2,1
    8d14:	f800283a 	ret
    8d18:	00bfffc4 	movi	r2,-1
    8d1c:	f800283a 	ret
    8d20:	0005883a 	mov	r2,zero
    8d24:	f800283a 	ret

00008d28 <__mdiff>:
    8d28:	28c00417 	ldw	r3,16(r5)
    8d2c:	30800417 	ldw	r2,16(r6)
    8d30:	defffa04 	addi	sp,sp,-24
    8d34:	dcc00315 	stw	r19,12(sp)
    8d38:	dc800215 	stw	r18,8(sp)
    8d3c:	dfc00515 	stw	ra,20(sp)
    8d40:	dd000415 	stw	r20,16(sp)
    8d44:	dc400115 	stw	r17,4(sp)
    8d48:	dc000015 	stw	r16,0(sp)
    8d4c:	1887c83a 	sub	r3,r3,r2
    8d50:	2825883a 	mov	r18,r5
    8d54:	3027883a 	mov	r19,r6
    8d58:	1800141e 	bne	r3,zero,8dac <__mdiff+0x84>
    8d5c:	1085883a 	add	r2,r2,r2
    8d60:	1085883a 	add	r2,r2,r2
    8d64:	2a000504 	addi	r8,r5,20
    8d68:	34000504 	addi	r16,r6,20
    8d6c:	4087883a 	add	r3,r8,r2
    8d70:	8085883a 	add	r2,r16,r2
    8d74:	00000106 	br	8d7c <__mdiff+0x54>
    8d78:	40c0592e 	bgeu	r8,r3,8ee0 <__mdiff+0x1b8>
    8d7c:	18ffff04 	addi	r3,r3,-4
    8d80:	10bfff04 	addi	r2,r2,-4
    8d84:	19c00017 	ldw	r7,0(r3)
    8d88:	11400017 	ldw	r5,0(r2)
    8d8c:	397ffa26 	beq	r7,r5,8d78 <__alt_mem_onchip_memory2_0+0xf8007ce8>
    8d90:	3940592e 	bgeu	r7,r5,8ef8 <__mdiff+0x1d0>
    8d94:	9005883a 	mov	r2,r18
    8d98:	4023883a 	mov	r17,r8
    8d9c:	9825883a 	mov	r18,r19
    8da0:	05000044 	movi	r20,1
    8da4:	1027883a 	mov	r19,r2
    8da8:	00000406 	br	8dbc <__mdiff+0x94>
    8dac:	18005616 	blt	r3,zero,8f08 <__mdiff+0x1e0>
    8db0:	34400504 	addi	r17,r6,20
    8db4:	2c000504 	addi	r16,r5,20
    8db8:	0029883a 	mov	r20,zero
    8dbc:	91400117 	ldw	r5,4(r18)
    8dc0:	00083440 	call	8344 <_Balloc>
    8dc4:	92400417 	ldw	r9,16(r18)
    8dc8:	9b000417 	ldw	r12,16(r19)
    8dcc:	12c00504 	addi	r11,r2,20
    8dd0:	4a51883a 	add	r8,r9,r9
    8dd4:	6319883a 	add	r12,r12,r12
    8dd8:	4211883a 	add	r8,r8,r8
    8ddc:	6319883a 	add	r12,r12,r12
    8de0:	15000315 	stw	r20,12(r2)
    8de4:	8211883a 	add	r8,r16,r8
    8de8:	8b19883a 	add	r12,r17,r12
    8dec:	0007883a 	mov	r3,zero
    8df0:	81400017 	ldw	r5,0(r16)
    8df4:	89c00017 	ldw	r7,0(r17)
    8df8:	59800104 	addi	r6,r11,4
    8dfc:	293fffcc 	andi	r4,r5,65535
    8e00:	20c7883a 	add	r3,r4,r3
    8e04:	393fffcc 	andi	r4,r7,65535
    8e08:	1909c83a 	sub	r4,r3,r4
    8e0c:	280ad43a 	srli	r5,r5,16
    8e10:	380ed43a 	srli	r7,r7,16
    8e14:	2007d43a 	srai	r3,r4,16
    8e18:	213fffcc 	andi	r4,r4,65535
    8e1c:	29cbc83a 	sub	r5,r5,r7
    8e20:	28c7883a 	add	r3,r5,r3
    8e24:	180a943a 	slli	r5,r3,16
    8e28:	8c400104 	addi	r17,r17,4
    8e2c:	84000104 	addi	r16,r16,4
    8e30:	2908b03a 	or	r4,r5,r4
    8e34:	59000015 	stw	r4,0(r11)
    8e38:	1807d43a 	srai	r3,r3,16
    8e3c:	3015883a 	mov	r10,r6
    8e40:	3017883a 	mov	r11,r6
    8e44:	8b3fea36 	bltu	r17,r12,8df0 <__alt_mem_onchip_memory2_0+0xf8007d60>
    8e48:	8200162e 	bgeu	r16,r8,8ea4 <__mdiff+0x17c>
    8e4c:	8017883a 	mov	r11,r16
    8e50:	59400017 	ldw	r5,0(r11)
    8e54:	31800104 	addi	r6,r6,4
    8e58:	5ac00104 	addi	r11,r11,4
    8e5c:	293fffcc 	andi	r4,r5,65535
    8e60:	20c7883a 	add	r3,r4,r3
    8e64:	280ed43a 	srli	r7,r5,16
    8e68:	180bd43a 	srai	r5,r3,16
    8e6c:	193fffcc 	andi	r4,r3,65535
    8e70:	3947883a 	add	r3,r7,r5
    8e74:	180a943a 	slli	r5,r3,16
    8e78:	1807d43a 	srai	r3,r3,16
    8e7c:	2908b03a 	or	r4,r5,r4
    8e80:	313fff15 	stw	r4,-4(r6)
    8e84:	5a3ff236 	bltu	r11,r8,8e50 <__alt_mem_onchip_memory2_0+0xf8007dc0>
    8e88:	0406303a 	nor	r3,zero,r16
    8e8c:	1a07883a 	add	r3,r3,r8
    8e90:	1806d0ba 	srli	r3,r3,2
    8e94:	18c00044 	addi	r3,r3,1
    8e98:	18c7883a 	add	r3,r3,r3
    8e9c:	18c7883a 	add	r3,r3,r3
    8ea0:	50d5883a 	add	r10,r10,r3
    8ea4:	50ffff04 	addi	r3,r10,-4
    8ea8:	2000041e 	bne	r4,zero,8ebc <__mdiff+0x194>
    8eac:	18ffff04 	addi	r3,r3,-4
    8eb0:	19000017 	ldw	r4,0(r3)
    8eb4:	4a7fffc4 	addi	r9,r9,-1
    8eb8:	203ffc26 	beq	r4,zero,8eac <__alt_mem_onchip_memory2_0+0xf8007e1c>
    8ebc:	12400415 	stw	r9,16(r2)
    8ec0:	dfc00517 	ldw	ra,20(sp)
    8ec4:	dd000417 	ldw	r20,16(sp)
    8ec8:	dcc00317 	ldw	r19,12(sp)
    8ecc:	dc800217 	ldw	r18,8(sp)
    8ed0:	dc400117 	ldw	r17,4(sp)
    8ed4:	dc000017 	ldw	r16,0(sp)
    8ed8:	dec00604 	addi	sp,sp,24
    8edc:	f800283a 	ret
    8ee0:	000b883a 	mov	r5,zero
    8ee4:	00083440 	call	8344 <_Balloc>
    8ee8:	00c00044 	movi	r3,1
    8eec:	10c00415 	stw	r3,16(r2)
    8ef0:	10000515 	stw	zero,20(r2)
    8ef4:	003ff206 	br	8ec0 <__alt_mem_onchip_memory2_0+0xf8007e30>
    8ef8:	8023883a 	mov	r17,r16
    8efc:	0029883a 	mov	r20,zero
    8f00:	4021883a 	mov	r16,r8
    8f04:	003fad06 	br	8dbc <__alt_mem_onchip_memory2_0+0xf8007d2c>
    8f08:	9005883a 	mov	r2,r18
    8f0c:	94400504 	addi	r17,r18,20
    8f10:	9c000504 	addi	r16,r19,20
    8f14:	9825883a 	mov	r18,r19
    8f18:	05000044 	movi	r20,1
    8f1c:	1027883a 	mov	r19,r2
    8f20:	003fa606 	br	8dbc <__alt_mem_onchip_memory2_0+0xf8007d2c>

00008f24 <__ulp>:
    8f24:	295ffc2c 	andhi	r5,r5,32752
    8f28:	00bf3034 	movhi	r2,64704
    8f2c:	2887883a 	add	r3,r5,r2
    8f30:	00c0020e 	bge	zero,r3,8f3c <__ulp+0x18>
    8f34:	0005883a 	mov	r2,zero
    8f38:	f800283a 	ret
    8f3c:	00c7c83a 	sub	r3,zero,r3
    8f40:	1807d53a 	srai	r3,r3,20
    8f44:	008004c4 	movi	r2,19
    8f48:	10c00b0e 	bge	r2,r3,8f78 <__ulp+0x54>
    8f4c:	18bffb04 	addi	r2,r3,-20
    8f50:	01000784 	movi	r4,30
    8f54:	0007883a 	mov	r3,zero
    8f58:	20800516 	blt	r4,r2,8f70 <__ulp+0x4c>
    8f5c:	010007c4 	movi	r4,31
    8f60:	2089c83a 	sub	r4,r4,r2
    8f64:	00800044 	movi	r2,1
    8f68:	1104983a 	sll	r2,r2,r4
    8f6c:	f800283a 	ret
    8f70:	00800044 	movi	r2,1
    8f74:	f800283a 	ret
    8f78:	01400234 	movhi	r5,8
    8f7c:	28c7d83a 	sra	r3,r5,r3
    8f80:	0005883a 	mov	r2,zero
    8f84:	f800283a 	ret

00008f88 <__b2d>:
    8f88:	defffa04 	addi	sp,sp,-24
    8f8c:	dc000015 	stw	r16,0(sp)
    8f90:	24000417 	ldw	r16,16(r4)
    8f94:	dc400115 	stw	r17,4(sp)
    8f98:	24400504 	addi	r17,r4,20
    8f9c:	8421883a 	add	r16,r16,r16
    8fa0:	8421883a 	add	r16,r16,r16
    8fa4:	8c21883a 	add	r16,r17,r16
    8fa8:	dc800215 	stw	r18,8(sp)
    8fac:	84bfff17 	ldw	r18,-4(r16)
    8fb0:	dd000415 	stw	r20,16(sp)
    8fb4:	dcc00315 	stw	r19,12(sp)
    8fb8:	9009883a 	mov	r4,r18
    8fbc:	2829883a 	mov	r20,r5
    8fc0:	dfc00515 	stw	ra,20(sp)
    8fc4:	00086600 	call	8660 <__hi0bits>
    8fc8:	00c00804 	movi	r3,32
    8fcc:	1889c83a 	sub	r4,r3,r2
    8fd0:	a1000015 	stw	r4,0(r20)
    8fd4:	01000284 	movi	r4,10
    8fd8:	84ffff04 	addi	r19,r16,-4
    8fdc:	20801216 	blt	r4,r2,9028 <__b2d+0xa0>
    8fe0:	018002c4 	movi	r6,11
    8fe4:	308dc83a 	sub	r6,r6,r2
    8fe8:	9186d83a 	srl	r3,r18,r6
    8fec:	18cffc34 	orhi	r3,r3,16368
    8ff0:	8cc0212e 	bgeu	r17,r19,9078 <__b2d+0xf0>
    8ff4:	813ffe17 	ldw	r4,-8(r16)
    8ff8:	218cd83a 	srl	r6,r4,r6
    8ffc:	10800544 	addi	r2,r2,21
    9000:	9084983a 	sll	r2,r18,r2
    9004:	1184b03a 	or	r2,r2,r6
    9008:	dfc00517 	ldw	ra,20(sp)
    900c:	dd000417 	ldw	r20,16(sp)
    9010:	dcc00317 	ldw	r19,12(sp)
    9014:	dc800217 	ldw	r18,8(sp)
    9018:	dc400117 	ldw	r17,4(sp)
    901c:	dc000017 	ldw	r16,0(sp)
    9020:	dec00604 	addi	sp,sp,24
    9024:	f800283a 	ret
    9028:	8cc00f2e 	bgeu	r17,r19,9068 <__b2d+0xe0>
    902c:	117ffd44 	addi	r5,r2,-11
    9030:	80bffe17 	ldw	r2,-8(r16)
    9034:	28000e26 	beq	r5,zero,9070 <__b2d+0xe8>
    9038:	1949c83a 	sub	r4,r3,r5
    903c:	9164983a 	sll	r18,r18,r5
    9040:	1106d83a 	srl	r3,r2,r4
    9044:	81bffe04 	addi	r6,r16,-8
    9048:	948ffc34 	orhi	r18,r18,16368
    904c:	90c6b03a 	or	r3,r18,r3
    9050:	89800e2e 	bgeu	r17,r6,908c <__b2d+0x104>
    9054:	81bffd17 	ldw	r6,-12(r16)
    9058:	1144983a 	sll	r2,r2,r5
    905c:	310ad83a 	srl	r5,r6,r4
    9060:	2884b03a 	or	r2,r5,r2
    9064:	003fe806 	br	9008 <__alt_mem_onchip_memory2_0+0xf8007f78>
    9068:	10bffd44 	addi	r2,r2,-11
    906c:	1000041e 	bne	r2,zero,9080 <__b2d+0xf8>
    9070:	90cffc34 	orhi	r3,r18,16368
    9074:	003fe406 	br	9008 <__alt_mem_onchip_memory2_0+0xf8007f78>
    9078:	000d883a 	mov	r6,zero
    907c:	003fdf06 	br	8ffc <__alt_mem_onchip_memory2_0+0xf8007f6c>
    9080:	90a4983a 	sll	r18,r18,r2
    9084:	0005883a 	mov	r2,zero
    9088:	003ff906 	br	9070 <__alt_mem_onchip_memory2_0+0xf8007fe0>
    908c:	1144983a 	sll	r2,r2,r5
    9090:	003fdd06 	br	9008 <__alt_mem_onchip_memory2_0+0xf8007f78>

00009094 <__d2b>:
    9094:	defff804 	addi	sp,sp,-32
    9098:	dc000215 	stw	r16,8(sp)
    909c:	3021883a 	mov	r16,r6
    90a0:	dc400315 	stw	r17,12(sp)
    90a4:	8022907a 	slli	r17,r16,1
    90a8:	dd000615 	stw	r20,24(sp)
    90ac:	2829883a 	mov	r20,r5
    90b0:	01400044 	movi	r5,1
    90b4:	dcc00515 	stw	r19,20(sp)
    90b8:	dc800415 	stw	r18,16(sp)
    90bc:	dfc00715 	stw	ra,28(sp)
    90c0:	3825883a 	mov	r18,r7
    90c4:	8822d57a 	srli	r17,r17,21
    90c8:	00083440 	call	8344 <_Balloc>
    90cc:	1027883a 	mov	r19,r2
    90d0:	00800434 	movhi	r2,16
    90d4:	10bfffc4 	addi	r2,r2,-1
    90d8:	808c703a 	and	r6,r16,r2
    90dc:	88000126 	beq	r17,zero,90e4 <__d2b+0x50>
    90e0:	31800434 	orhi	r6,r6,16
    90e4:	d9800015 	stw	r6,0(sp)
    90e8:	a0002426 	beq	r20,zero,917c <__d2b+0xe8>
    90ec:	d9000104 	addi	r4,sp,4
    90f0:	dd000115 	stw	r20,4(sp)
    90f4:	00086c80 	call	86c8 <__lo0bits>
    90f8:	d8c00017 	ldw	r3,0(sp)
    90fc:	10002f1e 	bne	r2,zero,91bc <__d2b+0x128>
    9100:	d9000117 	ldw	r4,4(sp)
    9104:	99000515 	stw	r4,20(r19)
    9108:	1821003a 	cmpeq	r16,r3,zero
    910c:	01000084 	movi	r4,2
    9110:	2421c83a 	sub	r16,r4,r16
    9114:	98c00615 	stw	r3,24(r19)
    9118:	9c000415 	stw	r16,16(r19)
    911c:	88001f1e 	bne	r17,zero,919c <__d2b+0x108>
    9120:	10bef384 	addi	r2,r2,-1074
    9124:	90800015 	stw	r2,0(r18)
    9128:	00900034 	movhi	r2,16384
    912c:	10bfffc4 	addi	r2,r2,-1
    9130:	8085883a 	add	r2,r16,r2
    9134:	1085883a 	add	r2,r2,r2
    9138:	1085883a 	add	r2,r2,r2
    913c:	9885883a 	add	r2,r19,r2
    9140:	11000517 	ldw	r4,20(r2)
    9144:	8020917a 	slli	r16,r16,5
    9148:	00086600 	call	8660 <__hi0bits>
    914c:	d8c00817 	ldw	r3,32(sp)
    9150:	8085c83a 	sub	r2,r16,r2
    9154:	18800015 	stw	r2,0(r3)
    9158:	9805883a 	mov	r2,r19
    915c:	dfc00717 	ldw	ra,28(sp)
    9160:	dd000617 	ldw	r20,24(sp)
    9164:	dcc00517 	ldw	r19,20(sp)
    9168:	dc800417 	ldw	r18,16(sp)
    916c:	dc400317 	ldw	r17,12(sp)
    9170:	dc000217 	ldw	r16,8(sp)
    9174:	dec00804 	addi	sp,sp,32
    9178:	f800283a 	ret
    917c:	d809883a 	mov	r4,sp
    9180:	00086c80 	call	86c8 <__lo0bits>
    9184:	d8c00017 	ldw	r3,0(sp)
    9188:	04000044 	movi	r16,1
    918c:	9c000415 	stw	r16,16(r19)
    9190:	98c00515 	stw	r3,20(r19)
    9194:	10800804 	addi	r2,r2,32
    9198:	883fe126 	beq	r17,zero,9120 <__alt_mem_onchip_memory2_0+0xf8008090>
    919c:	00c00d44 	movi	r3,53
    91a0:	8c7ef344 	addi	r17,r17,-1075
    91a4:	88a3883a 	add	r17,r17,r2
    91a8:	1885c83a 	sub	r2,r3,r2
    91ac:	d8c00817 	ldw	r3,32(sp)
    91b0:	94400015 	stw	r17,0(r18)
    91b4:	18800015 	stw	r2,0(r3)
    91b8:	003fe706 	br	9158 <__alt_mem_onchip_memory2_0+0xf80080c8>
    91bc:	01000804 	movi	r4,32
    91c0:	2089c83a 	sub	r4,r4,r2
    91c4:	1908983a 	sll	r4,r3,r4
    91c8:	d9400117 	ldw	r5,4(sp)
    91cc:	1886d83a 	srl	r3,r3,r2
    91d0:	2148b03a 	or	r4,r4,r5
    91d4:	99000515 	stw	r4,20(r19)
    91d8:	d8c00015 	stw	r3,0(sp)
    91dc:	003fca06 	br	9108 <__alt_mem_onchip_memory2_0+0xf8008078>

000091e0 <__ratio>:
    91e0:	defff904 	addi	sp,sp,-28
    91e4:	dc400315 	stw	r17,12(sp)
    91e8:	2823883a 	mov	r17,r5
    91ec:	d9400104 	addi	r5,sp,4
    91f0:	dfc00615 	stw	ra,24(sp)
    91f4:	dcc00515 	stw	r19,20(sp)
    91f8:	dc800415 	stw	r18,16(sp)
    91fc:	2027883a 	mov	r19,r4
    9200:	dc000215 	stw	r16,8(sp)
    9204:	0008f880 	call	8f88 <__b2d>
    9208:	d80b883a 	mov	r5,sp
    920c:	8809883a 	mov	r4,r17
    9210:	1025883a 	mov	r18,r2
    9214:	1821883a 	mov	r16,r3
    9218:	0008f880 	call	8f88 <__b2d>
    921c:	8a000417 	ldw	r8,16(r17)
    9220:	99000417 	ldw	r4,16(r19)
    9224:	d9400117 	ldw	r5,4(sp)
    9228:	2209c83a 	sub	r4,r4,r8
    922c:	2010917a 	slli	r8,r4,5
    9230:	d9000017 	ldw	r4,0(sp)
    9234:	2909c83a 	sub	r4,r5,r4
    9238:	4109883a 	add	r4,r8,r4
    923c:	01000e0e 	bge	zero,r4,9278 <__ratio+0x98>
    9240:	2008953a 	slli	r4,r4,20
    9244:	2421883a 	add	r16,r4,r16
    9248:	100d883a 	mov	r6,r2
    924c:	180f883a 	mov	r7,r3
    9250:	9009883a 	mov	r4,r18
    9254:	800b883a 	mov	r5,r16
    9258:	000d2cc0 	call	d2cc <__divdf3>
    925c:	dfc00617 	ldw	ra,24(sp)
    9260:	dcc00517 	ldw	r19,20(sp)
    9264:	dc800417 	ldw	r18,16(sp)
    9268:	dc400317 	ldw	r17,12(sp)
    926c:	dc000217 	ldw	r16,8(sp)
    9270:	dec00704 	addi	sp,sp,28
    9274:	f800283a 	ret
    9278:	2008953a 	slli	r4,r4,20
    927c:	1907c83a 	sub	r3,r3,r4
    9280:	003ff106 	br	9248 <__alt_mem_onchip_memory2_0+0xf80081b8>

00009284 <_mprec_log10>:
    9284:	defffe04 	addi	sp,sp,-8
    9288:	dc000015 	stw	r16,0(sp)
    928c:	dfc00115 	stw	ra,4(sp)
    9290:	008005c4 	movi	r2,23
    9294:	2021883a 	mov	r16,r4
    9298:	11000d0e 	bge	r2,r4,92d0 <_mprec_log10+0x4c>
    929c:	0005883a 	mov	r2,zero
    92a0:	00cffc34 	movhi	r3,16368
    92a4:	843fffc4 	addi	r16,r16,-1
    92a8:	000d883a 	mov	r6,zero
    92ac:	01d00934 	movhi	r7,16420
    92b0:	1009883a 	mov	r4,r2
    92b4:	180b883a 	mov	r5,r3
    92b8:	000def40 	call	def4 <__muldf3>
    92bc:	803ff91e 	bne	r16,zero,92a4 <__alt_mem_onchip_memory2_0+0xf8008214>
    92c0:	dfc00117 	ldw	ra,4(sp)
    92c4:	dc000017 	ldw	r16,0(sp)
    92c8:	dec00204 	addi	sp,sp,8
    92cc:	f800283a 	ret
    92d0:	202090fa 	slli	r16,r4,3
    92d4:	00800074 	movhi	r2,1
    92d8:	1088da04 	addi	r2,r2,9064
    92dc:	1421883a 	add	r16,r2,r16
    92e0:	80800017 	ldw	r2,0(r16)
    92e4:	80c00117 	ldw	r3,4(r16)
    92e8:	dfc00117 	ldw	ra,4(sp)
    92ec:	dc000017 	ldw	r16,0(sp)
    92f0:	dec00204 	addi	sp,sp,8
    92f4:	f800283a 	ret

000092f8 <__copybits>:
    92f8:	297fffc4 	addi	r5,r5,-1
    92fc:	280fd17a 	srai	r7,r5,5
    9300:	30c00417 	ldw	r3,16(r6)
    9304:	30800504 	addi	r2,r6,20
    9308:	39c00044 	addi	r7,r7,1
    930c:	18c7883a 	add	r3,r3,r3
    9310:	39cf883a 	add	r7,r7,r7
    9314:	18c7883a 	add	r3,r3,r3
    9318:	39cf883a 	add	r7,r7,r7
    931c:	10c7883a 	add	r3,r2,r3
    9320:	21cf883a 	add	r7,r4,r7
    9324:	10c00d2e 	bgeu	r2,r3,935c <__copybits+0x64>
    9328:	200b883a 	mov	r5,r4
    932c:	12000017 	ldw	r8,0(r2)
    9330:	29400104 	addi	r5,r5,4
    9334:	10800104 	addi	r2,r2,4
    9338:	2a3fff15 	stw	r8,-4(r5)
    933c:	10fffb36 	bltu	r2,r3,932c <__alt_mem_onchip_memory2_0+0xf800829c>
    9340:	1985c83a 	sub	r2,r3,r6
    9344:	10bffac4 	addi	r2,r2,-21
    9348:	1004d0ba 	srli	r2,r2,2
    934c:	10800044 	addi	r2,r2,1
    9350:	1085883a 	add	r2,r2,r2
    9354:	1085883a 	add	r2,r2,r2
    9358:	2089883a 	add	r4,r4,r2
    935c:	21c0032e 	bgeu	r4,r7,936c <__copybits+0x74>
    9360:	20000015 	stw	zero,0(r4)
    9364:	21000104 	addi	r4,r4,4
    9368:	21fffd36 	bltu	r4,r7,9360 <__alt_mem_onchip_memory2_0+0xf80082d0>
    936c:	f800283a 	ret

00009370 <__any_on>:
    9370:	20c00417 	ldw	r3,16(r4)
    9374:	2805d17a 	srai	r2,r5,5
    9378:	21000504 	addi	r4,r4,20
    937c:	18800d0e 	bge	r3,r2,93b4 <__any_on+0x44>
    9380:	18c7883a 	add	r3,r3,r3
    9384:	18c7883a 	add	r3,r3,r3
    9388:	20c7883a 	add	r3,r4,r3
    938c:	20c0192e 	bgeu	r4,r3,93f4 <__any_on+0x84>
    9390:	18bfff17 	ldw	r2,-4(r3)
    9394:	18ffff04 	addi	r3,r3,-4
    9398:	1000041e 	bne	r2,zero,93ac <__any_on+0x3c>
    939c:	20c0142e 	bgeu	r4,r3,93f0 <__any_on+0x80>
    93a0:	18ffff04 	addi	r3,r3,-4
    93a4:	19400017 	ldw	r5,0(r3)
    93a8:	283ffc26 	beq	r5,zero,939c <__alt_mem_onchip_memory2_0+0xf800830c>
    93ac:	00800044 	movi	r2,1
    93b0:	f800283a 	ret
    93b4:	10c00a0e 	bge	r2,r3,93e0 <__any_on+0x70>
    93b8:	1085883a 	add	r2,r2,r2
    93bc:	1085883a 	add	r2,r2,r2
    93c0:	294007cc 	andi	r5,r5,31
    93c4:	2087883a 	add	r3,r4,r2
    93c8:	283ff026 	beq	r5,zero,938c <__alt_mem_onchip_memory2_0+0xf80082fc>
    93cc:	19800017 	ldw	r6,0(r3)
    93d0:	3144d83a 	srl	r2,r6,r5
    93d4:	114a983a 	sll	r5,r2,r5
    93d8:	317ff41e 	bne	r6,r5,93ac <__alt_mem_onchip_memory2_0+0xf800831c>
    93dc:	003feb06 	br	938c <__alt_mem_onchip_memory2_0+0xf80082fc>
    93e0:	1085883a 	add	r2,r2,r2
    93e4:	1085883a 	add	r2,r2,r2
    93e8:	2087883a 	add	r3,r4,r2
    93ec:	003fe706 	br	938c <__alt_mem_onchip_memory2_0+0xf80082fc>
    93f0:	f800283a 	ret
    93f4:	0005883a 	mov	r2,zero
    93f8:	f800283a 	ret

000093fc <_realloc_r>:
    93fc:	defff604 	addi	sp,sp,-40
    9400:	dc800215 	stw	r18,8(sp)
    9404:	dfc00915 	stw	ra,36(sp)
    9408:	df000815 	stw	fp,32(sp)
    940c:	ddc00715 	stw	r23,28(sp)
    9410:	dd800615 	stw	r22,24(sp)
    9414:	dd400515 	stw	r21,20(sp)
    9418:	dd000415 	stw	r20,16(sp)
    941c:	dcc00315 	stw	r19,12(sp)
    9420:	dc400115 	stw	r17,4(sp)
    9424:	dc000015 	stw	r16,0(sp)
    9428:	3025883a 	mov	r18,r6
    942c:	2800b726 	beq	r5,zero,970c <_realloc_r+0x310>
    9430:	282b883a 	mov	r21,r5
    9434:	2029883a 	mov	r20,r4
    9438:	000f8600 	call	f860 <__malloc_lock>
    943c:	a8bfff17 	ldw	r2,-4(r21)
    9440:	043fff04 	movi	r16,-4
    9444:	90c002c4 	addi	r3,r18,11
    9448:	01000584 	movi	r4,22
    944c:	acfffe04 	addi	r19,r21,-8
    9450:	1420703a 	and	r16,r2,r16
    9454:	20c0332e 	bgeu	r4,r3,9524 <_realloc_r+0x128>
    9458:	047ffe04 	movi	r17,-8
    945c:	1c62703a 	and	r17,r3,r17
    9460:	8807883a 	mov	r3,r17
    9464:	88005816 	blt	r17,zero,95c8 <_realloc_r+0x1cc>
    9468:	8c805736 	bltu	r17,r18,95c8 <_realloc_r+0x1cc>
    946c:	80c0300e 	bge	r16,r3,9530 <_realloc_r+0x134>
    9470:	07000074 	movhi	fp,1
    9474:	e70a8804 	addi	fp,fp,10784
    9478:	e1c00217 	ldw	r7,8(fp)
    947c:	9c09883a 	add	r4,r19,r16
    9480:	22000117 	ldw	r8,4(r4)
    9484:	21c06326 	beq	r4,r7,9614 <_realloc_r+0x218>
    9488:	017fff84 	movi	r5,-2
    948c:	414a703a 	and	r5,r8,r5
    9490:	214b883a 	add	r5,r4,r5
    9494:	29800117 	ldw	r6,4(r5)
    9498:	3180004c 	andi	r6,r6,1
    949c:	30003f26 	beq	r6,zero,959c <_realloc_r+0x1a0>
    94a0:	1080004c 	andi	r2,r2,1
    94a4:	10008326 	beq	r2,zero,96b4 <_realloc_r+0x2b8>
    94a8:	900b883a 	mov	r5,r18
    94ac:	a009883a 	mov	r4,r20
    94b0:	00076880 	call	7688 <_malloc_r>
    94b4:	1025883a 	mov	r18,r2
    94b8:	10011e26 	beq	r2,zero,9934 <_realloc_r+0x538>
    94bc:	a93fff17 	ldw	r4,-4(r21)
    94c0:	10fffe04 	addi	r3,r2,-8
    94c4:	00bfff84 	movi	r2,-2
    94c8:	2084703a 	and	r2,r4,r2
    94cc:	9885883a 	add	r2,r19,r2
    94d0:	1880ee26 	beq	r3,r2,988c <_realloc_r+0x490>
    94d4:	81bfff04 	addi	r6,r16,-4
    94d8:	00800904 	movi	r2,36
    94dc:	1180b836 	bltu	r2,r6,97c0 <_realloc_r+0x3c4>
    94e0:	00c004c4 	movi	r3,19
    94e4:	19809636 	bltu	r3,r6,9740 <_realloc_r+0x344>
    94e8:	9005883a 	mov	r2,r18
    94ec:	a807883a 	mov	r3,r21
    94f0:	19000017 	ldw	r4,0(r3)
    94f4:	11000015 	stw	r4,0(r2)
    94f8:	19000117 	ldw	r4,4(r3)
    94fc:	11000115 	stw	r4,4(r2)
    9500:	18c00217 	ldw	r3,8(r3)
    9504:	10c00215 	stw	r3,8(r2)
    9508:	a80b883a 	mov	r5,r21
    950c:	a009883a 	mov	r4,r20
    9510:	0006a900 	call	6a90 <_free_r>
    9514:	a009883a 	mov	r4,r20
    9518:	000f8840 	call	f884 <__malloc_unlock>
    951c:	9005883a 	mov	r2,r18
    9520:	00001206 	br	956c <_realloc_r+0x170>
    9524:	00c00404 	movi	r3,16
    9528:	1823883a 	mov	r17,r3
    952c:	003fce06 	br	9468 <__alt_mem_onchip_memory2_0+0xf80083d8>
    9530:	a825883a 	mov	r18,r21
    9534:	8445c83a 	sub	r2,r16,r17
    9538:	00c003c4 	movi	r3,15
    953c:	18802636 	bltu	r3,r2,95d8 <_realloc_r+0x1dc>
    9540:	99800117 	ldw	r6,4(r19)
    9544:	9c07883a 	add	r3,r19,r16
    9548:	3180004c 	andi	r6,r6,1
    954c:	3420b03a 	or	r16,r6,r16
    9550:	9c000115 	stw	r16,4(r19)
    9554:	18800117 	ldw	r2,4(r3)
    9558:	10800054 	ori	r2,r2,1
    955c:	18800115 	stw	r2,4(r3)
    9560:	a009883a 	mov	r4,r20
    9564:	000f8840 	call	f884 <__malloc_unlock>
    9568:	9005883a 	mov	r2,r18
    956c:	dfc00917 	ldw	ra,36(sp)
    9570:	df000817 	ldw	fp,32(sp)
    9574:	ddc00717 	ldw	r23,28(sp)
    9578:	dd800617 	ldw	r22,24(sp)
    957c:	dd400517 	ldw	r21,20(sp)
    9580:	dd000417 	ldw	r20,16(sp)
    9584:	dcc00317 	ldw	r19,12(sp)
    9588:	dc800217 	ldw	r18,8(sp)
    958c:	dc400117 	ldw	r17,4(sp)
    9590:	dc000017 	ldw	r16,0(sp)
    9594:	dec00a04 	addi	sp,sp,40
    9598:	f800283a 	ret
    959c:	017fff04 	movi	r5,-4
    95a0:	414a703a 	and	r5,r8,r5
    95a4:	814d883a 	add	r6,r16,r5
    95a8:	30c01f16 	blt	r6,r3,9628 <_realloc_r+0x22c>
    95ac:	20800317 	ldw	r2,12(r4)
    95b0:	20c00217 	ldw	r3,8(r4)
    95b4:	a825883a 	mov	r18,r21
    95b8:	3021883a 	mov	r16,r6
    95bc:	18800315 	stw	r2,12(r3)
    95c0:	10c00215 	stw	r3,8(r2)
    95c4:	003fdb06 	br	9534 <__alt_mem_onchip_memory2_0+0xf80084a4>
    95c8:	00800304 	movi	r2,12
    95cc:	a0800015 	stw	r2,0(r20)
    95d0:	0005883a 	mov	r2,zero
    95d4:	003fe506 	br	956c <__alt_mem_onchip_memory2_0+0xf80084dc>
    95d8:	98c00117 	ldw	r3,4(r19)
    95dc:	9c4b883a 	add	r5,r19,r17
    95e0:	11000054 	ori	r4,r2,1
    95e4:	18c0004c 	andi	r3,r3,1
    95e8:	1c62b03a 	or	r17,r3,r17
    95ec:	9c400115 	stw	r17,4(r19)
    95f0:	29000115 	stw	r4,4(r5)
    95f4:	2885883a 	add	r2,r5,r2
    95f8:	10c00117 	ldw	r3,4(r2)
    95fc:	29400204 	addi	r5,r5,8
    9600:	a009883a 	mov	r4,r20
    9604:	18c00054 	ori	r3,r3,1
    9608:	10c00115 	stw	r3,4(r2)
    960c:	0006a900 	call	6a90 <_free_r>
    9610:	003fd306 	br	9560 <__alt_mem_onchip_memory2_0+0xf80084d0>
    9614:	017fff04 	movi	r5,-4
    9618:	414a703a 	and	r5,r8,r5
    961c:	89800404 	addi	r6,r17,16
    9620:	8151883a 	add	r8,r16,r5
    9624:	4180590e 	bge	r8,r6,978c <_realloc_r+0x390>
    9628:	1080004c 	andi	r2,r2,1
    962c:	103f9e1e 	bne	r2,zero,94a8 <__alt_mem_onchip_memory2_0+0xf8008418>
    9630:	adbffe17 	ldw	r22,-8(r21)
    9634:	00bfff04 	movi	r2,-4
    9638:	9dadc83a 	sub	r22,r19,r22
    963c:	b1800117 	ldw	r6,4(r22)
    9640:	3084703a 	and	r2,r6,r2
    9644:	20002026 	beq	r4,zero,96c8 <_realloc_r+0x2cc>
    9648:	80af883a 	add	r23,r16,r2
    964c:	b96f883a 	add	r23,r23,r5
    9650:	21c05f26 	beq	r4,r7,97d0 <_realloc_r+0x3d4>
    9654:	b8c01c16 	blt	r23,r3,96c8 <_realloc_r+0x2cc>
    9658:	20800317 	ldw	r2,12(r4)
    965c:	20c00217 	ldw	r3,8(r4)
    9660:	81bfff04 	addi	r6,r16,-4
    9664:	01000904 	movi	r4,36
    9668:	18800315 	stw	r2,12(r3)
    966c:	10c00215 	stw	r3,8(r2)
    9670:	b0c00217 	ldw	r3,8(r22)
    9674:	b0800317 	ldw	r2,12(r22)
    9678:	b4800204 	addi	r18,r22,8
    967c:	18800315 	stw	r2,12(r3)
    9680:	10c00215 	stw	r3,8(r2)
    9684:	21801b36 	bltu	r4,r6,96f4 <_realloc_r+0x2f8>
    9688:	008004c4 	movi	r2,19
    968c:	1180352e 	bgeu	r2,r6,9764 <_realloc_r+0x368>
    9690:	a8800017 	ldw	r2,0(r21)
    9694:	b0800215 	stw	r2,8(r22)
    9698:	a8800117 	ldw	r2,4(r21)
    969c:	b0800315 	stw	r2,12(r22)
    96a0:	008006c4 	movi	r2,27
    96a4:	11807f36 	bltu	r2,r6,98a4 <_realloc_r+0x4a8>
    96a8:	b0800404 	addi	r2,r22,16
    96ac:	ad400204 	addi	r21,r21,8
    96b0:	00002d06 	br	9768 <_realloc_r+0x36c>
    96b4:	adbffe17 	ldw	r22,-8(r21)
    96b8:	00bfff04 	movi	r2,-4
    96bc:	9dadc83a 	sub	r22,r19,r22
    96c0:	b1000117 	ldw	r4,4(r22)
    96c4:	2084703a 	and	r2,r4,r2
    96c8:	b03f7726 	beq	r22,zero,94a8 <__alt_mem_onchip_memory2_0+0xf8008418>
    96cc:	80af883a 	add	r23,r16,r2
    96d0:	b8ff7516 	blt	r23,r3,94a8 <__alt_mem_onchip_memory2_0+0xf8008418>
    96d4:	b0800317 	ldw	r2,12(r22)
    96d8:	b0c00217 	ldw	r3,8(r22)
    96dc:	81bfff04 	addi	r6,r16,-4
    96e0:	01000904 	movi	r4,36
    96e4:	18800315 	stw	r2,12(r3)
    96e8:	10c00215 	stw	r3,8(r2)
    96ec:	b4800204 	addi	r18,r22,8
    96f0:	21bfe52e 	bgeu	r4,r6,9688 <__alt_mem_onchip_memory2_0+0xf80085f8>
    96f4:	a80b883a 	mov	r5,r21
    96f8:	9009883a 	mov	r4,r18
    96fc:	00080c00 	call	80c0 <memmove>
    9700:	b821883a 	mov	r16,r23
    9704:	b027883a 	mov	r19,r22
    9708:	003f8a06 	br	9534 <__alt_mem_onchip_memory2_0+0xf80084a4>
    970c:	300b883a 	mov	r5,r6
    9710:	dfc00917 	ldw	ra,36(sp)
    9714:	df000817 	ldw	fp,32(sp)
    9718:	ddc00717 	ldw	r23,28(sp)
    971c:	dd800617 	ldw	r22,24(sp)
    9720:	dd400517 	ldw	r21,20(sp)
    9724:	dd000417 	ldw	r20,16(sp)
    9728:	dcc00317 	ldw	r19,12(sp)
    972c:	dc800217 	ldw	r18,8(sp)
    9730:	dc400117 	ldw	r17,4(sp)
    9734:	dc000017 	ldw	r16,0(sp)
    9738:	dec00a04 	addi	sp,sp,40
    973c:	00076881 	jmpi	7688 <_malloc_r>
    9740:	a8c00017 	ldw	r3,0(r21)
    9744:	90c00015 	stw	r3,0(r18)
    9748:	a8c00117 	ldw	r3,4(r21)
    974c:	90c00115 	stw	r3,4(r18)
    9750:	00c006c4 	movi	r3,27
    9754:	19804536 	bltu	r3,r6,986c <_realloc_r+0x470>
    9758:	90800204 	addi	r2,r18,8
    975c:	a8c00204 	addi	r3,r21,8
    9760:	003f6306 	br	94f0 <__alt_mem_onchip_memory2_0+0xf8008460>
    9764:	9005883a 	mov	r2,r18
    9768:	a8c00017 	ldw	r3,0(r21)
    976c:	b821883a 	mov	r16,r23
    9770:	b027883a 	mov	r19,r22
    9774:	10c00015 	stw	r3,0(r2)
    9778:	a8c00117 	ldw	r3,4(r21)
    977c:	10c00115 	stw	r3,4(r2)
    9780:	a8c00217 	ldw	r3,8(r21)
    9784:	10c00215 	stw	r3,8(r2)
    9788:	003f6a06 	br	9534 <__alt_mem_onchip_memory2_0+0xf80084a4>
    978c:	9c67883a 	add	r19,r19,r17
    9790:	4445c83a 	sub	r2,r8,r17
    9794:	e4c00215 	stw	r19,8(fp)
    9798:	10800054 	ori	r2,r2,1
    979c:	98800115 	stw	r2,4(r19)
    97a0:	a8bfff17 	ldw	r2,-4(r21)
    97a4:	a009883a 	mov	r4,r20
    97a8:	1080004c 	andi	r2,r2,1
    97ac:	1462b03a 	or	r17,r2,r17
    97b0:	ac7fff15 	stw	r17,-4(r21)
    97b4:	000f8840 	call	f884 <__malloc_unlock>
    97b8:	a805883a 	mov	r2,r21
    97bc:	003f6b06 	br	956c <__alt_mem_onchip_memory2_0+0xf80084dc>
    97c0:	a80b883a 	mov	r5,r21
    97c4:	9009883a 	mov	r4,r18
    97c8:	00080c00 	call	80c0 <memmove>
    97cc:	003f4e06 	br	9508 <__alt_mem_onchip_memory2_0+0xf8008478>
    97d0:	89000404 	addi	r4,r17,16
    97d4:	b93fbc16 	blt	r23,r4,96c8 <__alt_mem_onchip_memory2_0+0xf8008638>
    97d8:	b0800317 	ldw	r2,12(r22)
    97dc:	b0c00217 	ldw	r3,8(r22)
    97e0:	81bfff04 	addi	r6,r16,-4
    97e4:	01000904 	movi	r4,36
    97e8:	18800315 	stw	r2,12(r3)
    97ec:	10c00215 	stw	r3,8(r2)
    97f0:	b4800204 	addi	r18,r22,8
    97f4:	21804336 	bltu	r4,r6,9904 <_realloc_r+0x508>
    97f8:	008004c4 	movi	r2,19
    97fc:	11803f2e 	bgeu	r2,r6,98fc <_realloc_r+0x500>
    9800:	a8800017 	ldw	r2,0(r21)
    9804:	b0800215 	stw	r2,8(r22)
    9808:	a8800117 	ldw	r2,4(r21)
    980c:	b0800315 	stw	r2,12(r22)
    9810:	008006c4 	movi	r2,27
    9814:	11803f36 	bltu	r2,r6,9914 <_realloc_r+0x518>
    9818:	b0800404 	addi	r2,r22,16
    981c:	ad400204 	addi	r21,r21,8
    9820:	a8c00017 	ldw	r3,0(r21)
    9824:	10c00015 	stw	r3,0(r2)
    9828:	a8c00117 	ldw	r3,4(r21)
    982c:	10c00115 	stw	r3,4(r2)
    9830:	a8c00217 	ldw	r3,8(r21)
    9834:	10c00215 	stw	r3,8(r2)
    9838:	b447883a 	add	r3,r22,r17
    983c:	bc45c83a 	sub	r2,r23,r17
    9840:	e0c00215 	stw	r3,8(fp)
    9844:	10800054 	ori	r2,r2,1
    9848:	18800115 	stw	r2,4(r3)
    984c:	b0800117 	ldw	r2,4(r22)
    9850:	a009883a 	mov	r4,r20
    9854:	1080004c 	andi	r2,r2,1
    9858:	1462b03a 	or	r17,r2,r17
    985c:	b4400115 	stw	r17,4(r22)
    9860:	000f8840 	call	f884 <__malloc_unlock>
    9864:	9005883a 	mov	r2,r18
    9868:	003f4006 	br	956c <__alt_mem_onchip_memory2_0+0xf80084dc>
    986c:	a8c00217 	ldw	r3,8(r21)
    9870:	90c00215 	stw	r3,8(r18)
    9874:	a8c00317 	ldw	r3,12(r21)
    9878:	90c00315 	stw	r3,12(r18)
    987c:	30801126 	beq	r6,r2,98c4 <_realloc_r+0x4c8>
    9880:	90800404 	addi	r2,r18,16
    9884:	a8c00404 	addi	r3,r21,16
    9888:	003f1906 	br	94f0 <__alt_mem_onchip_memory2_0+0xf8008460>
    988c:	90ffff17 	ldw	r3,-4(r18)
    9890:	00bfff04 	movi	r2,-4
    9894:	a825883a 	mov	r18,r21
    9898:	1884703a 	and	r2,r3,r2
    989c:	80a1883a 	add	r16,r16,r2
    98a0:	003f2406 	br	9534 <__alt_mem_onchip_memory2_0+0xf80084a4>
    98a4:	a8800217 	ldw	r2,8(r21)
    98a8:	b0800415 	stw	r2,16(r22)
    98ac:	a8800317 	ldw	r2,12(r21)
    98b0:	b0800515 	stw	r2,20(r22)
    98b4:	31000a26 	beq	r6,r4,98e0 <_realloc_r+0x4e4>
    98b8:	b0800604 	addi	r2,r22,24
    98bc:	ad400404 	addi	r21,r21,16
    98c0:	003fa906 	br	9768 <__alt_mem_onchip_memory2_0+0xf80086d8>
    98c4:	a9000417 	ldw	r4,16(r21)
    98c8:	90800604 	addi	r2,r18,24
    98cc:	a8c00604 	addi	r3,r21,24
    98d0:	91000415 	stw	r4,16(r18)
    98d4:	a9000517 	ldw	r4,20(r21)
    98d8:	91000515 	stw	r4,20(r18)
    98dc:	003f0406 	br	94f0 <__alt_mem_onchip_memory2_0+0xf8008460>
    98e0:	a8c00417 	ldw	r3,16(r21)
    98e4:	ad400604 	addi	r21,r21,24
    98e8:	b0800804 	addi	r2,r22,32
    98ec:	b0c00615 	stw	r3,24(r22)
    98f0:	a8ffff17 	ldw	r3,-4(r21)
    98f4:	b0c00715 	stw	r3,28(r22)
    98f8:	003f9b06 	br	9768 <__alt_mem_onchip_memory2_0+0xf80086d8>
    98fc:	9005883a 	mov	r2,r18
    9900:	003fc706 	br	9820 <__alt_mem_onchip_memory2_0+0xf8008790>
    9904:	a80b883a 	mov	r5,r21
    9908:	9009883a 	mov	r4,r18
    990c:	00080c00 	call	80c0 <memmove>
    9910:	003fc906 	br	9838 <__alt_mem_onchip_memory2_0+0xf80087a8>
    9914:	a8800217 	ldw	r2,8(r21)
    9918:	b0800415 	stw	r2,16(r22)
    991c:	a8800317 	ldw	r2,12(r21)
    9920:	b0800515 	stw	r2,20(r22)
    9924:	31000726 	beq	r6,r4,9944 <_realloc_r+0x548>
    9928:	b0800604 	addi	r2,r22,24
    992c:	ad400404 	addi	r21,r21,16
    9930:	003fbb06 	br	9820 <__alt_mem_onchip_memory2_0+0xf8008790>
    9934:	a009883a 	mov	r4,r20
    9938:	000f8840 	call	f884 <__malloc_unlock>
    993c:	0005883a 	mov	r2,zero
    9940:	003f0a06 	br	956c <__alt_mem_onchip_memory2_0+0xf80084dc>
    9944:	a8c00417 	ldw	r3,16(r21)
    9948:	ad400604 	addi	r21,r21,24
    994c:	b0800804 	addi	r2,r22,32
    9950:	b0c00615 	stw	r3,24(r22)
    9954:	a8ffff17 	ldw	r3,-4(r21)
    9958:	b0c00715 	stw	r3,28(r22)
    995c:	003fb006 	br	9820 <__alt_mem_onchip_memory2_0+0xf8008790>

00009960 <__fpclassifyd>:
    9960:	00a00034 	movhi	r2,32768
    9964:	10bfffc4 	addi	r2,r2,-1
    9968:	2884703a 	and	r2,r5,r2
    996c:	10000726 	beq	r2,zero,998c <__fpclassifyd+0x2c>
    9970:	00fffc34 	movhi	r3,65520
    9974:	019ff834 	movhi	r6,32736
    9978:	28c7883a 	add	r3,r5,r3
    997c:	31bfffc4 	addi	r6,r6,-1
    9980:	30c00536 	bltu	r6,r3,9998 <__fpclassifyd+0x38>
    9984:	00800104 	movi	r2,4
    9988:	f800283a 	ret
    998c:	2000021e 	bne	r4,zero,9998 <__fpclassifyd+0x38>
    9990:	00800084 	movi	r2,2
    9994:	f800283a 	ret
    9998:	00dffc34 	movhi	r3,32752
    999c:	019ff834 	movhi	r6,32736
    99a0:	28cb883a 	add	r5,r5,r3
    99a4:	31bfffc4 	addi	r6,r6,-1
    99a8:	317ff62e 	bgeu	r6,r5,9984 <__alt_mem_onchip_memory2_0+0xf80088f4>
    99ac:	01400434 	movhi	r5,16
    99b0:	297fffc4 	addi	r5,r5,-1
    99b4:	28800236 	bltu	r5,r2,99c0 <__fpclassifyd+0x60>
    99b8:	008000c4 	movi	r2,3
    99bc:	f800283a 	ret
    99c0:	10c00226 	beq	r2,r3,99cc <__fpclassifyd+0x6c>
    99c4:	0005883a 	mov	r2,zero
    99c8:	f800283a 	ret
    99cc:	2005003a 	cmpeq	r2,r4,zero
    99d0:	f800283a 	ret

000099d4 <_sbrk_r>:
    99d4:	defffd04 	addi	sp,sp,-12
    99d8:	dc000015 	stw	r16,0(sp)
    99dc:	04000074 	movhi	r16,1
    99e0:	dc400115 	stw	r17,4(sp)
    99e4:	8416de04 	addi	r16,r16,23416
    99e8:	2023883a 	mov	r17,r4
    99ec:	2809883a 	mov	r4,r5
    99f0:	dfc00215 	stw	ra,8(sp)
    99f4:	80000015 	stw	zero,0(r16)
    99f8:	000fa6c0 	call	fa6c <sbrk>
    99fc:	00ffffc4 	movi	r3,-1
    9a00:	10c00526 	beq	r2,r3,9a18 <_sbrk_r+0x44>
    9a04:	dfc00217 	ldw	ra,8(sp)
    9a08:	dc400117 	ldw	r17,4(sp)
    9a0c:	dc000017 	ldw	r16,0(sp)
    9a10:	dec00304 	addi	sp,sp,12
    9a14:	f800283a 	ret
    9a18:	80c00017 	ldw	r3,0(r16)
    9a1c:	183ff926 	beq	r3,zero,9a04 <__alt_mem_onchip_memory2_0+0xf8008974>
    9a20:	88c00015 	stw	r3,0(r17)
    9a24:	003ff706 	br	9a04 <__alt_mem_onchip_memory2_0+0xf8008974>

00009a28 <__sread>:
    9a28:	defffe04 	addi	sp,sp,-8
    9a2c:	dc000015 	stw	r16,0(sp)
    9a30:	2821883a 	mov	r16,r5
    9a34:	2940038f 	ldh	r5,14(r5)
    9a38:	dfc00115 	stw	ra,4(sp)
    9a3c:	000b8e40 	call	b8e4 <_read_r>
    9a40:	10000716 	blt	r2,zero,9a60 <__sread+0x38>
    9a44:	80c01417 	ldw	r3,80(r16)
    9a48:	1887883a 	add	r3,r3,r2
    9a4c:	80c01415 	stw	r3,80(r16)
    9a50:	dfc00117 	ldw	ra,4(sp)
    9a54:	dc000017 	ldw	r16,0(sp)
    9a58:	dec00204 	addi	sp,sp,8
    9a5c:	f800283a 	ret
    9a60:	80c0030b 	ldhu	r3,12(r16)
    9a64:	18fbffcc 	andi	r3,r3,61439
    9a68:	80c0030d 	sth	r3,12(r16)
    9a6c:	dfc00117 	ldw	ra,4(sp)
    9a70:	dc000017 	ldw	r16,0(sp)
    9a74:	dec00204 	addi	sp,sp,8
    9a78:	f800283a 	ret

00009a7c <__seofread>:
    9a7c:	0005883a 	mov	r2,zero
    9a80:	f800283a 	ret

00009a84 <__swrite>:
    9a84:	2880030b 	ldhu	r2,12(r5)
    9a88:	defffb04 	addi	sp,sp,-20
    9a8c:	dcc00315 	stw	r19,12(sp)
    9a90:	dc800215 	stw	r18,8(sp)
    9a94:	dc400115 	stw	r17,4(sp)
    9a98:	dc000015 	stw	r16,0(sp)
    9a9c:	dfc00415 	stw	ra,16(sp)
    9aa0:	10c0400c 	andi	r3,r2,256
    9aa4:	2821883a 	mov	r16,r5
    9aa8:	2023883a 	mov	r17,r4
    9aac:	3025883a 	mov	r18,r6
    9ab0:	3827883a 	mov	r19,r7
    9ab4:	18000526 	beq	r3,zero,9acc <__swrite+0x48>
    9ab8:	2940038f 	ldh	r5,14(r5)
    9abc:	01c00084 	movi	r7,2
    9ac0:	000d883a 	mov	r6,zero
    9ac4:	000b8840 	call	b884 <_lseek_r>
    9ac8:	8080030b 	ldhu	r2,12(r16)
    9acc:	8140038f 	ldh	r5,14(r16)
    9ad0:	10bbffcc 	andi	r2,r2,61439
    9ad4:	980f883a 	mov	r7,r19
    9ad8:	900d883a 	mov	r6,r18
    9adc:	8809883a 	mov	r4,r17
    9ae0:	8080030d 	sth	r2,12(r16)
    9ae4:	dfc00417 	ldw	ra,16(sp)
    9ae8:	dcc00317 	ldw	r19,12(sp)
    9aec:	dc800217 	ldw	r18,8(sp)
    9af0:	dc400117 	ldw	r17,4(sp)
    9af4:	dc000017 	ldw	r16,0(sp)
    9af8:	dec00504 	addi	sp,sp,20
    9afc:	000b3381 	jmpi	b338 <_write_r>

00009b00 <__sseek>:
    9b00:	defffe04 	addi	sp,sp,-8
    9b04:	dc000015 	stw	r16,0(sp)
    9b08:	2821883a 	mov	r16,r5
    9b0c:	2940038f 	ldh	r5,14(r5)
    9b10:	dfc00115 	stw	ra,4(sp)
    9b14:	000b8840 	call	b884 <_lseek_r>
    9b18:	00ffffc4 	movi	r3,-1
    9b1c:	10c00826 	beq	r2,r3,9b40 <__sseek+0x40>
    9b20:	80c0030b 	ldhu	r3,12(r16)
    9b24:	80801415 	stw	r2,80(r16)
    9b28:	18c40014 	ori	r3,r3,4096
    9b2c:	80c0030d 	sth	r3,12(r16)
    9b30:	dfc00117 	ldw	ra,4(sp)
    9b34:	dc000017 	ldw	r16,0(sp)
    9b38:	dec00204 	addi	sp,sp,8
    9b3c:	f800283a 	ret
    9b40:	80c0030b 	ldhu	r3,12(r16)
    9b44:	18fbffcc 	andi	r3,r3,61439
    9b48:	80c0030d 	sth	r3,12(r16)
    9b4c:	dfc00117 	ldw	ra,4(sp)
    9b50:	dc000017 	ldw	r16,0(sp)
    9b54:	dec00204 	addi	sp,sp,8
    9b58:	f800283a 	ret

00009b5c <__sclose>:
    9b5c:	2940038f 	ldh	r5,14(r5)
    9b60:	000b3981 	jmpi	b398 <_close_r>

00009b64 <strcmp>:
    9b64:	2144b03a 	or	r2,r4,r5
    9b68:	108000cc 	andi	r2,r2,3
    9b6c:	1000171e 	bne	r2,zero,9bcc <strcmp+0x68>
    9b70:	20800017 	ldw	r2,0(r4)
    9b74:	28c00017 	ldw	r3,0(r5)
    9b78:	10c0141e 	bne	r2,r3,9bcc <strcmp+0x68>
    9b7c:	027fbff4 	movhi	r9,65279
    9b80:	4a7fbfc4 	addi	r9,r9,-257
    9b84:	0086303a 	nor	r3,zero,r2
    9b88:	02202074 	movhi	r8,32897
    9b8c:	1245883a 	add	r2,r2,r9
    9b90:	42202004 	addi	r8,r8,-32640
    9b94:	10c4703a 	and	r2,r2,r3
    9b98:	1204703a 	and	r2,r2,r8
    9b9c:	10000226 	beq	r2,zero,9ba8 <strcmp+0x44>
    9ba0:	00002306 	br	9c30 <strcmp+0xcc>
    9ba4:	1000221e 	bne	r2,zero,9c30 <strcmp+0xcc>
    9ba8:	21000104 	addi	r4,r4,4
    9bac:	20c00017 	ldw	r3,0(r4)
    9bb0:	29400104 	addi	r5,r5,4
    9bb4:	29800017 	ldw	r6,0(r5)
    9bb8:	1a4f883a 	add	r7,r3,r9
    9bbc:	00c4303a 	nor	r2,zero,r3
    9bc0:	3884703a 	and	r2,r7,r2
    9bc4:	1204703a 	and	r2,r2,r8
    9bc8:	19bff626 	beq	r3,r6,9ba4 <__alt_mem_onchip_memory2_0+0xf8008b14>
    9bcc:	20800003 	ldbu	r2,0(r4)
    9bd0:	10c03fcc 	andi	r3,r2,255
    9bd4:	18c0201c 	xori	r3,r3,128
    9bd8:	18ffe004 	addi	r3,r3,-128
    9bdc:	18000c26 	beq	r3,zero,9c10 <strcmp+0xac>
    9be0:	29800007 	ldb	r6,0(r5)
    9be4:	19800326 	beq	r3,r6,9bf4 <strcmp+0x90>
    9be8:	00001306 	br	9c38 <strcmp+0xd4>
    9bec:	29800007 	ldb	r6,0(r5)
    9bf0:	11800b1e 	bne	r2,r6,9c20 <strcmp+0xbc>
    9bf4:	21000044 	addi	r4,r4,1
    9bf8:	20c00003 	ldbu	r3,0(r4)
    9bfc:	29400044 	addi	r5,r5,1
    9c00:	18803fcc 	andi	r2,r3,255
    9c04:	1080201c 	xori	r2,r2,128
    9c08:	10bfe004 	addi	r2,r2,-128
    9c0c:	103ff71e 	bne	r2,zero,9bec <__alt_mem_onchip_memory2_0+0xf8008b5c>
    9c10:	0007883a 	mov	r3,zero
    9c14:	28800003 	ldbu	r2,0(r5)
    9c18:	1885c83a 	sub	r2,r3,r2
    9c1c:	f800283a 	ret
    9c20:	28800003 	ldbu	r2,0(r5)
    9c24:	18c03fcc 	andi	r3,r3,255
    9c28:	1885c83a 	sub	r2,r3,r2
    9c2c:	f800283a 	ret
    9c30:	0005883a 	mov	r2,zero
    9c34:	f800283a 	ret
    9c38:	10c03fcc 	andi	r3,r2,255
    9c3c:	003ff506 	br	9c14 <__alt_mem_onchip_memory2_0+0xf8008b84>

00009c40 <__sprint_r.part.0>:
    9c40:	28801917 	ldw	r2,100(r5)
    9c44:	defff604 	addi	sp,sp,-40
    9c48:	dd400515 	stw	r21,20(sp)
    9c4c:	dfc00915 	stw	ra,36(sp)
    9c50:	df000815 	stw	fp,32(sp)
    9c54:	ddc00715 	stw	r23,28(sp)
    9c58:	dd800615 	stw	r22,24(sp)
    9c5c:	dd000415 	stw	r20,16(sp)
    9c60:	dcc00315 	stw	r19,12(sp)
    9c64:	dc800215 	stw	r18,8(sp)
    9c68:	dc400115 	stw	r17,4(sp)
    9c6c:	dc000015 	stw	r16,0(sp)
    9c70:	1088000c 	andi	r2,r2,8192
    9c74:	302b883a 	mov	r21,r6
    9c78:	10002e26 	beq	r2,zero,9d34 <__sprint_r.part.0+0xf4>
    9c7c:	30800217 	ldw	r2,8(r6)
    9c80:	35800017 	ldw	r22,0(r6)
    9c84:	10002926 	beq	r2,zero,9d2c <__sprint_r.part.0+0xec>
    9c88:	2827883a 	mov	r19,r5
    9c8c:	2029883a 	mov	r20,r4
    9c90:	b5c00104 	addi	r23,r22,4
    9c94:	04bfffc4 	movi	r18,-1
    9c98:	bc400017 	ldw	r17,0(r23)
    9c9c:	b4000017 	ldw	r16,0(r22)
    9ca0:	0039883a 	mov	fp,zero
    9ca4:	8822d0ba 	srli	r17,r17,2
    9ca8:	8800031e 	bne	r17,zero,9cb8 <__sprint_r.part.0+0x78>
    9cac:	00001806 	br	9d10 <__sprint_r.part.0+0xd0>
    9cb0:	84000104 	addi	r16,r16,4
    9cb4:	8f001526 	beq	r17,fp,9d0c <__sprint_r.part.0+0xcc>
    9cb8:	81400017 	ldw	r5,0(r16)
    9cbc:	980d883a 	mov	r6,r19
    9cc0:	a009883a 	mov	r4,r20
    9cc4:	000b7300 	call	b730 <_fputwc_r>
    9cc8:	e7000044 	addi	fp,fp,1
    9ccc:	14bff81e 	bne	r2,r18,9cb0 <__alt_mem_onchip_memory2_0+0xf8008c20>
    9cd0:	9005883a 	mov	r2,r18
    9cd4:	a8000215 	stw	zero,8(r21)
    9cd8:	a8000115 	stw	zero,4(r21)
    9cdc:	dfc00917 	ldw	ra,36(sp)
    9ce0:	df000817 	ldw	fp,32(sp)
    9ce4:	ddc00717 	ldw	r23,28(sp)
    9ce8:	dd800617 	ldw	r22,24(sp)
    9cec:	dd400517 	ldw	r21,20(sp)
    9cf0:	dd000417 	ldw	r20,16(sp)
    9cf4:	dcc00317 	ldw	r19,12(sp)
    9cf8:	dc800217 	ldw	r18,8(sp)
    9cfc:	dc400117 	ldw	r17,4(sp)
    9d00:	dc000017 	ldw	r16,0(sp)
    9d04:	dec00a04 	addi	sp,sp,40
    9d08:	f800283a 	ret
    9d0c:	a8800217 	ldw	r2,8(r21)
    9d10:	8c63883a 	add	r17,r17,r17
    9d14:	8c63883a 	add	r17,r17,r17
    9d18:	1445c83a 	sub	r2,r2,r17
    9d1c:	a8800215 	stw	r2,8(r21)
    9d20:	b5800204 	addi	r22,r22,8
    9d24:	bdc00204 	addi	r23,r23,8
    9d28:	103fdb1e 	bne	r2,zero,9c98 <__alt_mem_onchip_memory2_0+0xf8008c08>
    9d2c:	0005883a 	mov	r2,zero
    9d30:	003fe806 	br	9cd4 <__alt_mem_onchip_memory2_0+0xf8008c44>
    9d34:	0006da00 	call	6da0 <__sfvwrite_r>
    9d38:	003fe606 	br	9cd4 <__alt_mem_onchip_memory2_0+0xf8008c44>

00009d3c <__sprint_r>:
    9d3c:	30c00217 	ldw	r3,8(r6)
    9d40:	18000126 	beq	r3,zero,9d48 <__sprint_r+0xc>
    9d44:	0009c401 	jmpi	9c40 <__sprint_r.part.0>
    9d48:	30000115 	stw	zero,4(r6)
    9d4c:	0005883a 	mov	r2,zero
    9d50:	f800283a 	ret

00009d54 <___vfiprintf_internal_r>:
    9d54:	deffca04 	addi	sp,sp,-216
    9d58:	dd403115 	stw	r21,196(sp)
    9d5c:	dfc03515 	stw	ra,212(sp)
    9d60:	df003415 	stw	fp,208(sp)
    9d64:	ddc03315 	stw	r23,204(sp)
    9d68:	dd803215 	stw	r22,200(sp)
    9d6c:	dd003015 	stw	r20,192(sp)
    9d70:	dcc02f15 	stw	r19,188(sp)
    9d74:	dc802e15 	stw	r18,184(sp)
    9d78:	dc402d15 	stw	r17,180(sp)
    9d7c:	dc002c15 	stw	r16,176(sp)
    9d80:	d9002115 	stw	r4,132(sp)
    9d84:	d9402015 	stw	r5,128(sp)
    9d88:	d9c02215 	stw	r7,136(sp)
    9d8c:	302b883a 	mov	r21,r6
    9d90:	20000226 	beq	r4,zero,9d9c <___vfiprintf_internal_r+0x48>
    9d94:	20800e17 	ldw	r2,56(r4)
    9d98:	1000cf26 	beq	r2,zero,a0d8 <___vfiprintf_internal_r+0x384>
    9d9c:	d8c02017 	ldw	r3,128(sp)
    9da0:	1880030b 	ldhu	r2,12(r3)
    9da4:	10c8000c 	andi	r3,r2,8192
    9da8:	1800071e 	bne	r3,zero,9dc8 <___vfiprintf_internal_r+0x74>
    9dac:	d9402017 	ldw	r5,128(sp)
    9db0:	00f7ffc4 	movi	r3,-8193
    9db4:	10880014 	ori	r2,r2,8192
    9db8:	29001917 	ldw	r4,100(r5)
    9dbc:	2880030d 	sth	r2,12(r5)
    9dc0:	20c6703a 	and	r3,r4,r3
    9dc4:	28c01915 	stw	r3,100(r5)
    9dc8:	10c0020c 	andi	r3,r2,8
    9dcc:	1800a526 	beq	r3,zero,a064 <___vfiprintf_internal_r+0x310>
    9dd0:	d9002017 	ldw	r4,128(sp)
    9dd4:	20c00417 	ldw	r3,16(r4)
    9dd8:	1800a226 	beq	r3,zero,a064 <___vfiprintf_internal_r+0x310>
    9ddc:	1080068c 	andi	r2,r2,26
    9de0:	00c00284 	movi	r3,10
    9de4:	10c0a826 	beq	r2,r3,a088 <___vfiprintf_internal_r+0x334>
    9de8:	d9001a04 	addi	r4,sp,104
    9dec:	d94019c4 	addi	r5,sp,103
    9df0:	04800074 	movhi	r18,1
    9df4:	2145c83a 	sub	r2,r4,r5
    9df8:	94890c04 	addi	r18,r18,9264
    9dfc:	d9001e15 	stw	r4,120(sp)
    9e00:	d9401f15 	stw	r5,124(sp)
    9e04:	dec01a15 	stw	sp,104(sp)
    9e08:	d8001c15 	stw	zero,112(sp)
    9e0c:	d8001b15 	stw	zero,108(sp)
    9e10:	d811883a 	mov	r8,sp
    9e14:	d8002615 	stw	zero,152(sp)
    9e18:	d8002415 	stw	zero,144(sp)
    9e1c:	d8802815 	stw	r2,160(sp)
    9e20:	a82d883a 	mov	r22,r21
    9e24:	b0800007 	ldb	r2,0(r22)
    9e28:	10040d26 	beq	r2,zero,ae60 <___vfiprintf_internal_r+0x110c>
    9e2c:	00c00944 	movi	r3,37
    9e30:	b029883a 	mov	r20,r22
    9e34:	10c0021e 	bne	r2,r3,9e40 <___vfiprintf_internal_r+0xec>
    9e38:	00001606 	br	9e94 <___vfiprintf_internal_r+0x140>
    9e3c:	10c00326 	beq	r2,r3,9e4c <___vfiprintf_internal_r+0xf8>
    9e40:	a5000044 	addi	r20,r20,1
    9e44:	a0800007 	ldb	r2,0(r20)
    9e48:	103ffc1e 	bne	r2,zero,9e3c <__alt_mem_onchip_memory2_0+0xf8008dac>
    9e4c:	a5a1c83a 	sub	r16,r20,r22
    9e50:	80001026 	beq	r16,zero,9e94 <___vfiprintf_internal_r+0x140>
    9e54:	d8c01c17 	ldw	r3,112(sp)
    9e58:	d8801b17 	ldw	r2,108(sp)
    9e5c:	45800015 	stw	r22,0(r8)
    9e60:	80c7883a 	add	r3,r16,r3
    9e64:	10800044 	addi	r2,r2,1
    9e68:	44000115 	stw	r16,4(r8)
    9e6c:	d8c01c15 	stw	r3,112(sp)
    9e70:	d8801b15 	stw	r2,108(sp)
    9e74:	010001c4 	movi	r4,7
    9e78:	2080750e 	bge	r4,r2,a050 <___vfiprintf_internal_r+0x2fc>
    9e7c:	1803951e 	bne	r3,zero,acd4 <___vfiprintf_internal_r+0xf80>
    9e80:	d8c02417 	ldw	r3,144(sp)
    9e84:	d8001b15 	stw	zero,108(sp)
    9e88:	d811883a 	mov	r8,sp
    9e8c:	1c07883a 	add	r3,r3,r16
    9e90:	d8c02415 	stw	r3,144(sp)
    9e94:	a0800007 	ldb	r2,0(r20)
    9e98:	1002e026 	beq	r2,zero,aa1c <___vfiprintf_internal_r+0xcc8>
    9e9c:	a5800044 	addi	r22,r20,1
    9ea0:	a0c00047 	ldb	r3,1(r20)
    9ea4:	d8001d85 	stb	zero,118(sp)
    9ea8:	0027883a 	mov	r19,zero
    9eac:	d8002305 	stb	zero,140(sp)
    9eb0:	043fffc4 	movi	r16,-1
    9eb4:	d8002515 	stw	zero,148(sp)
    9eb8:	0023883a 	mov	r17,zero
    9ebc:	05001604 	movi	r20,88
    9ec0:	05400244 	movi	r21,9
    9ec4:	402f883a 	mov	r23,r8
    9ec8:	b5800044 	addi	r22,r22,1
    9ecc:	18bff804 	addi	r2,r3,-32
    9ed0:	a0827736 	bltu	r20,r2,a8b0 <___vfiprintf_internal_r+0xb5c>
    9ed4:	100490ba 	slli	r2,r2,2
    9ed8:	01000074 	movhi	r4,1
    9edc:	2127bb04 	addi	r4,r4,-24852
    9ee0:	1105883a 	add	r2,r2,r4
    9ee4:	10800017 	ldw	r2,0(r2)
    9ee8:	1000683a 	jmp	r2
    9eec:	0000a5b0 	cmpltui	zero,zero,662
    9ef0:	0000a8b0 	cmpltui	zero,zero,674
    9ef4:	0000a8b0 	cmpltui	zero,zero,674
    9ef8:	0000a5cc 	andi	zero,zero,663
    9efc:	0000a8b0 	cmpltui	zero,zero,674
    9f00:	0000a8b0 	cmpltui	zero,zero,674
    9f04:	0000a8b0 	cmpltui	zero,zero,674
    9f08:	0000a8b0 	cmpltui	zero,zero,674
    9f0c:	0000a8b0 	cmpltui	zero,zero,674
    9f10:	0000a8b0 	cmpltui	zero,zero,674
    9f14:	0000a7d4 	movui	zero,671
    9f18:	0000a7f8 	rdprs	zero,zero,671
    9f1c:	0000a8b0 	cmpltui	zero,zero,674
    9f20:	0000a0f0 	cmpltui	zero,zero,643
    9f24:	0000a80c 	andi	zero,zero,672
    9f28:	0000a8b0 	cmpltui	zero,zero,674
    9f2c:	0000a5d8 	cmpnei	zero,zero,663
    9f30:	0000a5e4 	muli	zero,zero,663
    9f34:	0000a5e4 	muli	zero,zero,663
    9f38:	0000a5e4 	muli	zero,zero,663
    9f3c:	0000a5e4 	muli	zero,zero,663
    9f40:	0000a5e4 	muli	zero,zero,663
    9f44:	0000a5e4 	muli	zero,zero,663
    9f48:	0000a5e4 	muli	zero,zero,663
    9f4c:	0000a5e4 	muli	zero,zero,663
    9f50:	0000a5e4 	muli	zero,zero,663
    9f54:	0000a8b0 	cmpltui	zero,zero,674
    9f58:	0000a8b0 	cmpltui	zero,zero,674
    9f5c:	0000a8b0 	cmpltui	zero,zero,674
    9f60:	0000a8b0 	cmpltui	zero,zero,674
    9f64:	0000a8b0 	cmpltui	zero,zero,674
    9f68:	0000a8b0 	cmpltui	zero,zero,674
    9f6c:	0000a8b0 	cmpltui	zero,zero,674
    9f70:	0000a8b0 	cmpltui	zero,zero,674
    9f74:	0000a8b0 	cmpltui	zero,zero,674
    9f78:	0000a8b0 	cmpltui	zero,zero,674
    9f7c:	0000a624 	muli	zero,zero,664
    9f80:	0000a8b0 	cmpltui	zero,zero,674
    9f84:	0000a8b0 	cmpltui	zero,zero,674
    9f88:	0000a8b0 	cmpltui	zero,zero,674
    9f8c:	0000a8b0 	cmpltui	zero,zero,674
    9f90:	0000a8b0 	cmpltui	zero,zero,674
    9f94:	0000a8b0 	cmpltui	zero,zero,674
    9f98:	0000a8b0 	cmpltui	zero,zero,674
    9f9c:	0000a8b0 	cmpltui	zero,zero,674
    9fa0:	0000a8b0 	cmpltui	zero,zero,674
    9fa4:	0000a8b0 	cmpltui	zero,zero,674
    9fa8:	0000a660 	cmpeqi	zero,zero,665
    9fac:	0000a8b0 	cmpltui	zero,zero,674
    9fb0:	0000a8b0 	cmpltui	zero,zero,674
    9fb4:	0000a8b0 	cmpltui	zero,zero,674
    9fb8:	0000a8b0 	cmpltui	zero,zero,674
    9fbc:	0000a8b0 	cmpltui	zero,zero,674
    9fc0:	0000a6bc 	xorhi	zero,zero,666
    9fc4:	0000a8b0 	cmpltui	zero,zero,674
    9fc8:	0000a8b0 	cmpltui	zero,zero,674
    9fcc:	0000a730 	cmpltui	zero,zero,668
    9fd0:	0000a8b0 	cmpltui	zero,zero,674
    9fd4:	0000a8b0 	cmpltui	zero,zero,674
    9fd8:	0000a8b0 	cmpltui	zero,zero,674
    9fdc:	0000a8b0 	cmpltui	zero,zero,674
    9fe0:	0000a8b0 	cmpltui	zero,zero,674
    9fe4:	0000a8b0 	cmpltui	zero,zero,674
    9fe8:	0000a8b0 	cmpltui	zero,zero,674
    9fec:	0000a8b0 	cmpltui	zero,zero,674
    9ff0:	0000a8b0 	cmpltui	zero,zero,674
    9ff4:	0000a8b0 	cmpltui	zero,zero,674
    9ff8:	0000a4d8 	cmpnei	zero,zero,659
    9ffc:	0000a508 	cmpgei	zero,zero,660
    a000:	0000a8b0 	cmpltui	zero,zero,674
    a004:	0000a8b0 	cmpltui	zero,zero,674
    a008:	0000a8b0 	cmpltui	zero,zero,674
    a00c:	0000a858 	cmpnei	zero,zero,673
    a010:	0000a508 	cmpgei	zero,zero,660
    a014:	0000a8b0 	cmpltui	zero,zero,674
    a018:	0000a8b0 	cmpltui	zero,zero,674
    a01c:	0000a3b0 	cmpltui	zero,zero,654
    a020:	0000a8b0 	cmpltui	zero,zero,674
    a024:	0000a3c4 	movi	zero,655
    a028:	0000a3fc 	xorhi	zero,zero,655
    a02c:	0000a0fc 	xorhi	zero,zero,643
    a030:	0000a3a4 	muli	zero,zero,654
    a034:	0000a8b0 	cmpltui	zero,zero,674
    a038:	0000a770 	cmpltui	zero,zero,669
    a03c:	0000a8b0 	cmpltui	zero,zero,674
    a040:	0000a7bc 	xorhi	zero,zero,670
    a044:	0000a8b0 	cmpltui	zero,zero,674
    a048:	0000a8b0 	cmpltui	zero,zero,674
    a04c:	0000a480 	call	a48 <main+0x5e8>
    a050:	42000204 	addi	r8,r8,8
    a054:	d8c02417 	ldw	r3,144(sp)
    a058:	1c07883a 	add	r3,r3,r16
    a05c:	d8c02415 	stw	r3,144(sp)
    a060:	003f8c06 	br	9e94 <__alt_mem_onchip_memory2_0+0xf8008e04>
    a064:	d9402017 	ldw	r5,128(sp)
    a068:	d9002117 	ldw	r4,132(sp)
    a06c:	00049100 	call	4910 <__swsetup_r>
    a070:	1003c11e 	bne	r2,zero,af78 <___vfiprintf_internal_r+0x1224>
    a074:	d9402017 	ldw	r5,128(sp)
    a078:	00c00284 	movi	r3,10
    a07c:	2880030b 	ldhu	r2,12(r5)
    a080:	1080068c 	andi	r2,r2,26
    a084:	10ff581e 	bne	r2,r3,9de8 <__alt_mem_onchip_memory2_0+0xf8008d58>
    a088:	d8c02017 	ldw	r3,128(sp)
    a08c:	1880038f 	ldh	r2,14(r3)
    a090:	103f5516 	blt	r2,zero,9de8 <__alt_mem_onchip_memory2_0+0xf8008d58>
    a094:	d9c02217 	ldw	r7,136(sp)
    a098:	d9002117 	ldw	r4,132(sp)
    a09c:	a80d883a 	mov	r6,r21
    a0a0:	180b883a 	mov	r5,r3
    a0a4:	000b27c0 	call	b27c <__sbprintf>
    a0a8:	dfc03517 	ldw	ra,212(sp)
    a0ac:	df003417 	ldw	fp,208(sp)
    a0b0:	ddc03317 	ldw	r23,204(sp)
    a0b4:	dd803217 	ldw	r22,200(sp)
    a0b8:	dd403117 	ldw	r21,196(sp)
    a0bc:	dd003017 	ldw	r20,192(sp)
    a0c0:	dcc02f17 	ldw	r19,188(sp)
    a0c4:	dc802e17 	ldw	r18,184(sp)
    a0c8:	dc402d17 	ldw	r17,180(sp)
    a0cc:	dc002c17 	ldw	r16,176(sp)
    a0d0:	dec03604 	addi	sp,sp,216
    a0d4:	f800283a 	ret
    a0d8:	000691c0 	call	691c <__sinit>
    a0dc:	003f2f06 	br	9d9c <__alt_mem_onchip_memory2_0+0xf8008d0c>
    a0e0:	d8c02517 	ldw	r3,148(sp)
    a0e4:	d8802215 	stw	r2,136(sp)
    a0e8:	00c7c83a 	sub	r3,zero,r3
    a0ec:	d8c02515 	stw	r3,148(sp)
    a0f0:	8c400114 	ori	r17,r17,4
    a0f4:	b0c00007 	ldb	r3,0(r22)
    a0f8:	003f7306 	br	9ec8 <__alt_mem_onchip_memory2_0+0xf8008e38>
    a0fc:	00800c04 	movi	r2,48
    a100:	d9402217 	ldw	r5,136(sp)
    a104:	d8801d05 	stb	r2,116(sp)
    a108:	00801e04 	movi	r2,120
    a10c:	d8801d45 	stb	r2,117(sp)
    a110:	d8001d85 	stb	zero,118(sp)
    a114:	b811883a 	mov	r8,r23
    a118:	28c00104 	addi	r3,r5,4
    a11c:	2cc00017 	ldw	r19,0(r5)
    a120:	0029883a 	mov	r20,zero
    a124:	88800094 	ori	r2,r17,2
    a128:	80032516 	blt	r16,zero,adc0 <___vfiprintf_internal_r+0x106c>
    a12c:	00bfdfc4 	movi	r2,-129
    a130:	88a2703a 	and	r17,r17,r2
    a134:	d8c02215 	stw	r3,136(sp)
    a138:	8c400094 	ori	r17,r17,2
    a13c:	98032a1e 	bne	r19,zero,ade8 <___vfiprintf_internal_r+0x1094>
    a140:	00800074 	movhi	r2,1
    a144:	1088ab04 	addi	r2,r2,8876
    a148:	d8802615 	stw	r2,152(sp)
    a14c:	002b883a 	mov	r21,zero
    a150:	8001741e 	bne	r16,zero,a724 <___vfiprintf_internal_r+0x9d0>
    a154:	0021883a 	mov	r16,zero
    a158:	0029883a 	mov	r20,zero
    a15c:	ddc01a04 	addi	r23,sp,104
    a160:	8027883a 	mov	r19,r16
    a164:	8500010e 	bge	r16,r20,a16c <___vfiprintf_internal_r+0x418>
    a168:	a027883a 	mov	r19,r20
    a16c:	ad403fcc 	andi	r21,r21,255
    a170:	ad40201c 	xori	r21,r21,128
    a174:	ad7fe004 	addi	r21,r21,-128
    a178:	a8000126 	beq	r21,zero,a180 <___vfiprintf_internal_r+0x42c>
    a17c:	9cc00044 	addi	r19,r19,1
    a180:	89c0008c 	andi	r7,r17,2
    a184:	38000126 	beq	r7,zero,a18c <___vfiprintf_internal_r+0x438>
    a188:	9cc00084 	addi	r19,r19,2
    a18c:	88c0210c 	andi	r3,r17,132
    a190:	1801dd1e 	bne	r3,zero,a908 <___vfiprintf_internal_r+0xbb4>
    a194:	d9402517 	ldw	r5,148(sp)
    a198:	2cebc83a 	sub	r21,r5,r19
    a19c:	0541da0e 	bge	zero,r21,a908 <___vfiprintf_internal_r+0xbb4>
    a1a0:	07000404 	movi	fp,16
    a1a4:	d8801c17 	ldw	r2,112(sp)
    a1a8:	e543be0e 	bge	fp,r21,b0a4 <___vfiprintf_internal_r+0x1350>
    a1ac:	01400074 	movhi	r5,1
    a1b0:	29491004 	addi	r5,r5,9280
    a1b4:	dc002715 	stw	r16,156(sp)
    a1b8:	d9801b17 	ldw	r6,108(sp)
    a1bc:	a821883a 	mov	r16,r21
    a1c0:	d9402315 	stw	r5,140(sp)
    a1c4:	028001c4 	movi	r10,7
    a1c8:	d9c02915 	stw	r7,164(sp)
    a1cc:	182b883a 	mov	r21,r3
    a1d0:	00000506 	br	a1e8 <___vfiprintf_internal_r+0x494>
    a1d4:	31000084 	addi	r4,r6,2
    a1d8:	42000204 	addi	r8,r8,8
    a1dc:	180d883a 	mov	r6,r3
    a1e0:	843ffc04 	addi	r16,r16,-16
    a1e4:	e4000f0e 	bge	fp,r16,a224 <___vfiprintf_internal_r+0x4d0>
    a1e8:	01000074 	movhi	r4,1
    a1ec:	10800404 	addi	r2,r2,16
    a1f0:	30c00044 	addi	r3,r6,1
    a1f4:	21091004 	addi	r4,r4,9280
    a1f8:	41000015 	stw	r4,0(r8)
    a1fc:	47000115 	stw	fp,4(r8)
    a200:	d8801c15 	stw	r2,112(sp)
    a204:	d8c01b15 	stw	r3,108(sp)
    a208:	50fff20e 	bge	r10,r3,a1d4 <__alt_mem_onchip_memory2_0+0xf8009144>
    a20c:	1001b21e 	bne	r2,zero,a8d8 <___vfiprintf_internal_r+0xb84>
    a210:	843ffc04 	addi	r16,r16,-16
    a214:	000d883a 	mov	r6,zero
    a218:	01000044 	movi	r4,1
    a21c:	d811883a 	mov	r8,sp
    a220:	e43ff116 	blt	fp,r16,a1e8 <__alt_mem_onchip_memory2_0+0xf8009158>
    a224:	a807883a 	mov	r3,r21
    a228:	d9c02917 	ldw	r7,164(sp)
    a22c:	802b883a 	mov	r21,r16
    a230:	dc002717 	ldw	r16,156(sp)
    a234:	d9402317 	ldw	r5,140(sp)
    a238:	a885883a 	add	r2,r21,r2
    a23c:	45400115 	stw	r21,4(r8)
    a240:	41400015 	stw	r5,0(r8)
    a244:	d8801c15 	stw	r2,112(sp)
    a248:	d9001b15 	stw	r4,108(sp)
    a24c:	014001c4 	movi	r5,7
    a250:	29026216 	blt	r5,r4,abdc <___vfiprintf_internal_r+0xe88>
    a254:	d9801d87 	ldb	r6,118(sp)
    a258:	42000204 	addi	r8,r8,8
    a25c:	21400044 	addi	r5,r4,1
    a260:	3001ae1e 	bne	r6,zero,a91c <___vfiprintf_internal_r+0xbc8>
    a264:	3801bb26 	beq	r7,zero,a954 <___vfiprintf_internal_r+0xc00>
    a268:	d9001d04 	addi	r4,sp,116
    a26c:	10800084 	addi	r2,r2,2
    a270:	41000015 	stw	r4,0(r8)
    a274:	01000084 	movi	r4,2
    a278:	41000115 	stw	r4,4(r8)
    a27c:	d8801c15 	stw	r2,112(sp)
    a280:	d9401b15 	stw	r5,108(sp)
    a284:	010001c4 	movi	r4,7
    a288:	2142680e 	bge	r4,r5,ac2c <___vfiprintf_internal_r+0xed8>
    a28c:	1002b11e 	bne	r2,zero,ad54 <___vfiprintf_internal_r+0x1000>
    a290:	01802004 	movi	r6,128
    a294:	01400044 	movi	r5,1
    a298:	0009883a 	mov	r4,zero
    a29c:	d811883a 	mov	r8,sp
    a2a0:	1981ae1e 	bne	r3,r6,a95c <___vfiprintf_internal_r+0xc08>
    a2a4:	d8c02517 	ldw	r3,148(sp)
    a2a8:	1cf9c83a 	sub	fp,r3,r19
    a2ac:	0701ab0e 	bge	zero,fp,a95c <___vfiprintf_internal_r+0xc08>
    a2b0:	05400404 	movi	r21,16
    a2b4:	af03a90e 	bge	r21,fp,b15c <___vfiprintf_internal_r+0x1408>
    a2b8:	01400074 	movhi	r5,1
    a2bc:	29490c04 	addi	r5,r5,9264
    a2c0:	d9402315 	stw	r5,140(sp)
    a2c4:	01c001c4 	movi	r7,7
    a2c8:	00000506 	br	a2e0 <___vfiprintf_internal_r+0x58c>
    a2cc:	21800084 	addi	r6,r4,2
    a2d0:	42000204 	addi	r8,r8,8
    a2d4:	1809883a 	mov	r4,r3
    a2d8:	e73ffc04 	addi	fp,fp,-16
    a2dc:	af000d0e 	bge	r21,fp,a314 <___vfiprintf_internal_r+0x5c0>
    a2e0:	10800404 	addi	r2,r2,16
    a2e4:	20c00044 	addi	r3,r4,1
    a2e8:	44800015 	stw	r18,0(r8)
    a2ec:	45400115 	stw	r21,4(r8)
    a2f0:	d8801c15 	stw	r2,112(sp)
    a2f4:	d8c01b15 	stw	r3,108(sp)
    a2f8:	38fff40e 	bge	r7,r3,a2cc <__alt_mem_onchip_memory2_0+0xf800923c>
    a2fc:	10022b1e 	bne	r2,zero,abac <___vfiprintf_internal_r+0xe58>
    a300:	e73ffc04 	addi	fp,fp,-16
    a304:	01800044 	movi	r6,1
    a308:	0009883a 	mov	r4,zero
    a30c:	d811883a 	mov	r8,sp
    a310:	af3ff316 	blt	r21,fp,a2e0 <__alt_mem_onchip_memory2_0+0xf8009250>
    a314:	d8c02317 	ldw	r3,140(sp)
    a318:	1705883a 	add	r2,r2,fp
    a31c:	47000115 	stw	fp,4(r8)
    a320:	40c00015 	stw	r3,0(r8)
    a324:	d8801c15 	stw	r2,112(sp)
    a328:	d9801b15 	stw	r6,108(sp)
    a32c:	00c001c4 	movi	r3,7
    a330:	19829416 	blt	r3,r6,ad84 <___vfiprintf_internal_r+0x1030>
    a334:	8521c83a 	sub	r16,r16,r20
    a338:	42000204 	addi	r8,r8,8
    a33c:	31400044 	addi	r5,r6,1
    a340:	3009883a 	mov	r4,r6
    a344:	04018716 	blt	zero,r16,a964 <___vfiprintf_internal_r+0xc10>
    a348:	a085883a 	add	r2,r20,r2
    a34c:	45c00015 	stw	r23,0(r8)
    a350:	45000115 	stw	r20,4(r8)
    a354:	d8801c15 	stw	r2,112(sp)
    a358:	d9401b15 	stw	r5,108(sp)
    a35c:	00c001c4 	movi	r3,7
    a360:	1941c20e 	bge	r3,r5,aa6c <___vfiprintf_internal_r+0xd18>
    a364:	1002531e 	bne	r2,zero,acb4 <___vfiprintf_internal_r+0xf60>
    a368:	d8001b15 	stw	zero,108(sp)
    a36c:	8c40010c 	andi	r17,r17,4
    a370:	88023226 	beq	r17,zero,ac3c <___vfiprintf_internal_r+0xee8>
    a374:	d9002517 	ldw	r4,148(sp)
    a378:	24e3c83a 	sub	r17,r4,r19
    a37c:	04432916 	blt	zero,r17,b024 <___vfiprintf_internal_r+0x12d0>
    a380:	d8802517 	ldw	r2,148(sp)
    a384:	14c0010e 	bge	r2,r19,a38c <___vfiprintf_internal_r+0x638>
    a388:	9805883a 	mov	r2,r19
    a38c:	d8c02417 	ldw	r3,144(sp)
    a390:	1887883a 	add	r3,r3,r2
    a394:	d8c02415 	stw	r3,144(sp)
    a398:	d8001b15 	stw	zero,108(sp)
    a39c:	d811883a 	mov	r8,sp
    a3a0:	003ea006 	br	9e24 <__alt_mem_onchip_memory2_0+0xf8008d94>
    a3a4:	8c400814 	ori	r17,r17,32
    a3a8:	b0c00007 	ldb	r3,0(r22)
    a3ac:	003ec606 	br	9ec8 <__alt_mem_onchip_memory2_0+0xf8008e38>
    a3b0:	b0c00007 	ldb	r3,0(r22)
    a3b4:	00801b04 	movi	r2,108
    a3b8:	18832026 	beq	r3,r2,b03c <___vfiprintf_internal_r+0x12e8>
    a3bc:	8c400414 	ori	r17,r17,16
    a3c0:	003ec106 	br	9ec8 <__alt_mem_onchip_memory2_0+0xf8008e38>
    a3c4:	9cc03fcc 	andi	r19,r19,255
    a3c8:	b811883a 	mov	r8,r23
    a3cc:	9803981e 	bne	r19,zero,b230 <___vfiprintf_internal_r+0x14dc>
    a3d0:	8880080c 	andi	r2,r17,32
    a3d4:	1002be26 	beq	r2,zero,aed0 <___vfiprintf_internal_r+0x117c>
    a3d8:	d9002217 	ldw	r4,136(sp)
    a3dc:	d9402417 	ldw	r5,144(sp)
    a3e0:	20800017 	ldw	r2,0(r4)
    a3e4:	2807d7fa 	srai	r3,r5,31
    a3e8:	21000104 	addi	r4,r4,4
    a3ec:	d9002215 	stw	r4,136(sp)
    a3f0:	11400015 	stw	r5,0(r2)
    a3f4:	10c00115 	stw	r3,4(r2)
    a3f8:	003e8a06 	br	9e24 <__alt_mem_onchip_memory2_0+0xf8008d94>
    a3fc:	9cc03fcc 	andi	r19,r19,255
    a400:	b811883a 	mov	r8,r23
    a404:	9803871e 	bne	r19,zero,b224 <___vfiprintf_internal_r+0x14d0>
    a408:	8880080c 	andi	r2,r17,32
    a40c:	10009a26 	beq	r2,zero,a678 <___vfiprintf_internal_r+0x924>
    a410:	d9002217 	ldw	r4,136(sp)
    a414:	d8001d85 	stb	zero,118(sp)
    a418:	20800204 	addi	r2,r4,8
    a41c:	24c00017 	ldw	r19,0(r4)
    a420:	25000117 	ldw	r20,4(r4)
    a424:	8002a416 	blt	r16,zero,aeb8 <___vfiprintf_internal_r+0x1164>
    a428:	013fdfc4 	movi	r4,-129
    a42c:	9d06b03a 	or	r3,r19,r20
    a430:	d8802215 	stw	r2,136(sp)
    a434:	8922703a 	and	r17,r17,r4
    a438:	18009b26 	beq	r3,zero,a6a8 <___vfiprintf_internal_r+0x954>
    a43c:	002b883a 	mov	r21,zero
    a440:	ddc01a04 	addi	r23,sp,104
    a444:	9806d0fa 	srli	r3,r19,3
    a448:	a008977a 	slli	r4,r20,29
    a44c:	a028d0fa 	srli	r20,r20,3
    a450:	9cc001cc 	andi	r19,r19,7
    a454:	98800c04 	addi	r2,r19,48
    a458:	bdffffc4 	addi	r23,r23,-1
    a45c:	20e6b03a 	or	r19,r4,r3
    a460:	b8800005 	stb	r2,0(r23)
    a464:	9d06b03a 	or	r3,r19,r20
    a468:	183ff61e 	bne	r3,zero,a444 <__alt_mem_onchip_memory2_0+0xf80093b4>
    a46c:	88c0004c 	andi	r3,r17,1
    a470:	18021f1e 	bne	r3,zero,acf0 <___vfiprintf_internal_r+0xf9c>
    a474:	d9401e17 	ldw	r5,120(sp)
    a478:	2de9c83a 	sub	r20,r5,r23
    a47c:	003f3806 	br	a160 <__alt_mem_onchip_memory2_0+0xf80090d0>
    a480:	9cc03fcc 	andi	r19,r19,255
    a484:	b811883a 	mov	r8,r23
    a488:	98034f1e 	bne	r19,zero,b1c8 <___vfiprintf_internal_r+0x1474>
    a48c:	00800074 	movhi	r2,1
    a490:	1088ab04 	addi	r2,r2,8876
    a494:	d8802615 	stw	r2,152(sp)
    a498:	8880080c 	andi	r2,r17,32
    a49c:	1000ac26 	beq	r2,zero,a750 <___vfiprintf_internal_r+0x9fc>
    a4a0:	d9002217 	ldw	r4,136(sp)
    a4a4:	24c00017 	ldw	r19,0(r4)
    a4a8:	25000117 	ldw	r20,4(r4)
    a4ac:	21000204 	addi	r4,r4,8
    a4b0:	d9002215 	stw	r4,136(sp)
    a4b4:	8880004c 	andi	r2,r17,1
    a4b8:	1001e726 	beq	r2,zero,ac58 <___vfiprintf_internal_r+0xf04>
    a4bc:	9d04b03a 	or	r2,r19,r20
    a4c0:	10025c1e 	bne	r2,zero,ae34 <___vfiprintf_internal_r+0x10e0>
    a4c4:	d8001d85 	stb	zero,118(sp)
    a4c8:	80024416 	blt	r16,zero,addc <___vfiprintf_internal_r+0x1088>
    a4cc:	00bfdfc4 	movi	r2,-129
    a4d0:	88a2703a 	and	r17,r17,r2
    a4d4:	003f1d06 	br	a14c <__alt_mem_onchip_memory2_0+0xf80090bc>
    a4d8:	d8c02217 	ldw	r3,136(sp)
    a4dc:	04c00044 	movi	r19,1
    a4e0:	b811883a 	mov	r8,r23
    a4e4:	18800017 	ldw	r2,0(r3)
    a4e8:	18c00104 	addi	r3,r3,4
    a4ec:	d8001d85 	stb	zero,118(sp)
    a4f0:	d8801005 	stb	r2,64(sp)
    a4f4:	d8c02215 	stw	r3,136(sp)
    a4f8:	9829883a 	mov	r20,r19
    a4fc:	ddc01004 	addi	r23,sp,64
    a500:	0021883a 	mov	r16,zero
    a504:	003f1e06 	br	a180 <__alt_mem_onchip_memory2_0+0xf80090f0>
    a508:	9cc03fcc 	andi	r19,r19,255
    a50c:	b811883a 	mov	r8,r23
    a510:	9803331e 	bne	r19,zero,b1e0 <___vfiprintf_internal_r+0x148c>
    a514:	8880080c 	andi	r2,r17,32
    a518:	10004826 	beq	r2,zero,a63c <___vfiprintf_internal_r+0x8e8>
    a51c:	d9002217 	ldw	r4,136(sp)
    a520:	20800117 	ldw	r2,4(r4)
    a524:	24c00017 	ldw	r19,0(r4)
    a528:	21000204 	addi	r4,r4,8
    a52c:	d9002215 	stw	r4,136(sp)
    a530:	1029883a 	mov	r20,r2
    a534:	10024c16 	blt	r2,zero,ae68 <___vfiprintf_internal_r+0x1114>
    a538:	dd401d83 	ldbu	r21,118(sp)
    a53c:	80007116 	blt	r16,zero,a704 <___vfiprintf_internal_r+0x9b0>
    a540:	00ffdfc4 	movi	r3,-129
    a544:	9d04b03a 	or	r2,r19,r20
    a548:	88e2703a 	and	r17,r17,r3
    a54c:	1000d126 	beq	r2,zero,a894 <___vfiprintf_internal_r+0xb40>
    a550:	a0023526 	beq	r20,zero,ae28 <___vfiprintf_internal_r+0x10d4>
    a554:	ddc01a04 	addi	r23,sp,104
    a558:	4039883a 	mov	fp,r8
    a55c:	9809883a 	mov	r4,r19
    a560:	a00b883a 	mov	r5,r20
    a564:	01800284 	movi	r6,10
    a568:	000f883a 	mov	r7,zero
    a56c:	000c2800 	call	c280 <__umoddi3>
    a570:	10800c04 	addi	r2,r2,48
    a574:	bdffffc4 	addi	r23,r23,-1
    a578:	9809883a 	mov	r4,r19
    a57c:	a00b883a 	mov	r5,r20
    a580:	b8800005 	stb	r2,0(r23)
    a584:	01800284 	movi	r6,10
    a588:	000f883a 	mov	r7,zero
    a58c:	000bc840 	call	bc84 <__udivdi3>
    a590:	1027883a 	mov	r19,r2
    a594:	10c4b03a 	or	r2,r2,r3
    a598:	1829883a 	mov	r20,r3
    a59c:	103fef1e 	bne	r2,zero,a55c <__alt_mem_onchip_memory2_0+0xf80094cc>
    a5a0:	d9001e17 	ldw	r4,120(sp)
    a5a4:	e011883a 	mov	r8,fp
    a5a8:	25e9c83a 	sub	r20,r4,r23
    a5ac:	003eec06 	br	a160 <__alt_mem_onchip_memory2_0+0xf80090d0>
    a5b0:	d8802307 	ldb	r2,140(sp)
    a5b4:	1002361e 	bne	r2,zero,ae90 <___vfiprintf_internal_r+0x113c>
    a5b8:	00c00804 	movi	r3,32
    a5bc:	d8c02305 	stb	r3,140(sp)
    a5c0:	04c00044 	movi	r19,1
    a5c4:	b0c00007 	ldb	r3,0(r22)
    a5c8:	003e3f06 	br	9ec8 <__alt_mem_onchip_memory2_0+0xf8008e38>
    a5cc:	8c400054 	ori	r17,r17,1
    a5d0:	b0c00007 	ldb	r3,0(r22)
    a5d4:	003e3c06 	br	9ec8 <__alt_mem_onchip_memory2_0+0xf8008e38>
    a5d8:	8c402014 	ori	r17,r17,128
    a5dc:	b0c00007 	ldb	r3,0(r22)
    a5e0:	003e3906 	br	9ec8 <__alt_mem_onchip_memory2_0+0xf8008e38>
    a5e4:	dc002715 	stw	r16,156(sp)
    a5e8:	d8002515 	stw	zero,148(sp)
    a5ec:	1f3ff404 	addi	fp,r3,-48
    a5f0:	0009883a 	mov	r4,zero
    a5f4:	b021883a 	mov	r16,r22
    a5f8:	01400284 	movi	r5,10
    a5fc:	000c9f80 	call	c9f8 <__mulsi3>
    a600:	80c00007 	ldb	r3,0(r16)
    a604:	e089883a 	add	r4,fp,r2
    a608:	b5800044 	addi	r22,r22,1
    a60c:	1f3ff404 	addi	fp,r3,-48
    a610:	b021883a 	mov	r16,r22
    a614:	af3ff82e 	bgeu	r21,fp,a5f8 <__alt_mem_onchip_memory2_0+0xf8009568>
    a618:	d9002515 	stw	r4,148(sp)
    a61c:	dc002717 	ldw	r16,156(sp)
    a620:	003e2a06 	br	9ecc <__alt_mem_onchip_memory2_0+0xf8008e3c>
    a624:	9cc03fcc 	andi	r19,r19,255
    a628:	b811883a 	mov	r8,r23
    a62c:	9802e91e 	bne	r19,zero,b1d4 <___vfiprintf_internal_r+0x1480>
    a630:	8c400414 	ori	r17,r17,16
    a634:	8880080c 	andi	r2,r17,32
    a638:	103fb81e 	bne	r2,zero,a51c <__alt_mem_onchip_memory2_0+0xf800948c>
    a63c:	8880040c 	andi	r2,r17,16
    a640:	10022e26 	beq	r2,zero,aefc <___vfiprintf_internal_r+0x11a8>
    a644:	d9402217 	ldw	r5,136(sp)
    a648:	2cc00017 	ldw	r19,0(r5)
    a64c:	29400104 	addi	r5,r5,4
    a650:	d9402215 	stw	r5,136(sp)
    a654:	9829d7fa 	srai	r20,r19,31
    a658:	a005883a 	mov	r2,r20
    a65c:	003fb506 	br	a534 <__alt_mem_onchip_memory2_0+0xf80094a4>
    a660:	9cc03fcc 	andi	r19,r19,255
    a664:	b811883a 	mov	r8,r23
    a668:	9802fa1e 	bne	r19,zero,b254 <___vfiprintf_internal_r+0x1500>
    a66c:	8c400414 	ori	r17,r17,16
    a670:	8880080c 	andi	r2,r17,32
    a674:	103f661e 	bne	r2,zero,a410 <__alt_mem_onchip_memory2_0+0xf8009380>
    a678:	8880040c 	andi	r2,r17,16
    a67c:	10020626 	beq	r2,zero,ae98 <___vfiprintf_internal_r+0x1144>
    a680:	d9402217 	ldw	r5,136(sp)
    a684:	d8001d85 	stb	zero,118(sp)
    a688:	0029883a 	mov	r20,zero
    a68c:	28800104 	addi	r2,r5,4
    a690:	2cc00017 	ldw	r19,0(r5)
    a694:	80020816 	blt	r16,zero,aeb8 <___vfiprintf_internal_r+0x1164>
    a698:	00ffdfc4 	movi	r3,-129
    a69c:	d8802215 	stw	r2,136(sp)
    a6a0:	88e2703a 	and	r17,r17,r3
    a6a4:	983f651e 	bne	r19,zero,a43c <__alt_mem_onchip_memory2_0+0xf80093ac>
    a6a8:	002b883a 	mov	r21,zero
    a6ac:	8002cf26 	beq	r16,zero,b1ec <___vfiprintf_internal_r+0x1498>
    a6b0:	0027883a 	mov	r19,zero
    a6b4:	0029883a 	mov	r20,zero
    a6b8:	003f6106 	br	a440 <__alt_mem_onchip_memory2_0+0xf80093b0>
    a6bc:	9cc03fcc 	andi	r19,r19,255
    a6c0:	b811883a 	mov	r8,r23
    a6c4:	9802e01e 	bne	r19,zero,b248 <___vfiprintf_internal_r+0x14f4>
    a6c8:	8c400414 	ori	r17,r17,16
    a6cc:	8880080c 	andi	r2,r17,32
    a6d0:	1000641e 	bne	r2,zero,a864 <___vfiprintf_internal_r+0xb10>
    a6d4:	8880040c 	andi	r2,r17,16
    a6d8:	1001c81e 	bne	r2,zero,adfc <___vfiprintf_internal_r+0x10a8>
    a6dc:	8880100c 	andi	r2,r17,64
    a6e0:	d8001d85 	stb	zero,118(sp)
    a6e4:	1002281e 	bne	r2,zero,af88 <___vfiprintf_internal_r+0x1234>
    a6e8:	d9002217 	ldw	r4,136(sp)
    a6ec:	0029883a 	mov	r20,zero
    a6f0:	20800104 	addi	r2,r4,4
    a6f4:	24c00017 	ldw	r19,0(r4)
    a6f8:	8001c60e 	bge	r16,zero,ae14 <___vfiprintf_internal_r+0x10c0>
    a6fc:	d8802215 	stw	r2,136(sp)
    a700:	002b883a 	mov	r21,zero
    a704:	9d04b03a 	or	r2,r19,r20
    a708:	103f911e 	bne	r2,zero,a550 <__alt_mem_onchip_memory2_0+0xf80094c0>
    a70c:	00800044 	movi	r2,1
    a710:	10803fcc 	andi	r2,r2,255
    a714:	00c00044 	movi	r3,1
    a718:	10c05f26 	beq	r2,r3,a898 <___vfiprintf_internal_r+0xb44>
    a71c:	00c00084 	movi	r3,2
    a720:	10ffe31e 	bne	r2,r3,a6b0 <__alt_mem_onchip_memory2_0+0xf8009620>
    a724:	0027883a 	mov	r19,zero
    a728:	0029883a 	mov	r20,zero
    a72c:	00015106 	br	ac74 <___vfiprintf_internal_r+0xf20>
    a730:	9cc03fcc 	andi	r19,r19,255
    a734:	b811883a 	mov	r8,r23
    a738:	9802c01e 	bne	r19,zero,b23c <___vfiprintf_internal_r+0x14e8>
    a73c:	01400074 	movhi	r5,1
    a740:	2948a604 	addi	r5,r5,8856
    a744:	d9402615 	stw	r5,152(sp)
    a748:	8880080c 	andi	r2,r17,32
    a74c:	103f541e 	bne	r2,zero,a4a0 <__alt_mem_onchip_memory2_0+0xf8009410>
    a750:	8880040c 	andi	r2,r17,16
    a754:	1001f226 	beq	r2,zero,af20 <___vfiprintf_internal_r+0x11cc>
    a758:	d9402217 	ldw	r5,136(sp)
    a75c:	0029883a 	mov	r20,zero
    a760:	2cc00017 	ldw	r19,0(r5)
    a764:	29400104 	addi	r5,r5,4
    a768:	d9402215 	stw	r5,136(sp)
    a76c:	003f5106 	br	a4b4 <__alt_mem_onchip_memory2_0+0xf8009424>
    a770:	d8c02217 	ldw	r3,136(sp)
    a774:	b811883a 	mov	r8,r23
    a778:	d8001d85 	stb	zero,118(sp)
    a77c:	1dc00017 	ldw	r23,0(r3)
    a780:	1f000104 	addi	fp,r3,4
    a784:	b8025926 	beq	r23,zero,b0ec <___vfiprintf_internal_r+0x1398>
    a788:	80023316 	blt	r16,zero,b058 <___vfiprintf_internal_r+0x1304>
    a78c:	800d883a 	mov	r6,r16
    a790:	000b883a 	mov	r5,zero
    a794:	b809883a 	mov	r4,r23
    a798:	da002a15 	stw	r8,168(sp)
    a79c:	0007e940 	call	7e94 <memchr>
    a7a0:	da002a17 	ldw	r8,168(sp)
    a7a4:	10026826 	beq	r2,zero,b148 <___vfiprintf_internal_r+0x13f4>
    a7a8:	15e9c83a 	sub	r20,r2,r23
    a7ac:	dd401d83 	ldbu	r21,118(sp)
    a7b0:	df002215 	stw	fp,136(sp)
    a7b4:	0021883a 	mov	r16,zero
    a7b8:	003e6906 	br	a160 <__alt_mem_onchip_memory2_0+0xf80090d0>
    a7bc:	9cc03fcc 	andi	r19,r19,255
    a7c0:	b811883a 	mov	r8,r23
    a7c4:	983fc126 	beq	r19,zero,a6cc <__alt_mem_onchip_memory2_0+0xf800963c>
    a7c8:	d8c02303 	ldbu	r3,140(sp)
    a7cc:	d8c01d85 	stb	r3,118(sp)
    a7d0:	003fbe06 	br	a6cc <__alt_mem_onchip_memory2_0+0xf800963c>
    a7d4:	d9002217 	ldw	r4,136(sp)
    a7d8:	d9402217 	ldw	r5,136(sp)
    a7dc:	21000017 	ldw	r4,0(r4)
    a7e0:	28800104 	addi	r2,r5,4
    a7e4:	d9002515 	stw	r4,148(sp)
    a7e8:	203e3d16 	blt	r4,zero,a0e0 <__alt_mem_onchip_memory2_0+0xf8009050>
    a7ec:	d8802215 	stw	r2,136(sp)
    a7f0:	b0c00007 	ldb	r3,0(r22)
    a7f4:	003db406 	br	9ec8 <__alt_mem_onchip_memory2_0+0xf8008e38>
    a7f8:	00c00ac4 	movi	r3,43
    a7fc:	d8c02305 	stb	r3,140(sp)
    a800:	04c00044 	movi	r19,1
    a804:	b0c00007 	ldb	r3,0(r22)
    a808:	003daf06 	br	9ec8 <__alt_mem_onchip_memory2_0+0xf8008e38>
    a80c:	b0c00007 	ldb	r3,0(r22)
    a810:	01000a84 	movi	r4,42
    a814:	b4000044 	addi	r16,r22,1
    a818:	19025e26 	beq	r3,r4,b194 <___vfiprintf_internal_r+0x1440>
    a81c:	1f3ff404 	addi	fp,r3,-48
    a820:	0009883a 	mov	r4,zero
    a824:	af025236 	bltu	r21,fp,b170 <___vfiprintf_internal_r+0x141c>
    a828:	01400284 	movi	r5,10
    a82c:	000c9f80 	call	c9f8 <__mulsi3>
    a830:	80c00007 	ldb	r3,0(r16)
    a834:	1709883a 	add	r4,r2,fp
    a838:	85800044 	addi	r22,r16,1
    a83c:	1f3ff404 	addi	fp,r3,-48
    a840:	b021883a 	mov	r16,r22
    a844:	af3ff82e 	bgeu	r21,fp,a828 <__alt_mem_onchip_memory2_0+0xf8009798>
    a848:	2021883a 	mov	r16,r4
    a84c:	203d9f0e 	bge	r4,zero,9ecc <__alt_mem_onchip_memory2_0+0xf8008e3c>
    a850:	043fffc4 	movi	r16,-1
    a854:	003d9d06 	br	9ecc <__alt_mem_onchip_memory2_0+0xf8008e3c>
    a858:	8c401014 	ori	r17,r17,64
    a85c:	b0c00007 	ldb	r3,0(r22)
    a860:	003d9906 	br	9ec8 <__alt_mem_onchip_memory2_0+0xf8008e38>
    a864:	d9002217 	ldw	r4,136(sp)
    a868:	d8001d85 	stb	zero,118(sp)
    a86c:	20c00204 	addi	r3,r4,8
    a870:	24c00017 	ldw	r19,0(r4)
    a874:	25000117 	ldw	r20,4(r4)
    a878:	8001e716 	blt	r16,zero,b018 <___vfiprintf_internal_r+0x12c4>
    a87c:	013fdfc4 	movi	r4,-129
    a880:	9d04b03a 	or	r2,r19,r20
    a884:	d8c02215 	stw	r3,136(sp)
    a888:	8922703a 	and	r17,r17,r4
    a88c:	002b883a 	mov	r21,zero
    a890:	103f2f1e 	bne	r2,zero,a550 <__alt_mem_onchip_memory2_0+0xf80094c0>
    a894:	803e2f26 	beq	r16,zero,a154 <__alt_mem_onchip_memory2_0+0xf80090c4>
    a898:	0027883a 	mov	r19,zero
    a89c:	9cc00c04 	addi	r19,r19,48
    a8a0:	dcc019c5 	stb	r19,103(sp)
    a8a4:	dd002817 	ldw	r20,160(sp)
    a8a8:	ddc019c4 	addi	r23,sp,103
    a8ac:	003e2c06 	br	a160 <__alt_mem_onchip_memory2_0+0xf80090d0>
    a8b0:	9cc03fcc 	andi	r19,r19,255
    a8b4:	b811883a 	mov	r8,r23
    a8b8:	9802571e 	bne	r19,zero,b218 <___vfiprintf_internal_r+0x14c4>
    a8bc:	18005726 	beq	r3,zero,aa1c <___vfiprintf_internal_r+0xcc8>
    a8c0:	04c00044 	movi	r19,1
    a8c4:	d8c01005 	stb	r3,64(sp)
    a8c8:	d8001d85 	stb	zero,118(sp)
    a8cc:	9829883a 	mov	r20,r19
    a8d0:	ddc01004 	addi	r23,sp,64
    a8d4:	003f0a06 	br	a500 <__alt_mem_onchip_memory2_0+0xf8009470>
    a8d8:	d9402017 	ldw	r5,128(sp)
    a8dc:	d9002117 	ldw	r4,132(sp)
    a8e0:	d9801a04 	addi	r6,sp,104
    a8e4:	da802a15 	stw	r10,168(sp)
    a8e8:	0009c400 	call	9c40 <__sprint_r.part.0>
    a8ec:	da802a17 	ldw	r10,168(sp)
    a8f0:	1000501e 	bne	r2,zero,aa34 <___vfiprintf_internal_r+0xce0>
    a8f4:	d9801b17 	ldw	r6,108(sp)
    a8f8:	d8801c17 	ldw	r2,112(sp)
    a8fc:	d811883a 	mov	r8,sp
    a900:	31000044 	addi	r4,r6,1
    a904:	003e3606 	br	a1e0 <__alt_mem_onchip_memory2_0+0xf8009150>
    a908:	d9001b17 	ldw	r4,108(sp)
    a90c:	d8801c17 	ldw	r2,112(sp)
    a910:	21400044 	addi	r5,r4,1
    a914:	d9801d87 	ldb	r6,118(sp)
    a918:	303e5226 	beq	r6,zero,a264 <__alt_mem_onchip_memory2_0+0xf80091d4>
    a91c:	01800044 	movi	r6,1
    a920:	d9001d84 	addi	r4,sp,118
    a924:	1185883a 	add	r2,r2,r6
    a928:	41000015 	stw	r4,0(r8)
    a92c:	41800115 	stw	r6,4(r8)
    a930:	d8801c15 	stw	r2,112(sp)
    a934:	d9401b15 	stw	r5,108(sp)
    a938:	010001c4 	movi	r4,7
    a93c:	2140b00e 	bge	r4,r5,ac00 <___vfiprintf_internal_r+0xeac>
    a940:	1000f61e 	bne	r2,zero,ad1c <___vfiprintf_internal_r+0xfc8>
    a944:	3800b31e 	bne	r7,zero,ac14 <___vfiprintf_internal_r+0xec0>
    a948:	0009883a 	mov	r4,zero
    a94c:	300b883a 	mov	r5,r6
    a950:	d811883a 	mov	r8,sp
    a954:	01802004 	movi	r6,128
    a958:	19be5226 	beq	r3,r6,a2a4 <__alt_mem_onchip_memory2_0+0xf8009214>
    a95c:	8521c83a 	sub	r16,r16,r20
    a960:	043e790e 	bge	zero,r16,a348 <__alt_mem_onchip_memory2_0+0xf80092b8>
    a964:	05400404 	movi	r21,16
    a968:	ac01b00e 	bge	r21,r16,b02c <___vfiprintf_internal_r+0x12d8>
    a96c:	01400074 	movhi	r5,1
    a970:	29490c04 	addi	r5,r5,9264
    a974:	d9402315 	stw	r5,140(sp)
    a978:	070001c4 	movi	fp,7
    a97c:	00000506 	br	a994 <___vfiprintf_internal_r+0xc40>
    a980:	21400084 	addi	r5,r4,2
    a984:	42000204 	addi	r8,r8,8
    a988:	1809883a 	mov	r4,r3
    a98c:	843ffc04 	addi	r16,r16,-16
    a990:	ac000d0e 	bge	r21,r16,a9c8 <___vfiprintf_internal_r+0xc74>
    a994:	10800404 	addi	r2,r2,16
    a998:	20c00044 	addi	r3,r4,1
    a99c:	44800015 	stw	r18,0(r8)
    a9a0:	45400115 	stw	r21,4(r8)
    a9a4:	d8801c15 	stw	r2,112(sp)
    a9a8:	d8c01b15 	stw	r3,108(sp)
    a9ac:	e0fff40e 	bge	fp,r3,a980 <__alt_mem_onchip_memory2_0+0xf80098f0>
    a9b0:	1000101e 	bne	r2,zero,a9f4 <___vfiprintf_internal_r+0xca0>
    a9b4:	843ffc04 	addi	r16,r16,-16
    a9b8:	01400044 	movi	r5,1
    a9bc:	0009883a 	mov	r4,zero
    a9c0:	d811883a 	mov	r8,sp
    a9c4:	ac3ff316 	blt	r21,r16,a994 <__alt_mem_onchip_memory2_0+0xf8009904>
    a9c8:	d8c02317 	ldw	r3,140(sp)
    a9cc:	1405883a 	add	r2,r2,r16
    a9d0:	44000115 	stw	r16,4(r8)
    a9d4:	40c00015 	stw	r3,0(r8)
    a9d8:	d8801c15 	stw	r2,112(sp)
    a9dc:	d9401b15 	stw	r5,108(sp)
    a9e0:	00c001c4 	movi	r3,7
    a9e4:	19401916 	blt	r3,r5,aa4c <___vfiprintf_internal_r+0xcf8>
    a9e8:	42000204 	addi	r8,r8,8
    a9ec:	29400044 	addi	r5,r5,1
    a9f0:	003e5506 	br	a348 <__alt_mem_onchip_memory2_0+0xf80092b8>
    a9f4:	d9402017 	ldw	r5,128(sp)
    a9f8:	d9002117 	ldw	r4,132(sp)
    a9fc:	d9801a04 	addi	r6,sp,104
    aa00:	0009c400 	call	9c40 <__sprint_r.part.0>
    aa04:	10000b1e 	bne	r2,zero,aa34 <___vfiprintf_internal_r+0xce0>
    aa08:	d9001b17 	ldw	r4,108(sp)
    aa0c:	d8801c17 	ldw	r2,112(sp)
    aa10:	d811883a 	mov	r8,sp
    aa14:	21400044 	addi	r5,r4,1
    aa18:	003fdc06 	br	a98c <__alt_mem_onchip_memory2_0+0xf80098fc>
    aa1c:	d8801c17 	ldw	r2,112(sp)
    aa20:	10000426 	beq	r2,zero,aa34 <___vfiprintf_internal_r+0xce0>
    aa24:	d9402017 	ldw	r5,128(sp)
    aa28:	d9002117 	ldw	r4,132(sp)
    aa2c:	d9801a04 	addi	r6,sp,104
    aa30:	0009c400 	call	9c40 <__sprint_r.part.0>
    aa34:	d9402017 	ldw	r5,128(sp)
    aa38:	2880030b 	ldhu	r2,12(r5)
    aa3c:	1080100c 	andi	r2,r2,64
    aa40:	10014d1e 	bne	r2,zero,af78 <___vfiprintf_internal_r+0x1224>
    aa44:	d8802417 	ldw	r2,144(sp)
    aa48:	003d9706 	br	a0a8 <__alt_mem_onchip_memory2_0+0xf8009018>
    aa4c:	1000d21e 	bne	r2,zero,ad98 <___vfiprintf_internal_r+0x1044>
    aa50:	00c00044 	movi	r3,1
    aa54:	a005883a 	mov	r2,r20
    aa58:	ddc00015 	stw	r23,0(sp)
    aa5c:	dd000115 	stw	r20,4(sp)
    aa60:	dd001c15 	stw	r20,112(sp)
    aa64:	d8c01b15 	stw	r3,108(sp)
    aa68:	d811883a 	mov	r8,sp
    aa6c:	42000204 	addi	r8,r8,8
    aa70:	8c40010c 	andi	r17,r17,4
    aa74:	88004026 	beq	r17,zero,ab78 <___vfiprintf_internal_r+0xe24>
    aa78:	d9002517 	ldw	r4,148(sp)
    aa7c:	24e3c83a 	sub	r17,r4,r19
    aa80:	04403d0e 	bge	zero,r17,ab78 <___vfiprintf_internal_r+0xe24>
    aa84:	04000404 	movi	r16,16
    aa88:	8441a90e 	bge	r16,r17,b130 <___vfiprintf_internal_r+0x13dc>
    aa8c:	00c00074 	movhi	r3,1
    aa90:	18c91004 	addi	r3,r3,9280
    aa94:	d9001b17 	ldw	r4,108(sp)
    aa98:	d8c02315 	stw	r3,140(sp)
    aa9c:	050001c4 	movi	r20,7
    aaa0:	dd402117 	ldw	r21,132(sp)
    aaa4:	ddc02017 	ldw	r23,128(sp)
    aaa8:	00000506 	br	aac0 <___vfiprintf_internal_r+0xd6c>
    aaac:	21400084 	addi	r5,r4,2
    aab0:	42000204 	addi	r8,r8,8
    aab4:	1809883a 	mov	r4,r3
    aab8:	8c7ffc04 	addi	r17,r17,-16
    aabc:	84400f0e 	bge	r16,r17,aafc <___vfiprintf_internal_r+0xda8>
    aac0:	01400074 	movhi	r5,1
    aac4:	10800404 	addi	r2,r2,16
    aac8:	20c00044 	addi	r3,r4,1
    aacc:	29491004 	addi	r5,r5,9280
    aad0:	41400015 	stw	r5,0(r8)
    aad4:	44000115 	stw	r16,4(r8)
    aad8:	d8801c15 	stw	r2,112(sp)
    aadc:	d8c01b15 	stw	r3,108(sp)
    aae0:	a0fff20e 	bge	r20,r3,aaac <__alt_mem_onchip_memory2_0+0xf8009a1c>
    aae4:	1000141e 	bne	r2,zero,ab38 <___vfiprintf_internal_r+0xde4>
    aae8:	8c7ffc04 	addi	r17,r17,-16
    aaec:	01400044 	movi	r5,1
    aaf0:	0009883a 	mov	r4,zero
    aaf4:	d811883a 	mov	r8,sp
    aaf8:	847ff116 	blt	r16,r17,aac0 <__alt_mem_onchip_memory2_0+0xf8009a30>
    aafc:	d8c02317 	ldw	r3,140(sp)
    ab00:	1445883a 	add	r2,r2,r17
    ab04:	44400115 	stw	r17,4(r8)
    ab08:	40c00015 	stw	r3,0(r8)
    ab0c:	d8801c15 	stw	r2,112(sp)
    ab10:	d9401b15 	stw	r5,108(sp)
    ab14:	00c001c4 	movi	r3,7
    ab18:	1940170e 	bge	r3,r5,ab78 <___vfiprintf_internal_r+0xe24>
    ab1c:	1000101e 	bne	r2,zero,ab60 <___vfiprintf_internal_r+0xe0c>
    ab20:	d8802517 	ldw	r2,148(sp)
    ab24:	14c11616 	blt	r2,r19,af80 <___vfiprintf_internal_r+0x122c>
    ab28:	d9002417 	ldw	r4,144(sp)
    ab2c:	2089883a 	add	r4,r4,r2
    ab30:	d9002415 	stw	r4,144(sp)
    ab34:	003e1806 	br	a398 <__alt_mem_onchip_memory2_0+0xf8009308>
    ab38:	d9801a04 	addi	r6,sp,104
    ab3c:	b80b883a 	mov	r5,r23
    ab40:	a809883a 	mov	r4,r21
    ab44:	0009c400 	call	9c40 <__sprint_r.part.0>
    ab48:	103fba1e 	bne	r2,zero,aa34 <__alt_mem_onchip_memory2_0+0xf80099a4>
    ab4c:	d9001b17 	ldw	r4,108(sp)
    ab50:	d8801c17 	ldw	r2,112(sp)
    ab54:	d811883a 	mov	r8,sp
    ab58:	21400044 	addi	r5,r4,1
    ab5c:	003fd606 	br	aab8 <__alt_mem_onchip_memory2_0+0xf8009a28>
    ab60:	d9402017 	ldw	r5,128(sp)
    ab64:	d9002117 	ldw	r4,132(sp)
    ab68:	d9801a04 	addi	r6,sp,104
    ab6c:	0009c400 	call	9c40 <__sprint_r.part.0>
    ab70:	103fb01e 	bne	r2,zero,aa34 <__alt_mem_onchip_memory2_0+0xf80099a4>
    ab74:	d8801c17 	ldw	r2,112(sp)
    ab78:	d8c02517 	ldw	r3,148(sp)
    ab7c:	1cc0010e 	bge	r3,r19,ab84 <___vfiprintf_internal_r+0xe30>
    ab80:	9807883a 	mov	r3,r19
    ab84:	d9002417 	ldw	r4,144(sp)
    ab88:	20c9883a 	add	r4,r4,r3
    ab8c:	d9002415 	stw	r4,144(sp)
    ab90:	103e0126 	beq	r2,zero,a398 <__alt_mem_onchip_memory2_0+0xf8009308>
    ab94:	d9402017 	ldw	r5,128(sp)
    ab98:	d9002117 	ldw	r4,132(sp)
    ab9c:	d9801a04 	addi	r6,sp,104
    aba0:	0009c400 	call	9c40 <__sprint_r.part.0>
    aba4:	103dfc26 	beq	r2,zero,a398 <__alt_mem_onchip_memory2_0+0xf8009308>
    aba8:	003fa206 	br	aa34 <__alt_mem_onchip_memory2_0+0xf80099a4>
    abac:	d9402017 	ldw	r5,128(sp)
    abb0:	d9002117 	ldw	r4,132(sp)
    abb4:	d9801a04 	addi	r6,sp,104
    abb8:	d9c02b15 	stw	r7,172(sp)
    abbc:	0009c400 	call	9c40 <__sprint_r.part.0>
    abc0:	d9c02b17 	ldw	r7,172(sp)
    abc4:	103f9b1e 	bne	r2,zero,aa34 <__alt_mem_onchip_memory2_0+0xf80099a4>
    abc8:	d9001b17 	ldw	r4,108(sp)
    abcc:	d8801c17 	ldw	r2,112(sp)
    abd0:	d811883a 	mov	r8,sp
    abd4:	21800044 	addi	r6,r4,1
    abd8:	003dbf06 	br	a2d8 <__alt_mem_onchip_memory2_0+0xf8009248>
    abdc:	1000d81e 	bne	r2,zero,af40 <___vfiprintf_internal_r+0x11ec>
    abe0:	d9001d87 	ldb	r4,118(sp)
    abe4:	20000a26 	beq	r4,zero,ac10 <___vfiprintf_internal_r+0xebc>
    abe8:	00800044 	movi	r2,1
    abec:	d9001d84 	addi	r4,sp,118
    abf0:	100b883a 	mov	r5,r2
    abf4:	d9000015 	stw	r4,0(sp)
    abf8:	d8800115 	stw	r2,4(sp)
    abfc:	d811883a 	mov	r8,sp
    ac00:	2809883a 	mov	r4,r5
    ac04:	42000204 	addi	r8,r8,8
    ac08:	29400044 	addi	r5,r5,1
    ac0c:	003d9506 	br	a264 <__alt_mem_onchip_memory2_0+0xf80091d4>
    ac10:	3800fd26 	beq	r7,zero,b008 <___vfiprintf_internal_r+0x12b4>
    ac14:	00800084 	movi	r2,2
    ac18:	d9001d04 	addi	r4,sp,116
    ac1c:	d9000015 	stw	r4,0(sp)
    ac20:	d8800115 	stw	r2,4(sp)
    ac24:	01400044 	movi	r5,1
    ac28:	d811883a 	mov	r8,sp
    ac2c:	2809883a 	mov	r4,r5
    ac30:	42000204 	addi	r8,r8,8
    ac34:	29400044 	addi	r5,r5,1
    ac38:	003f4606 	br	a954 <__alt_mem_onchip_memory2_0+0xf80098c4>
    ac3c:	d8802517 	ldw	r2,148(sp)
    ac40:	14c0010e 	bge	r2,r19,ac48 <___vfiprintf_internal_r+0xef4>
    ac44:	9805883a 	mov	r2,r19
    ac48:	d9402417 	ldw	r5,144(sp)
    ac4c:	288b883a 	add	r5,r5,r2
    ac50:	d9402415 	stw	r5,144(sp)
    ac54:	003dd006 	br	a398 <__alt_mem_onchip_memory2_0+0xf8009308>
    ac58:	d8001d85 	stb	zero,118(sp)
    ac5c:	80005d16 	blt	r16,zero,add4 <___vfiprintf_internal_r+0x1080>
    ac60:	00ffdfc4 	movi	r3,-129
    ac64:	9d04b03a 	or	r2,r19,r20
    ac68:	88e2703a 	and	r17,r17,r3
    ac6c:	103d3726 	beq	r2,zero,a14c <__alt_mem_onchip_memory2_0+0xf80090bc>
    ac70:	002b883a 	mov	r21,zero
    ac74:	d9002617 	ldw	r4,152(sp)
    ac78:	ddc01a04 	addi	r23,sp,104
    ac7c:	988003cc 	andi	r2,r19,15
    ac80:	a006973a 	slli	r3,r20,28
    ac84:	2085883a 	add	r2,r4,r2
    ac88:	9826d13a 	srli	r19,r19,4
    ac8c:	10800003 	ldbu	r2,0(r2)
    ac90:	a028d13a 	srli	r20,r20,4
    ac94:	bdffffc4 	addi	r23,r23,-1
    ac98:	1ce6b03a 	or	r19,r3,r19
    ac9c:	b8800005 	stb	r2,0(r23)
    aca0:	9d04b03a 	or	r2,r19,r20
    aca4:	103ff51e 	bne	r2,zero,ac7c <__alt_mem_onchip_memory2_0+0xf8009bec>
    aca8:	d8801e17 	ldw	r2,120(sp)
    acac:	15e9c83a 	sub	r20,r2,r23
    acb0:	003d2b06 	br	a160 <__alt_mem_onchip_memory2_0+0xf80090d0>
    acb4:	d9402017 	ldw	r5,128(sp)
    acb8:	d9002117 	ldw	r4,132(sp)
    acbc:	d9801a04 	addi	r6,sp,104
    acc0:	0009c400 	call	9c40 <__sprint_r.part.0>
    acc4:	103f5b1e 	bne	r2,zero,aa34 <__alt_mem_onchip_memory2_0+0xf80099a4>
    acc8:	d8801c17 	ldw	r2,112(sp)
    accc:	d811883a 	mov	r8,sp
    acd0:	003f6706 	br	aa70 <__alt_mem_onchip_memory2_0+0xf80099e0>
    acd4:	d9402017 	ldw	r5,128(sp)
    acd8:	d9002117 	ldw	r4,132(sp)
    acdc:	d9801a04 	addi	r6,sp,104
    ace0:	0009c400 	call	9c40 <__sprint_r.part.0>
    ace4:	103f531e 	bne	r2,zero,aa34 <__alt_mem_onchip_memory2_0+0xf80099a4>
    ace8:	d811883a 	mov	r8,sp
    acec:	003cd906 	br	a054 <__alt_mem_onchip_memory2_0+0xf8008fc4>
    acf0:	10803fcc 	andi	r2,r2,255
    acf4:	1080201c 	xori	r2,r2,128
    acf8:	10bfe004 	addi	r2,r2,-128
    acfc:	00c00c04 	movi	r3,48
    ad00:	10ffe926 	beq	r2,r3,aca8 <__alt_mem_onchip_memory2_0+0xf8009c18>
    ad04:	b8ffffc5 	stb	r3,-1(r23)
    ad08:	d8c01e17 	ldw	r3,120(sp)
    ad0c:	b8bfffc4 	addi	r2,r23,-1
    ad10:	102f883a 	mov	r23,r2
    ad14:	18a9c83a 	sub	r20,r3,r2
    ad18:	003d1106 	br	a160 <__alt_mem_onchip_memory2_0+0xf80090d0>
    ad1c:	d9402017 	ldw	r5,128(sp)
    ad20:	d9002117 	ldw	r4,132(sp)
    ad24:	d9801a04 	addi	r6,sp,104
    ad28:	d8c02a15 	stw	r3,168(sp)
    ad2c:	d9c02b15 	stw	r7,172(sp)
    ad30:	0009c400 	call	9c40 <__sprint_r.part.0>
    ad34:	d8c02a17 	ldw	r3,168(sp)
    ad38:	d9c02b17 	ldw	r7,172(sp)
    ad3c:	103f3d1e 	bne	r2,zero,aa34 <__alt_mem_onchip_memory2_0+0xf80099a4>
    ad40:	d9001b17 	ldw	r4,108(sp)
    ad44:	d8801c17 	ldw	r2,112(sp)
    ad48:	d811883a 	mov	r8,sp
    ad4c:	21400044 	addi	r5,r4,1
    ad50:	003d4406 	br	a264 <__alt_mem_onchip_memory2_0+0xf80091d4>
    ad54:	d9402017 	ldw	r5,128(sp)
    ad58:	d9002117 	ldw	r4,132(sp)
    ad5c:	d9801a04 	addi	r6,sp,104
    ad60:	d8c02a15 	stw	r3,168(sp)
    ad64:	0009c400 	call	9c40 <__sprint_r.part.0>
    ad68:	d8c02a17 	ldw	r3,168(sp)
    ad6c:	103f311e 	bne	r2,zero,aa34 <__alt_mem_onchip_memory2_0+0xf80099a4>
    ad70:	d9001b17 	ldw	r4,108(sp)
    ad74:	d8801c17 	ldw	r2,112(sp)
    ad78:	d811883a 	mov	r8,sp
    ad7c:	21400044 	addi	r5,r4,1
    ad80:	003ef406 	br	a954 <__alt_mem_onchip_memory2_0+0xf80098c4>
    ad84:	1000bd1e 	bne	r2,zero,b07c <___vfiprintf_internal_r+0x1328>
    ad88:	01400044 	movi	r5,1
    ad8c:	0009883a 	mov	r4,zero
    ad90:	d811883a 	mov	r8,sp
    ad94:	003ef106 	br	a95c <__alt_mem_onchip_memory2_0+0xf80098cc>
    ad98:	d9402017 	ldw	r5,128(sp)
    ad9c:	d9002117 	ldw	r4,132(sp)
    ada0:	d9801a04 	addi	r6,sp,104
    ada4:	0009c400 	call	9c40 <__sprint_r.part.0>
    ada8:	103f221e 	bne	r2,zero,aa34 <__alt_mem_onchip_memory2_0+0xf80099a4>
    adac:	d9401b17 	ldw	r5,108(sp)
    adb0:	d8801c17 	ldw	r2,112(sp)
    adb4:	d811883a 	mov	r8,sp
    adb8:	29400044 	addi	r5,r5,1
    adbc:	003d6206 	br	a348 <__alt_mem_onchip_memory2_0+0xf80092b8>
    adc0:	01400074 	movhi	r5,1
    adc4:	2948ab04 	addi	r5,r5,8876
    adc8:	d9402615 	stw	r5,152(sp)
    adcc:	d8c02215 	stw	r3,136(sp)
    add0:	1023883a 	mov	r17,r2
    add4:	9d04b03a 	or	r2,r19,r20
    add8:	103fa51e 	bne	r2,zero,ac70 <__alt_mem_onchip_memory2_0+0xf8009be0>
    addc:	002b883a 	mov	r21,zero
    ade0:	00800084 	movi	r2,2
    ade4:	003e4a06 	br	a710 <__alt_mem_onchip_memory2_0+0xf8009680>
    ade8:	01400074 	movhi	r5,1
    adec:	2948ab04 	addi	r5,r5,8876
    adf0:	002b883a 	mov	r21,zero
    adf4:	d9402615 	stw	r5,152(sp)
    adf8:	003f9e06 	br	ac74 <__alt_mem_onchip_memory2_0+0xf8009be4>
    adfc:	d9402217 	ldw	r5,136(sp)
    ae00:	d8001d85 	stb	zero,118(sp)
    ae04:	0029883a 	mov	r20,zero
    ae08:	28800104 	addi	r2,r5,4
    ae0c:	2cc00017 	ldw	r19,0(r5)
    ae10:	803e3a16 	blt	r16,zero,a6fc <__alt_mem_onchip_memory2_0+0xf800966c>
    ae14:	00ffdfc4 	movi	r3,-129
    ae18:	d8802215 	stw	r2,136(sp)
    ae1c:	88e2703a 	and	r17,r17,r3
    ae20:	002b883a 	mov	r21,zero
    ae24:	983e9b26 	beq	r19,zero,a894 <__alt_mem_onchip_memory2_0+0xf8009804>
    ae28:	00800244 	movi	r2,9
    ae2c:	14fdc936 	bltu	r2,r19,a554 <__alt_mem_onchip_memory2_0+0xf80094c4>
    ae30:	003e9a06 	br	a89c <__alt_mem_onchip_memory2_0+0xf800980c>
    ae34:	00800c04 	movi	r2,48
    ae38:	d8c01d45 	stb	r3,117(sp)
    ae3c:	d8801d05 	stb	r2,116(sp)
    ae40:	d8001d85 	stb	zero,118(sp)
    ae44:	88c00094 	ori	r3,r17,2
    ae48:	80009c16 	blt	r16,zero,b0bc <___vfiprintf_internal_r+0x1368>
    ae4c:	00bfdfc4 	movi	r2,-129
    ae50:	88a2703a 	and	r17,r17,r2
    ae54:	8c400094 	ori	r17,r17,2
    ae58:	002b883a 	mov	r21,zero
    ae5c:	003f8506 	br	ac74 <__alt_mem_onchip_memory2_0+0xf8009be4>
    ae60:	b029883a 	mov	r20,r22
    ae64:	003c0b06 	br	9e94 <__alt_mem_onchip_memory2_0+0xf8008e04>
    ae68:	04e7c83a 	sub	r19,zero,r19
    ae6c:	05400b44 	movi	r21,45
    ae70:	9804c03a 	cmpne	r2,r19,zero
    ae74:	0529c83a 	sub	r20,zero,r20
    ae78:	dd401d85 	stb	r21,118(sp)
    ae7c:	a0a9c83a 	sub	r20,r20,r2
    ae80:	80009716 	blt	r16,zero,b0e0 <___vfiprintf_internal_r+0x138c>
    ae84:	00bfdfc4 	movi	r2,-129
    ae88:	88a2703a 	and	r17,r17,r2
    ae8c:	003db006 	br	a550 <__alt_mem_onchip_memory2_0+0xf80094c0>
    ae90:	b0c00007 	ldb	r3,0(r22)
    ae94:	003c0c06 	br	9ec8 <__alt_mem_onchip_memory2_0+0xf8008e38>
    ae98:	8880100c 	andi	r2,r17,64
    ae9c:	d8001d85 	stb	zero,118(sp)
    aea0:	1000461e 	bne	r2,zero,afbc <___vfiprintf_internal_r+0x1268>
    aea4:	d9002217 	ldw	r4,136(sp)
    aea8:	0029883a 	mov	r20,zero
    aeac:	20800104 	addi	r2,r4,4
    aeb0:	24c00017 	ldw	r19,0(r4)
    aeb4:	803df80e 	bge	r16,zero,a698 <__alt_mem_onchip_memory2_0+0xf8009608>
    aeb8:	9d06b03a 	or	r3,r19,r20
    aebc:	d8802215 	stw	r2,136(sp)
    aec0:	183d5e1e 	bne	r3,zero,a43c <__alt_mem_onchip_memory2_0+0xf80093ac>
    aec4:	002b883a 	mov	r21,zero
    aec8:	0005883a 	mov	r2,zero
    aecc:	003e1006 	br	a710 <__alt_mem_onchip_memory2_0+0xf8009680>
    aed0:	8880040c 	andi	r2,r17,16
    aed4:	1000321e 	bne	r2,zero,afa0 <___vfiprintf_internal_r+0x124c>
    aed8:	8c40100c 	andi	r17,r17,64
    aedc:	88008d26 	beq	r17,zero,b114 <___vfiprintf_internal_r+0x13c0>
    aee0:	d9402217 	ldw	r5,136(sp)
    aee4:	d8c02417 	ldw	r3,144(sp)
    aee8:	28800017 	ldw	r2,0(r5)
    aeec:	29400104 	addi	r5,r5,4
    aef0:	d9402215 	stw	r5,136(sp)
    aef4:	10c0000d 	sth	r3,0(r2)
    aef8:	003bca06 	br	9e24 <__alt_mem_onchip_memory2_0+0xf8008d94>
    aefc:	8880100c 	andi	r2,r17,64
    af00:	10003a26 	beq	r2,zero,afec <___vfiprintf_internal_r+0x1298>
    af04:	d8802217 	ldw	r2,136(sp)
    af08:	14c0000f 	ldh	r19,0(r2)
    af0c:	10800104 	addi	r2,r2,4
    af10:	d8802215 	stw	r2,136(sp)
    af14:	9829d7fa 	srai	r20,r19,31
    af18:	a005883a 	mov	r2,r20
    af1c:	003d8506 	br	a534 <__alt_mem_onchip_memory2_0+0xf80094a4>
    af20:	8880100c 	andi	r2,r17,64
    af24:	10002b26 	beq	r2,zero,afd4 <___vfiprintf_internal_r+0x1280>
    af28:	d8802217 	ldw	r2,136(sp)
    af2c:	0029883a 	mov	r20,zero
    af30:	14c0000b 	ldhu	r19,0(r2)
    af34:	10800104 	addi	r2,r2,4
    af38:	d8802215 	stw	r2,136(sp)
    af3c:	003d5d06 	br	a4b4 <__alt_mem_onchip_memory2_0+0xf8009424>
    af40:	d9402017 	ldw	r5,128(sp)
    af44:	d9002117 	ldw	r4,132(sp)
    af48:	d9801a04 	addi	r6,sp,104
    af4c:	d8c02a15 	stw	r3,168(sp)
    af50:	d9c02b15 	stw	r7,172(sp)
    af54:	0009c400 	call	9c40 <__sprint_r.part.0>
    af58:	d8c02a17 	ldw	r3,168(sp)
    af5c:	d9c02b17 	ldw	r7,172(sp)
    af60:	103eb41e 	bne	r2,zero,aa34 <__alt_mem_onchip_memory2_0+0xf80099a4>
    af64:	d9001b17 	ldw	r4,108(sp)
    af68:	d8801c17 	ldw	r2,112(sp)
    af6c:	d811883a 	mov	r8,sp
    af70:	21400044 	addi	r5,r4,1
    af74:	003e6706 	br	a914 <__alt_mem_onchip_memory2_0+0xf8009884>
    af78:	00bfffc4 	movi	r2,-1
    af7c:	003c4a06 	br	a0a8 <__alt_mem_onchip_memory2_0+0xf8009018>
    af80:	9805883a 	mov	r2,r19
    af84:	003ee806 	br	ab28 <__alt_mem_onchip_memory2_0+0xf8009a98>
    af88:	d8c02217 	ldw	r3,136(sp)
    af8c:	0029883a 	mov	r20,zero
    af90:	18800104 	addi	r2,r3,4
    af94:	1cc0000b 	ldhu	r19,0(r3)
    af98:	803f9e0e 	bge	r16,zero,ae14 <__alt_mem_onchip_memory2_0+0xf8009d84>
    af9c:	003dd706 	br	a6fc <__alt_mem_onchip_memory2_0+0xf800966c>
    afa0:	d8c02217 	ldw	r3,136(sp)
    afa4:	d9002417 	ldw	r4,144(sp)
    afa8:	18800017 	ldw	r2,0(r3)
    afac:	18c00104 	addi	r3,r3,4
    afb0:	d8c02215 	stw	r3,136(sp)
    afb4:	11000015 	stw	r4,0(r2)
    afb8:	003b9a06 	br	9e24 <__alt_mem_onchip_memory2_0+0xf8008d94>
    afbc:	d8c02217 	ldw	r3,136(sp)
    afc0:	0029883a 	mov	r20,zero
    afc4:	18800104 	addi	r2,r3,4
    afc8:	1cc0000b 	ldhu	r19,0(r3)
    afcc:	803db20e 	bge	r16,zero,a698 <__alt_mem_onchip_memory2_0+0xf8009608>
    afd0:	003fb906 	br	aeb8 <__alt_mem_onchip_memory2_0+0xf8009e28>
    afd4:	d9002217 	ldw	r4,136(sp)
    afd8:	0029883a 	mov	r20,zero
    afdc:	24c00017 	ldw	r19,0(r4)
    afe0:	21000104 	addi	r4,r4,4
    afe4:	d9002215 	stw	r4,136(sp)
    afe8:	003d3206 	br	a4b4 <__alt_mem_onchip_memory2_0+0xf8009424>
    afec:	d8c02217 	ldw	r3,136(sp)
    aff0:	1cc00017 	ldw	r19,0(r3)
    aff4:	18c00104 	addi	r3,r3,4
    aff8:	d8c02215 	stw	r3,136(sp)
    affc:	9829d7fa 	srai	r20,r19,31
    b000:	a005883a 	mov	r2,r20
    b004:	003d4b06 	br	a534 <__alt_mem_onchip_memory2_0+0xf80094a4>
    b008:	0009883a 	mov	r4,zero
    b00c:	01400044 	movi	r5,1
    b010:	d811883a 	mov	r8,sp
    b014:	003e4f06 	br	a954 <__alt_mem_onchip_memory2_0+0xf80098c4>
    b018:	d8c02215 	stw	r3,136(sp)
    b01c:	002b883a 	mov	r21,zero
    b020:	003db806 	br	a704 <__alt_mem_onchip_memory2_0+0xf8009674>
    b024:	d811883a 	mov	r8,sp
    b028:	003e9606 	br	aa84 <__alt_mem_onchip_memory2_0+0xf80099f4>
    b02c:	01000074 	movhi	r4,1
    b030:	21090c04 	addi	r4,r4,9264
    b034:	d9002315 	stw	r4,140(sp)
    b038:	003e6306 	br	a9c8 <__alt_mem_onchip_memory2_0+0xf8009938>
    b03c:	b0c00043 	ldbu	r3,1(r22)
    b040:	8c400814 	ori	r17,r17,32
    b044:	b5800044 	addi	r22,r22,1
    b048:	18c03fcc 	andi	r3,r3,255
    b04c:	18c0201c 	xori	r3,r3,128
    b050:	18ffe004 	addi	r3,r3,-128
    b054:	003b9c06 	br	9ec8 <__alt_mem_onchip_memory2_0+0xf8008e38>
    b058:	b809883a 	mov	r4,r23
    b05c:	da002a15 	stw	r8,168(sp)
    b060:	00024c40 	call	24c4 <strlen>
    b064:	1029883a 	mov	r20,r2
    b068:	dd401d83 	ldbu	r21,118(sp)
    b06c:	df002215 	stw	fp,136(sp)
    b070:	0021883a 	mov	r16,zero
    b074:	da002a17 	ldw	r8,168(sp)
    b078:	003c3906 	br	a160 <__alt_mem_onchip_memory2_0+0xf80090d0>
    b07c:	d9402017 	ldw	r5,128(sp)
    b080:	d9002117 	ldw	r4,132(sp)
    b084:	d9801a04 	addi	r6,sp,104
    b088:	0009c400 	call	9c40 <__sprint_r.part.0>
    b08c:	103e691e 	bne	r2,zero,aa34 <__alt_mem_onchip_memory2_0+0xf80099a4>
    b090:	d9001b17 	ldw	r4,108(sp)
    b094:	d8801c17 	ldw	r2,112(sp)
    b098:	d811883a 	mov	r8,sp
    b09c:	21400044 	addi	r5,r4,1
    b0a0:	003e2e06 	br	a95c <__alt_mem_onchip_memory2_0+0xf80098cc>
    b0a4:	01000074 	movhi	r4,1
    b0a8:	21091004 	addi	r4,r4,9280
    b0ac:	d9002315 	stw	r4,140(sp)
    b0b0:	d9001b17 	ldw	r4,108(sp)
    b0b4:	21000044 	addi	r4,r4,1
    b0b8:	003c5e06 	br	a234 <__alt_mem_onchip_memory2_0+0xf80091a4>
    b0bc:	002b883a 	mov	r21,zero
    b0c0:	00800084 	movi	r2,2
    b0c4:	10803fcc 	andi	r2,r2,255
    b0c8:	01000044 	movi	r4,1
    b0cc:	11002b26 	beq	r2,r4,b17c <___vfiprintf_internal_r+0x1428>
    b0d0:	01000084 	movi	r4,2
    b0d4:	11002b1e 	bne	r2,r4,b184 <___vfiprintf_internal_r+0x1430>
    b0d8:	1823883a 	mov	r17,r3
    b0dc:	003ee506 	br	ac74 <__alt_mem_onchip_memory2_0+0xf8009be4>
    b0e0:	8807883a 	mov	r3,r17
    b0e4:	00800044 	movi	r2,1
    b0e8:	003ff606 	br	b0c4 <__alt_mem_onchip_memory2_0+0xf800a034>
    b0ec:	00800184 	movi	r2,6
    b0f0:	1400012e 	bgeu	r2,r16,b0f8 <___vfiprintf_internal_r+0x13a4>
    b0f4:	1021883a 	mov	r16,r2
    b0f8:	8029883a 	mov	r20,r16
    b0fc:	8027883a 	mov	r19,r16
    b100:	80002216 	blt	r16,zero,b18c <___vfiprintf_internal_r+0x1438>
    b104:	05c00074 	movhi	r23,1
    b108:	df002215 	stw	fp,136(sp)
    b10c:	bdc8b004 	addi	r23,r23,8896
    b110:	003cfb06 	br	a500 <__alt_mem_onchip_memory2_0+0xf8009470>
    b114:	d9002217 	ldw	r4,136(sp)
    b118:	d9402417 	ldw	r5,144(sp)
    b11c:	20800017 	ldw	r2,0(r4)
    b120:	21000104 	addi	r4,r4,4
    b124:	d9002215 	stw	r4,136(sp)
    b128:	11400015 	stw	r5,0(r2)
    b12c:	003b3d06 	br	9e24 <__alt_mem_onchip_memory2_0+0xf8008d94>
    b130:	01400074 	movhi	r5,1
    b134:	29491004 	addi	r5,r5,9280
    b138:	d9402315 	stw	r5,140(sp)
    b13c:	d9401b17 	ldw	r5,108(sp)
    b140:	29400044 	addi	r5,r5,1
    b144:	003e6d06 	br	aafc <__alt_mem_onchip_memory2_0+0xf8009a6c>
    b148:	8029883a 	mov	r20,r16
    b14c:	dd401d83 	ldbu	r21,118(sp)
    b150:	df002215 	stw	fp,136(sp)
    b154:	0021883a 	mov	r16,zero
    b158:	003c0106 	br	a160 <__alt_mem_onchip_memory2_0+0xf80090d0>
    b15c:	00c00074 	movhi	r3,1
    b160:	18c90c04 	addi	r3,r3,9264
    b164:	d8c02315 	stw	r3,140(sp)
    b168:	280d883a 	mov	r6,r5
    b16c:	003c6906 	br	a314 <__alt_mem_onchip_memory2_0+0xf8009284>
    b170:	802d883a 	mov	r22,r16
    b174:	0021883a 	mov	r16,zero
    b178:	003b5406 	br	9ecc <__alt_mem_onchip_memory2_0+0xf8008e3c>
    b17c:	1823883a 	mov	r17,r3
    b180:	003cf306 	br	a550 <__alt_mem_onchip_memory2_0+0xf80094c0>
    b184:	1823883a 	mov	r17,r3
    b188:	003cad06 	br	a440 <__alt_mem_onchip_memory2_0+0xf80093b0>
    b18c:	0027883a 	mov	r19,zero
    b190:	003fdc06 	br	b104 <__alt_mem_onchip_memory2_0+0xf800a074>
    b194:	d9402217 	ldw	r5,136(sp)
    b198:	8005883a 	mov	r2,r16
    b19c:	b0c00043 	ldbu	r3,1(r22)
    b1a0:	2c000017 	ldw	r16,0(r5)
    b1a4:	29000104 	addi	r4,r5,4
    b1a8:	d9002215 	stw	r4,136(sp)
    b1ac:	102d883a 	mov	r22,r2
    b1b0:	803fa50e 	bge	r16,zero,b048 <__alt_mem_onchip_memory2_0+0xf8009fb8>
    b1b4:	18c03fcc 	andi	r3,r3,255
    b1b8:	18c0201c 	xori	r3,r3,128
    b1bc:	043fffc4 	movi	r16,-1
    b1c0:	18ffe004 	addi	r3,r3,-128
    b1c4:	003b4006 	br	9ec8 <__alt_mem_onchip_memory2_0+0xf8008e38>
    b1c8:	d9402303 	ldbu	r5,140(sp)
    b1cc:	d9401d85 	stb	r5,118(sp)
    b1d0:	003cae06 	br	a48c <__alt_mem_onchip_memory2_0+0xf80093fc>
    b1d4:	d8c02303 	ldbu	r3,140(sp)
    b1d8:	d8c01d85 	stb	r3,118(sp)
    b1dc:	003d1406 	br	a630 <__alt_mem_onchip_memory2_0+0xf80095a0>
    b1e0:	d8c02303 	ldbu	r3,140(sp)
    b1e4:	d8c01d85 	stb	r3,118(sp)
    b1e8:	003cca06 	br	a514 <__alt_mem_onchip_memory2_0+0xf8009484>
    b1ec:	8880004c 	andi	r2,r17,1
    b1f0:	002b883a 	mov	r21,zero
    b1f4:	10000526 	beq	r2,zero,b20c <___vfiprintf_internal_r+0x14b8>
    b1f8:	00800c04 	movi	r2,48
    b1fc:	d88019c5 	stb	r2,103(sp)
    b200:	dd002817 	ldw	r20,160(sp)
    b204:	ddc019c4 	addi	r23,sp,103
    b208:	003bd506 	br	a160 <__alt_mem_onchip_memory2_0+0xf80090d0>
    b20c:	0029883a 	mov	r20,zero
    b210:	ddc01a04 	addi	r23,sp,104
    b214:	003bd206 	br	a160 <__alt_mem_onchip_memory2_0+0xf80090d0>
    b218:	d9002303 	ldbu	r4,140(sp)
    b21c:	d9001d85 	stb	r4,118(sp)
    b220:	003da606 	br	a8bc <__alt_mem_onchip_memory2_0+0xf800982c>
    b224:	d8c02303 	ldbu	r3,140(sp)
    b228:	d8c01d85 	stb	r3,118(sp)
    b22c:	003c7606 	br	a408 <__alt_mem_onchip_memory2_0+0xf8009378>
    b230:	d8c02303 	ldbu	r3,140(sp)
    b234:	d8c01d85 	stb	r3,118(sp)
    b238:	003c6506 	br	a3d0 <__alt_mem_onchip_memory2_0+0xf8009340>
    b23c:	d9002303 	ldbu	r4,140(sp)
    b240:	d9001d85 	stb	r4,118(sp)
    b244:	003d3d06 	br	a73c <__alt_mem_onchip_memory2_0+0xf80096ac>
    b248:	d8c02303 	ldbu	r3,140(sp)
    b24c:	d8c01d85 	stb	r3,118(sp)
    b250:	003d1d06 	br	a6c8 <__alt_mem_onchip_memory2_0+0xf8009638>
    b254:	d8c02303 	ldbu	r3,140(sp)
    b258:	d8c01d85 	stb	r3,118(sp)
    b25c:	003d0306 	br	a66c <__alt_mem_onchip_memory2_0+0xf80095dc>

0000b260 <__vfiprintf_internal>:
    b260:	00800074 	movhi	r2,1
    b264:	10900d04 	addi	r2,r2,16436
    b268:	300f883a 	mov	r7,r6
    b26c:	280d883a 	mov	r6,r5
    b270:	200b883a 	mov	r5,r4
    b274:	11000017 	ldw	r4,0(r2)
    b278:	0009d541 	jmpi	9d54 <___vfiprintf_internal_r>

0000b27c <__sbprintf>:
    b27c:	2880030b 	ldhu	r2,12(r5)
    b280:	2ac01917 	ldw	r11,100(r5)
    b284:	2a80038b 	ldhu	r10,14(r5)
    b288:	2a400717 	ldw	r9,28(r5)
    b28c:	2a000917 	ldw	r8,36(r5)
    b290:	defee204 	addi	sp,sp,-1144
    b294:	00c10004 	movi	r3,1024
    b298:	dc011a15 	stw	r16,1128(sp)
    b29c:	10bfff4c 	andi	r2,r2,65533
    b2a0:	2821883a 	mov	r16,r5
    b2a4:	d8cb883a 	add	r5,sp,r3
    b2a8:	dc811c15 	stw	r18,1136(sp)
    b2ac:	dc411b15 	stw	r17,1132(sp)
    b2b0:	dfc11d15 	stw	ra,1140(sp)
    b2b4:	2025883a 	mov	r18,r4
    b2b8:	d881030d 	sth	r2,1036(sp)
    b2bc:	dac11915 	stw	r11,1124(sp)
    b2c0:	da81038d 	sth	r10,1038(sp)
    b2c4:	da410715 	stw	r9,1052(sp)
    b2c8:	da010915 	stw	r8,1060(sp)
    b2cc:	dec10015 	stw	sp,1024(sp)
    b2d0:	dec10415 	stw	sp,1040(sp)
    b2d4:	d8c10215 	stw	r3,1032(sp)
    b2d8:	d8c10515 	stw	r3,1044(sp)
    b2dc:	d8010615 	stw	zero,1048(sp)
    b2e0:	0009d540 	call	9d54 <___vfiprintf_internal_r>
    b2e4:	1023883a 	mov	r17,r2
    b2e8:	10000416 	blt	r2,zero,b2fc <__sbprintf+0x80>
    b2ec:	d9410004 	addi	r5,sp,1024
    b2f0:	9009883a 	mov	r4,r18
    b2f4:	00065300 	call	6530 <_fflush_r>
    b2f8:	10000d1e 	bne	r2,zero,b330 <__sbprintf+0xb4>
    b2fc:	d881030b 	ldhu	r2,1036(sp)
    b300:	1080100c 	andi	r2,r2,64
    b304:	10000326 	beq	r2,zero,b314 <__sbprintf+0x98>
    b308:	8080030b 	ldhu	r2,12(r16)
    b30c:	10801014 	ori	r2,r2,64
    b310:	8080030d 	sth	r2,12(r16)
    b314:	8805883a 	mov	r2,r17
    b318:	dfc11d17 	ldw	ra,1140(sp)
    b31c:	dc811c17 	ldw	r18,1136(sp)
    b320:	dc411b17 	ldw	r17,1132(sp)
    b324:	dc011a17 	ldw	r16,1128(sp)
    b328:	dec11e04 	addi	sp,sp,1144
    b32c:	f800283a 	ret
    b330:	047fffc4 	movi	r17,-1
    b334:	003ff106 	br	b2fc <__alt_mem_onchip_memory2_0+0xf800a26c>

0000b338 <_write_r>:
    b338:	defffd04 	addi	sp,sp,-12
    b33c:	2805883a 	mov	r2,r5
    b340:	dc000015 	stw	r16,0(sp)
    b344:	04000074 	movhi	r16,1
    b348:	dc400115 	stw	r17,4(sp)
    b34c:	300b883a 	mov	r5,r6
    b350:	8416de04 	addi	r16,r16,23416
    b354:	2023883a 	mov	r17,r4
    b358:	380d883a 	mov	r6,r7
    b35c:	1009883a 	mov	r4,r2
    b360:	dfc00215 	stw	ra,8(sp)
    b364:	80000015 	stw	zero,0(r16)
    b368:	000fb880 	call	fb88 <write>
    b36c:	00ffffc4 	movi	r3,-1
    b370:	10c00526 	beq	r2,r3,b388 <_write_r+0x50>
    b374:	dfc00217 	ldw	ra,8(sp)
    b378:	dc400117 	ldw	r17,4(sp)
    b37c:	dc000017 	ldw	r16,0(sp)
    b380:	dec00304 	addi	sp,sp,12
    b384:	f800283a 	ret
    b388:	80c00017 	ldw	r3,0(r16)
    b38c:	183ff926 	beq	r3,zero,b374 <__alt_mem_onchip_memory2_0+0xf800a2e4>
    b390:	88c00015 	stw	r3,0(r17)
    b394:	003ff706 	br	b374 <__alt_mem_onchip_memory2_0+0xf800a2e4>

0000b398 <_close_r>:
    b398:	defffd04 	addi	sp,sp,-12
    b39c:	dc000015 	stw	r16,0(sp)
    b3a0:	04000074 	movhi	r16,1
    b3a4:	dc400115 	stw	r17,4(sp)
    b3a8:	8416de04 	addi	r16,r16,23416
    b3ac:	2023883a 	mov	r17,r4
    b3b0:	2809883a 	mov	r4,r5
    b3b4:	dfc00215 	stw	ra,8(sp)
    b3b8:	80000015 	stw	zero,0(r16)
    b3bc:	000f3000 	call	f300 <close>
    b3c0:	00ffffc4 	movi	r3,-1
    b3c4:	10c00526 	beq	r2,r3,b3dc <_close_r+0x44>
    b3c8:	dfc00217 	ldw	ra,8(sp)
    b3cc:	dc400117 	ldw	r17,4(sp)
    b3d0:	dc000017 	ldw	r16,0(sp)
    b3d4:	dec00304 	addi	sp,sp,12
    b3d8:	f800283a 	ret
    b3dc:	80c00017 	ldw	r3,0(r16)
    b3e0:	183ff926 	beq	r3,zero,b3c8 <__alt_mem_onchip_memory2_0+0xf800a338>
    b3e4:	88c00015 	stw	r3,0(r17)
    b3e8:	003ff706 	br	b3c8 <__alt_mem_onchip_memory2_0+0xf800a338>

0000b3ec <_calloc_r>:
    b3ec:	defffe04 	addi	sp,sp,-8
    b3f0:	2805883a 	mov	r2,r5
    b3f4:	dc000015 	stw	r16,0(sp)
    b3f8:	300b883a 	mov	r5,r6
    b3fc:	2021883a 	mov	r16,r4
    b400:	1009883a 	mov	r4,r2
    b404:	dfc00115 	stw	ra,4(sp)
    b408:	000c9f80 	call	c9f8 <__mulsi3>
    b40c:	100b883a 	mov	r5,r2
    b410:	8009883a 	mov	r4,r16
    b414:	00076880 	call	7688 <_malloc_r>
    b418:	10002926 	beq	r2,zero,b4c0 <_calloc_r+0xd4>
    b41c:	11bfff17 	ldw	r6,-4(r2)
    b420:	1021883a 	mov	r16,r2
    b424:	00bfff04 	movi	r2,-4
    b428:	308c703a 	and	r6,r6,r2
    b42c:	00c00904 	movi	r3,36
    b430:	308d883a 	add	r6,r6,r2
    b434:	19801636 	bltu	r3,r6,b490 <_calloc_r+0xa4>
    b438:	008004c4 	movi	r2,19
    b43c:	11800b2e 	bgeu	r2,r6,b46c <_calloc_r+0x80>
    b440:	80000015 	stw	zero,0(r16)
    b444:	80000115 	stw	zero,4(r16)
    b448:	008006c4 	movi	r2,27
    b44c:	11801a2e 	bgeu	r2,r6,b4b8 <_calloc_r+0xcc>
    b450:	80000215 	stw	zero,8(r16)
    b454:	80000315 	stw	zero,12(r16)
    b458:	30c0151e 	bne	r6,r3,b4b0 <_calloc_r+0xc4>
    b45c:	80000415 	stw	zero,16(r16)
    b460:	80800604 	addi	r2,r16,24
    b464:	80000515 	stw	zero,20(r16)
    b468:	00000106 	br	b470 <_calloc_r+0x84>
    b46c:	8005883a 	mov	r2,r16
    b470:	10000015 	stw	zero,0(r2)
    b474:	10000115 	stw	zero,4(r2)
    b478:	10000215 	stw	zero,8(r2)
    b47c:	8005883a 	mov	r2,r16
    b480:	dfc00117 	ldw	ra,4(sp)
    b484:	dc000017 	ldw	r16,0(sp)
    b488:	dec00204 	addi	sp,sp,8
    b48c:	f800283a 	ret
    b490:	000b883a 	mov	r5,zero
    b494:	8009883a 	mov	r4,r16
    b498:	000821c0 	call	821c <memset>
    b49c:	8005883a 	mov	r2,r16
    b4a0:	dfc00117 	ldw	ra,4(sp)
    b4a4:	dc000017 	ldw	r16,0(sp)
    b4a8:	dec00204 	addi	sp,sp,8
    b4ac:	f800283a 	ret
    b4b0:	80800404 	addi	r2,r16,16
    b4b4:	003fee06 	br	b470 <__alt_mem_onchip_memory2_0+0xf800a3e0>
    b4b8:	80800204 	addi	r2,r16,8
    b4bc:	003fec06 	br	b470 <__alt_mem_onchip_memory2_0+0xf800a3e0>
    b4c0:	0005883a 	mov	r2,zero
    b4c4:	003fee06 	br	b480 <__alt_mem_onchip_memory2_0+0xf800a3f0>

0000b4c8 <_fclose_r>:
    b4c8:	28003926 	beq	r5,zero,b5b0 <_fclose_r+0xe8>
    b4cc:	defffc04 	addi	sp,sp,-16
    b4d0:	dc400115 	stw	r17,4(sp)
    b4d4:	dc000015 	stw	r16,0(sp)
    b4d8:	dfc00315 	stw	ra,12(sp)
    b4dc:	dc800215 	stw	r18,8(sp)
    b4e0:	2023883a 	mov	r17,r4
    b4e4:	2821883a 	mov	r16,r5
    b4e8:	20000226 	beq	r4,zero,b4f4 <_fclose_r+0x2c>
    b4ec:	20800e17 	ldw	r2,56(r4)
    b4f0:	10002726 	beq	r2,zero,b590 <_fclose_r+0xc8>
    b4f4:	8080030f 	ldh	r2,12(r16)
    b4f8:	1000071e 	bne	r2,zero,b518 <_fclose_r+0x50>
    b4fc:	0005883a 	mov	r2,zero
    b500:	dfc00317 	ldw	ra,12(sp)
    b504:	dc800217 	ldw	r18,8(sp)
    b508:	dc400117 	ldw	r17,4(sp)
    b50c:	dc000017 	ldw	r16,0(sp)
    b510:	dec00404 	addi	sp,sp,16
    b514:	f800283a 	ret
    b518:	800b883a 	mov	r5,r16
    b51c:	8809883a 	mov	r4,r17
    b520:	00063140 	call	6314 <__sflush_r>
    b524:	1025883a 	mov	r18,r2
    b528:	80800b17 	ldw	r2,44(r16)
    b52c:	10000426 	beq	r2,zero,b540 <_fclose_r+0x78>
    b530:	81400717 	ldw	r5,28(r16)
    b534:	8809883a 	mov	r4,r17
    b538:	103ee83a 	callr	r2
    b53c:	10001616 	blt	r2,zero,b598 <_fclose_r+0xd0>
    b540:	8080030b 	ldhu	r2,12(r16)
    b544:	1080200c 	andi	r2,r2,128
    b548:	1000151e 	bne	r2,zero,b5a0 <_fclose_r+0xd8>
    b54c:	81400c17 	ldw	r5,48(r16)
    b550:	28000526 	beq	r5,zero,b568 <_fclose_r+0xa0>
    b554:	80801004 	addi	r2,r16,64
    b558:	28800226 	beq	r5,r2,b564 <_fclose_r+0x9c>
    b55c:	8809883a 	mov	r4,r17
    b560:	0006a900 	call	6a90 <_free_r>
    b564:	80000c15 	stw	zero,48(r16)
    b568:	81401117 	ldw	r5,68(r16)
    b56c:	28000326 	beq	r5,zero,b57c <_fclose_r+0xb4>
    b570:	8809883a 	mov	r4,r17
    b574:	0006a900 	call	6a90 <_free_r>
    b578:	80001115 	stw	zero,68(r16)
    b57c:	000692c0 	call	692c <__sfp_lock_acquire>
    b580:	8000030d 	sth	zero,12(r16)
    b584:	00069300 	call	6930 <__sfp_lock_release>
    b588:	9005883a 	mov	r2,r18
    b58c:	003fdc06 	br	b500 <__alt_mem_onchip_memory2_0+0xf800a470>
    b590:	000691c0 	call	691c <__sinit>
    b594:	003fd706 	br	b4f4 <__alt_mem_onchip_memory2_0+0xf800a464>
    b598:	04bfffc4 	movi	r18,-1
    b59c:	003fe806 	br	b540 <__alt_mem_onchip_memory2_0+0xf800a4b0>
    b5a0:	81400417 	ldw	r5,16(r16)
    b5a4:	8809883a 	mov	r4,r17
    b5a8:	0006a900 	call	6a90 <_free_r>
    b5ac:	003fe706 	br	b54c <__alt_mem_onchip_memory2_0+0xf800a4bc>
    b5b0:	0005883a 	mov	r2,zero
    b5b4:	f800283a 	ret

0000b5b8 <fclose>:
    b5b8:	00800074 	movhi	r2,1
    b5bc:	10900d04 	addi	r2,r2,16436
    b5c0:	200b883a 	mov	r5,r4
    b5c4:	11000017 	ldw	r4,0(r2)
    b5c8:	000b4c81 	jmpi	b4c8 <_fclose_r>

0000b5cc <__fputwc>:
    b5cc:	defff804 	addi	sp,sp,-32
    b5d0:	dcc00415 	stw	r19,16(sp)
    b5d4:	dc800315 	stw	r18,12(sp)
    b5d8:	dc000115 	stw	r16,4(sp)
    b5dc:	dfc00715 	stw	ra,28(sp)
    b5e0:	dd400615 	stw	r21,24(sp)
    b5e4:	dd000515 	stw	r20,20(sp)
    b5e8:	dc400215 	stw	r17,8(sp)
    b5ec:	2027883a 	mov	r19,r4
    b5f0:	2825883a 	mov	r18,r5
    b5f4:	3021883a 	mov	r16,r6
    b5f8:	00074780 	call	7478 <__locale_mb_cur_max>
    b5fc:	00c00044 	movi	r3,1
    b600:	10c03e26 	beq	r2,r3,b6fc <__fputwc+0x130>
    b604:	81c01704 	addi	r7,r16,92
    b608:	900d883a 	mov	r6,r18
    b60c:	d80b883a 	mov	r5,sp
    b610:	9809883a 	mov	r4,r19
    b614:	000ba9c0 	call	ba9c <_wcrtomb_r>
    b618:	1029883a 	mov	r20,r2
    b61c:	00bfffc4 	movi	r2,-1
    b620:	a0802026 	beq	r20,r2,b6a4 <__fputwc+0xd8>
    b624:	d9400003 	ldbu	r5,0(sp)
    b628:	a0001c26 	beq	r20,zero,b69c <__fputwc+0xd0>
    b62c:	0023883a 	mov	r17,zero
    b630:	05400284 	movi	r21,10
    b634:	00000906 	br	b65c <__fputwc+0x90>
    b638:	80800017 	ldw	r2,0(r16)
    b63c:	11400005 	stb	r5,0(r2)
    b640:	80c00017 	ldw	r3,0(r16)
    b644:	18c00044 	addi	r3,r3,1
    b648:	80c00015 	stw	r3,0(r16)
    b64c:	8c400044 	addi	r17,r17,1
    b650:	dc45883a 	add	r2,sp,r17
    b654:	8d00112e 	bgeu	r17,r20,b69c <__fputwc+0xd0>
    b658:	11400003 	ldbu	r5,0(r2)
    b65c:	80c00217 	ldw	r3,8(r16)
    b660:	18ffffc4 	addi	r3,r3,-1
    b664:	80c00215 	stw	r3,8(r16)
    b668:	183ff30e 	bge	r3,zero,b638 <__alt_mem_onchip_memory2_0+0xf800a5a8>
    b66c:	80800617 	ldw	r2,24(r16)
    b670:	18801916 	blt	r3,r2,b6d8 <__fputwc+0x10c>
    b674:	80800017 	ldw	r2,0(r16)
    b678:	11400005 	stb	r5,0(r2)
    b67c:	80800017 	ldw	r2,0(r16)
    b680:	10c00003 	ldbu	r3,0(r2)
    b684:	10800044 	addi	r2,r2,1
    b688:	1d402326 	beq	r3,r21,b718 <__fputwc+0x14c>
    b68c:	80800015 	stw	r2,0(r16)
    b690:	8c400044 	addi	r17,r17,1
    b694:	dc45883a 	add	r2,sp,r17
    b698:	8d3fef36 	bltu	r17,r20,b658 <__alt_mem_onchip_memory2_0+0xf800a5c8>
    b69c:	9005883a 	mov	r2,r18
    b6a0:	00000406 	br	b6b4 <__fputwc+0xe8>
    b6a4:	80c0030b 	ldhu	r3,12(r16)
    b6a8:	a005883a 	mov	r2,r20
    b6ac:	18c01014 	ori	r3,r3,64
    b6b0:	80c0030d 	sth	r3,12(r16)
    b6b4:	dfc00717 	ldw	ra,28(sp)
    b6b8:	dd400617 	ldw	r21,24(sp)
    b6bc:	dd000517 	ldw	r20,20(sp)
    b6c0:	dcc00417 	ldw	r19,16(sp)
    b6c4:	dc800317 	ldw	r18,12(sp)
    b6c8:	dc400217 	ldw	r17,8(sp)
    b6cc:	dc000117 	ldw	r16,4(sp)
    b6d0:	dec00804 	addi	sp,sp,32
    b6d4:	f800283a 	ret
    b6d8:	800d883a 	mov	r6,r16
    b6dc:	29403fcc 	andi	r5,r5,255
    b6e0:	9809883a 	mov	r4,r19
    b6e4:	000b9440 	call	b944 <__swbuf_r>
    b6e8:	10bfffe0 	cmpeqi	r2,r2,-1
    b6ec:	10803fcc 	andi	r2,r2,255
    b6f0:	103fd626 	beq	r2,zero,b64c <__alt_mem_onchip_memory2_0+0xf800a5bc>
    b6f4:	00bfffc4 	movi	r2,-1
    b6f8:	003fee06 	br	b6b4 <__alt_mem_onchip_memory2_0+0xf800a624>
    b6fc:	90ffffc4 	addi	r3,r18,-1
    b700:	01003f84 	movi	r4,254
    b704:	20ffbf36 	bltu	r4,r3,b604 <__alt_mem_onchip_memory2_0+0xf800a574>
    b708:	900b883a 	mov	r5,r18
    b70c:	dc800005 	stb	r18,0(sp)
    b710:	1029883a 	mov	r20,r2
    b714:	003fc506 	br	b62c <__alt_mem_onchip_memory2_0+0xf800a59c>
    b718:	800d883a 	mov	r6,r16
    b71c:	a80b883a 	mov	r5,r21
    b720:	9809883a 	mov	r4,r19
    b724:	000b9440 	call	b944 <__swbuf_r>
    b728:	10bfffe0 	cmpeqi	r2,r2,-1
    b72c:	003fef06 	br	b6ec <__alt_mem_onchip_memory2_0+0xf800a65c>

0000b730 <_fputwc_r>:
    b730:	3080030b 	ldhu	r2,12(r6)
    b734:	10c8000c 	andi	r3,r2,8192
    b738:	1800051e 	bne	r3,zero,b750 <_fputwc_r+0x20>
    b73c:	30c01917 	ldw	r3,100(r6)
    b740:	10880014 	ori	r2,r2,8192
    b744:	3080030d 	sth	r2,12(r6)
    b748:	18880014 	ori	r2,r3,8192
    b74c:	30801915 	stw	r2,100(r6)
    b750:	000b5cc1 	jmpi	b5cc <__fputwc>

0000b754 <fputwc>:
    b754:	00800074 	movhi	r2,1
    b758:	defffc04 	addi	sp,sp,-16
    b75c:	10900d04 	addi	r2,r2,16436
    b760:	dc000115 	stw	r16,4(sp)
    b764:	14000017 	ldw	r16,0(r2)
    b768:	dc400215 	stw	r17,8(sp)
    b76c:	dfc00315 	stw	ra,12(sp)
    b770:	2023883a 	mov	r17,r4
    b774:	80000226 	beq	r16,zero,b780 <fputwc+0x2c>
    b778:	80800e17 	ldw	r2,56(r16)
    b77c:	10001026 	beq	r2,zero,b7c0 <fputwc+0x6c>
    b780:	2880030b 	ldhu	r2,12(r5)
    b784:	10c8000c 	andi	r3,r2,8192
    b788:	1800051e 	bne	r3,zero,b7a0 <fputwc+0x4c>
    b78c:	28c01917 	ldw	r3,100(r5)
    b790:	10880014 	ori	r2,r2,8192
    b794:	2880030d 	sth	r2,12(r5)
    b798:	18880014 	ori	r2,r3,8192
    b79c:	28801915 	stw	r2,100(r5)
    b7a0:	280d883a 	mov	r6,r5
    b7a4:	8009883a 	mov	r4,r16
    b7a8:	880b883a 	mov	r5,r17
    b7ac:	dfc00317 	ldw	ra,12(sp)
    b7b0:	dc400217 	ldw	r17,8(sp)
    b7b4:	dc000117 	ldw	r16,4(sp)
    b7b8:	dec00404 	addi	sp,sp,16
    b7bc:	000b5cc1 	jmpi	b5cc <__fputwc>
    b7c0:	8009883a 	mov	r4,r16
    b7c4:	d9400015 	stw	r5,0(sp)
    b7c8:	000691c0 	call	691c <__sinit>
    b7cc:	d9400017 	ldw	r5,0(sp)
    b7d0:	003feb06 	br	b780 <__alt_mem_onchip_memory2_0+0xf800a6f0>

0000b7d4 <_fstat_r>:
    b7d4:	defffd04 	addi	sp,sp,-12
    b7d8:	2805883a 	mov	r2,r5
    b7dc:	dc000015 	stw	r16,0(sp)
    b7e0:	04000074 	movhi	r16,1
    b7e4:	dc400115 	stw	r17,4(sp)
    b7e8:	8416de04 	addi	r16,r16,23416
    b7ec:	2023883a 	mov	r17,r4
    b7f0:	300b883a 	mov	r5,r6
    b7f4:	1009883a 	mov	r4,r2
    b7f8:	dfc00215 	stw	ra,8(sp)
    b7fc:	80000015 	stw	zero,0(r16)
    b800:	000f4400 	call	f440 <fstat>
    b804:	00ffffc4 	movi	r3,-1
    b808:	10c00526 	beq	r2,r3,b820 <_fstat_r+0x4c>
    b80c:	dfc00217 	ldw	ra,8(sp)
    b810:	dc400117 	ldw	r17,4(sp)
    b814:	dc000017 	ldw	r16,0(sp)
    b818:	dec00304 	addi	sp,sp,12
    b81c:	f800283a 	ret
    b820:	80c00017 	ldw	r3,0(r16)
    b824:	183ff926 	beq	r3,zero,b80c <__alt_mem_onchip_memory2_0+0xf800a77c>
    b828:	88c00015 	stw	r3,0(r17)
    b82c:	003ff706 	br	b80c <__alt_mem_onchip_memory2_0+0xf800a77c>

0000b830 <_isatty_r>:
    b830:	defffd04 	addi	sp,sp,-12
    b834:	dc000015 	stw	r16,0(sp)
    b838:	04000074 	movhi	r16,1
    b83c:	dc400115 	stw	r17,4(sp)
    b840:	8416de04 	addi	r16,r16,23416
    b844:	2023883a 	mov	r17,r4
    b848:	2809883a 	mov	r4,r5
    b84c:	dfc00215 	stw	ra,8(sp)
    b850:	80000015 	stw	zero,0(r16)
    b854:	000f5340 	call	f534 <isatty>
    b858:	00ffffc4 	movi	r3,-1
    b85c:	10c00526 	beq	r2,r3,b874 <_isatty_r+0x44>
    b860:	dfc00217 	ldw	ra,8(sp)
    b864:	dc400117 	ldw	r17,4(sp)
    b868:	dc000017 	ldw	r16,0(sp)
    b86c:	dec00304 	addi	sp,sp,12
    b870:	f800283a 	ret
    b874:	80c00017 	ldw	r3,0(r16)
    b878:	183ff926 	beq	r3,zero,b860 <__alt_mem_onchip_memory2_0+0xf800a7d0>
    b87c:	88c00015 	stw	r3,0(r17)
    b880:	003ff706 	br	b860 <__alt_mem_onchip_memory2_0+0xf800a7d0>

0000b884 <_lseek_r>:
    b884:	defffd04 	addi	sp,sp,-12
    b888:	2805883a 	mov	r2,r5
    b88c:	dc000015 	stw	r16,0(sp)
    b890:	04000074 	movhi	r16,1
    b894:	dc400115 	stw	r17,4(sp)
    b898:	300b883a 	mov	r5,r6
    b89c:	8416de04 	addi	r16,r16,23416
    b8a0:	2023883a 	mov	r17,r4
    b8a4:	380d883a 	mov	r6,r7
    b8a8:	1009883a 	mov	r4,r2
    b8ac:	dfc00215 	stw	ra,8(sp)
    b8b0:	80000015 	stw	zero,0(r16)
    b8b4:	000f7080 	call	f708 <lseek>
    b8b8:	00ffffc4 	movi	r3,-1
    b8bc:	10c00526 	beq	r2,r3,b8d4 <_lseek_r+0x50>
    b8c0:	dfc00217 	ldw	ra,8(sp)
    b8c4:	dc400117 	ldw	r17,4(sp)
    b8c8:	dc000017 	ldw	r16,0(sp)
    b8cc:	dec00304 	addi	sp,sp,12
    b8d0:	f800283a 	ret
    b8d4:	80c00017 	ldw	r3,0(r16)
    b8d8:	183ff926 	beq	r3,zero,b8c0 <__alt_mem_onchip_memory2_0+0xf800a830>
    b8dc:	88c00015 	stw	r3,0(r17)
    b8e0:	003ff706 	br	b8c0 <__alt_mem_onchip_memory2_0+0xf800a830>

0000b8e4 <_read_r>:
    b8e4:	defffd04 	addi	sp,sp,-12
    b8e8:	2805883a 	mov	r2,r5
    b8ec:	dc000015 	stw	r16,0(sp)
    b8f0:	04000074 	movhi	r16,1
    b8f4:	dc400115 	stw	r17,4(sp)
    b8f8:	300b883a 	mov	r5,r6
    b8fc:	8416de04 	addi	r16,r16,23416
    b900:	2023883a 	mov	r17,r4
    b904:	380d883a 	mov	r6,r7
    b908:	1009883a 	mov	r4,r2
    b90c:	dfc00215 	stw	ra,8(sp)
    b910:	80000015 	stw	zero,0(r16)
    b914:	000f8e40 	call	f8e4 <read>
    b918:	00ffffc4 	movi	r3,-1
    b91c:	10c00526 	beq	r2,r3,b934 <_read_r+0x50>
    b920:	dfc00217 	ldw	ra,8(sp)
    b924:	dc400117 	ldw	r17,4(sp)
    b928:	dc000017 	ldw	r16,0(sp)
    b92c:	dec00304 	addi	sp,sp,12
    b930:	f800283a 	ret
    b934:	80c00017 	ldw	r3,0(r16)
    b938:	183ff926 	beq	r3,zero,b920 <__alt_mem_onchip_memory2_0+0xf800a890>
    b93c:	88c00015 	stw	r3,0(r17)
    b940:	003ff706 	br	b920 <__alt_mem_onchip_memory2_0+0xf800a890>

0000b944 <__swbuf_r>:
    b944:	defffb04 	addi	sp,sp,-20
    b948:	dcc00315 	stw	r19,12(sp)
    b94c:	dc800215 	stw	r18,8(sp)
    b950:	dc000015 	stw	r16,0(sp)
    b954:	dfc00415 	stw	ra,16(sp)
    b958:	dc400115 	stw	r17,4(sp)
    b95c:	2025883a 	mov	r18,r4
    b960:	2827883a 	mov	r19,r5
    b964:	3021883a 	mov	r16,r6
    b968:	20000226 	beq	r4,zero,b974 <__swbuf_r+0x30>
    b96c:	20800e17 	ldw	r2,56(r4)
    b970:	10004226 	beq	r2,zero,ba7c <__swbuf_r+0x138>
    b974:	80800617 	ldw	r2,24(r16)
    b978:	8100030b 	ldhu	r4,12(r16)
    b97c:	80800215 	stw	r2,8(r16)
    b980:	2080020c 	andi	r2,r4,8
    b984:	10003626 	beq	r2,zero,ba60 <__swbuf_r+0x11c>
    b988:	80c00417 	ldw	r3,16(r16)
    b98c:	18003426 	beq	r3,zero,ba60 <__swbuf_r+0x11c>
    b990:	2088000c 	andi	r2,r4,8192
    b994:	9c403fcc 	andi	r17,r19,255
    b998:	10001a26 	beq	r2,zero,ba04 <__swbuf_r+0xc0>
    b99c:	80800017 	ldw	r2,0(r16)
    b9a0:	81000517 	ldw	r4,20(r16)
    b9a4:	10c7c83a 	sub	r3,r2,r3
    b9a8:	1900200e 	bge	r3,r4,ba2c <__swbuf_r+0xe8>
    b9ac:	18c00044 	addi	r3,r3,1
    b9b0:	81000217 	ldw	r4,8(r16)
    b9b4:	11400044 	addi	r5,r2,1
    b9b8:	81400015 	stw	r5,0(r16)
    b9bc:	213fffc4 	addi	r4,r4,-1
    b9c0:	81000215 	stw	r4,8(r16)
    b9c4:	14c00005 	stb	r19,0(r2)
    b9c8:	80800517 	ldw	r2,20(r16)
    b9cc:	10c01e26 	beq	r2,r3,ba48 <__swbuf_r+0x104>
    b9d0:	8080030b 	ldhu	r2,12(r16)
    b9d4:	1080004c 	andi	r2,r2,1
    b9d8:	10000226 	beq	r2,zero,b9e4 <__swbuf_r+0xa0>
    b9dc:	00800284 	movi	r2,10
    b9e0:	88801926 	beq	r17,r2,ba48 <__swbuf_r+0x104>
    b9e4:	8805883a 	mov	r2,r17
    b9e8:	dfc00417 	ldw	ra,16(sp)
    b9ec:	dcc00317 	ldw	r19,12(sp)
    b9f0:	dc800217 	ldw	r18,8(sp)
    b9f4:	dc400117 	ldw	r17,4(sp)
    b9f8:	dc000017 	ldw	r16,0(sp)
    b9fc:	dec00504 	addi	sp,sp,20
    ba00:	f800283a 	ret
    ba04:	81401917 	ldw	r5,100(r16)
    ba08:	00b7ffc4 	movi	r2,-8193
    ba0c:	21080014 	ori	r4,r4,8192
    ba10:	2884703a 	and	r2,r5,r2
    ba14:	80801915 	stw	r2,100(r16)
    ba18:	80800017 	ldw	r2,0(r16)
    ba1c:	8100030d 	sth	r4,12(r16)
    ba20:	81000517 	ldw	r4,20(r16)
    ba24:	10c7c83a 	sub	r3,r2,r3
    ba28:	193fe016 	blt	r3,r4,b9ac <__alt_mem_onchip_memory2_0+0xf800a91c>
    ba2c:	800b883a 	mov	r5,r16
    ba30:	9009883a 	mov	r4,r18
    ba34:	00065300 	call	6530 <_fflush_r>
    ba38:	1000071e 	bne	r2,zero,ba58 <__swbuf_r+0x114>
    ba3c:	80800017 	ldw	r2,0(r16)
    ba40:	00c00044 	movi	r3,1
    ba44:	003fda06 	br	b9b0 <__alt_mem_onchip_memory2_0+0xf800a920>
    ba48:	800b883a 	mov	r5,r16
    ba4c:	9009883a 	mov	r4,r18
    ba50:	00065300 	call	6530 <_fflush_r>
    ba54:	103fe326 	beq	r2,zero,b9e4 <__alt_mem_onchip_memory2_0+0xf800a954>
    ba58:	00bfffc4 	movi	r2,-1
    ba5c:	003fe206 	br	b9e8 <__alt_mem_onchip_memory2_0+0xf800a958>
    ba60:	800b883a 	mov	r5,r16
    ba64:	9009883a 	mov	r4,r18
    ba68:	00049100 	call	4910 <__swsetup_r>
    ba6c:	103ffa1e 	bne	r2,zero,ba58 <__alt_mem_onchip_memory2_0+0xf800a9c8>
    ba70:	8100030b 	ldhu	r4,12(r16)
    ba74:	80c00417 	ldw	r3,16(r16)
    ba78:	003fc506 	br	b990 <__alt_mem_onchip_memory2_0+0xf800a900>
    ba7c:	000691c0 	call	691c <__sinit>
    ba80:	003fbc06 	br	b974 <__alt_mem_onchip_memory2_0+0xf800a8e4>

0000ba84 <__swbuf>:
    ba84:	00800074 	movhi	r2,1
    ba88:	10900d04 	addi	r2,r2,16436
    ba8c:	280d883a 	mov	r6,r5
    ba90:	200b883a 	mov	r5,r4
    ba94:	11000017 	ldw	r4,0(r2)
    ba98:	000b9441 	jmpi	b944 <__swbuf_r>

0000ba9c <_wcrtomb_r>:
    ba9c:	defff604 	addi	sp,sp,-40
    baa0:	00800074 	movhi	r2,1
    baa4:	dc800815 	stw	r18,32(sp)
    baa8:	dc400715 	stw	r17,28(sp)
    baac:	dc000615 	stw	r16,24(sp)
    bab0:	10901104 	addi	r2,r2,16452
    bab4:	dfc00915 	stw	ra,36(sp)
    bab8:	2021883a 	mov	r16,r4
    babc:	3823883a 	mov	r17,r7
    bac0:	14800017 	ldw	r18,0(r2)
    bac4:	28001426 	beq	r5,zero,bb18 <_wcrtomb_r+0x7c>
    bac8:	d9400415 	stw	r5,16(sp)
    bacc:	d9800515 	stw	r6,20(sp)
    bad0:	000746c0 	call	746c <__locale_charset>
    bad4:	d9800517 	ldw	r6,20(sp)
    bad8:	d9400417 	ldw	r5,16(sp)
    badc:	100f883a 	mov	r7,r2
    bae0:	dc400015 	stw	r17,0(sp)
    bae4:	8009883a 	mov	r4,r16
    bae8:	903ee83a 	callr	r18
    baec:	00ffffc4 	movi	r3,-1
    baf0:	10c0031e 	bne	r2,r3,bb00 <_wcrtomb_r+0x64>
    baf4:	88000015 	stw	zero,0(r17)
    baf8:	00c02284 	movi	r3,138
    bafc:	80c00015 	stw	r3,0(r16)
    bb00:	dfc00917 	ldw	ra,36(sp)
    bb04:	dc800817 	ldw	r18,32(sp)
    bb08:	dc400717 	ldw	r17,28(sp)
    bb0c:	dc000617 	ldw	r16,24(sp)
    bb10:	dec00a04 	addi	sp,sp,40
    bb14:	f800283a 	ret
    bb18:	000746c0 	call	746c <__locale_charset>
    bb1c:	100f883a 	mov	r7,r2
    bb20:	dc400015 	stw	r17,0(sp)
    bb24:	000d883a 	mov	r6,zero
    bb28:	d9400104 	addi	r5,sp,4
    bb2c:	8009883a 	mov	r4,r16
    bb30:	903ee83a 	callr	r18
    bb34:	003fed06 	br	baec <__alt_mem_onchip_memory2_0+0xf800aa5c>

0000bb38 <wcrtomb>:
    bb38:	defff604 	addi	sp,sp,-40
    bb3c:	00800074 	movhi	r2,1
    bb40:	dc800615 	stw	r18,24(sp)
    bb44:	dc400515 	stw	r17,20(sp)
    bb48:	10900d04 	addi	r2,r2,16436
    bb4c:	dfc00915 	stw	ra,36(sp)
    bb50:	dd000815 	stw	r20,32(sp)
    bb54:	dcc00715 	stw	r19,28(sp)
    bb58:	dc000415 	stw	r16,16(sp)
    bb5c:	3025883a 	mov	r18,r6
    bb60:	14400017 	ldw	r17,0(r2)
    bb64:	20001926 	beq	r4,zero,bbcc <wcrtomb+0x94>
    bb68:	00800074 	movhi	r2,1
    bb6c:	10901104 	addi	r2,r2,16452
    bb70:	15000017 	ldw	r20,0(r2)
    bb74:	2021883a 	mov	r16,r4
    bb78:	2827883a 	mov	r19,r5
    bb7c:	000746c0 	call	746c <__locale_charset>
    bb80:	100f883a 	mov	r7,r2
    bb84:	dc800015 	stw	r18,0(sp)
    bb88:	980d883a 	mov	r6,r19
    bb8c:	800b883a 	mov	r5,r16
    bb90:	8809883a 	mov	r4,r17
    bb94:	a03ee83a 	callr	r20
    bb98:	00ffffc4 	movi	r3,-1
    bb9c:	10c0031e 	bne	r2,r3,bbac <wcrtomb+0x74>
    bba0:	90000015 	stw	zero,0(r18)
    bba4:	00c02284 	movi	r3,138
    bba8:	88c00015 	stw	r3,0(r17)
    bbac:	dfc00917 	ldw	ra,36(sp)
    bbb0:	dd000817 	ldw	r20,32(sp)
    bbb4:	dcc00717 	ldw	r19,28(sp)
    bbb8:	dc800617 	ldw	r18,24(sp)
    bbbc:	dc400517 	ldw	r17,20(sp)
    bbc0:	dc000417 	ldw	r16,16(sp)
    bbc4:	dec00a04 	addi	sp,sp,40
    bbc8:	f800283a 	ret
    bbcc:	00800074 	movhi	r2,1
    bbd0:	10901104 	addi	r2,r2,16452
    bbd4:	14000017 	ldw	r16,0(r2)
    bbd8:	000746c0 	call	746c <__locale_charset>
    bbdc:	100f883a 	mov	r7,r2
    bbe0:	dc800015 	stw	r18,0(sp)
    bbe4:	000d883a 	mov	r6,zero
    bbe8:	d9400104 	addi	r5,sp,4
    bbec:	8809883a 	mov	r4,r17
    bbf0:	803ee83a 	callr	r16
    bbf4:	003fe806 	br	bb98 <__alt_mem_onchip_memory2_0+0xf800ab08>

0000bbf8 <__ascii_wctomb>:
    bbf8:	28000526 	beq	r5,zero,bc10 <__ascii_wctomb+0x18>
    bbfc:	00803fc4 	movi	r2,255
    bc00:	11800536 	bltu	r2,r6,bc18 <__ascii_wctomb+0x20>
    bc04:	29800005 	stb	r6,0(r5)
    bc08:	00800044 	movi	r2,1
    bc0c:	f800283a 	ret
    bc10:	0005883a 	mov	r2,zero
    bc14:	f800283a 	ret
    bc18:	00802284 	movi	r2,138
    bc1c:	20800015 	stw	r2,0(r4)
    bc20:	00bfffc4 	movi	r2,-1
    bc24:	f800283a 	ret

0000bc28 <_wctomb_r>:
    bc28:	00800074 	movhi	r2,1
    bc2c:	defff904 	addi	sp,sp,-28
    bc30:	10901104 	addi	r2,r2,16452
    bc34:	dfc00615 	stw	ra,24(sp)
    bc38:	dc400515 	stw	r17,20(sp)
    bc3c:	dc000415 	stw	r16,16(sp)
    bc40:	3823883a 	mov	r17,r7
    bc44:	14000017 	ldw	r16,0(r2)
    bc48:	d9000115 	stw	r4,4(sp)
    bc4c:	d9400215 	stw	r5,8(sp)
    bc50:	d9800315 	stw	r6,12(sp)
    bc54:	000746c0 	call	746c <__locale_charset>
    bc58:	d9800317 	ldw	r6,12(sp)
    bc5c:	d9400217 	ldw	r5,8(sp)
    bc60:	d9000117 	ldw	r4,4(sp)
    bc64:	100f883a 	mov	r7,r2
    bc68:	dc400015 	stw	r17,0(sp)
    bc6c:	803ee83a 	callr	r16
    bc70:	dfc00617 	ldw	ra,24(sp)
    bc74:	dc400517 	ldw	r17,20(sp)
    bc78:	dc000417 	ldw	r16,16(sp)
    bc7c:	dec00704 	addi	sp,sp,28
    bc80:	f800283a 	ret

0000bc84 <__udivdi3>:
    bc84:	defff404 	addi	sp,sp,-48
    bc88:	dcc00515 	stw	r19,20(sp)
    bc8c:	dc000215 	stw	r16,8(sp)
    bc90:	dfc00b15 	stw	ra,44(sp)
    bc94:	df000a15 	stw	fp,40(sp)
    bc98:	ddc00915 	stw	r23,36(sp)
    bc9c:	dd800815 	stw	r22,32(sp)
    bca0:	dd400715 	stw	r21,28(sp)
    bca4:	dd000615 	stw	r20,24(sp)
    bca8:	dc800415 	stw	r18,16(sp)
    bcac:	dc400315 	stw	r17,12(sp)
    bcb0:	2027883a 	mov	r19,r4
    bcb4:	2821883a 	mov	r16,r5
    bcb8:	3800461e 	bne	r7,zero,bdd4 <__udivdi3+0x150>
    bcbc:	3023883a 	mov	r17,r6
    bcc0:	2025883a 	mov	r18,r4
    bcc4:	2980572e 	bgeu	r5,r6,be24 <__udivdi3+0x1a0>
    bcc8:	00bfffd4 	movui	r2,65535
    bccc:	282d883a 	mov	r22,r5
    bcd0:	1180b236 	bltu	r2,r6,bf9c <__udivdi3+0x318>
    bcd4:	00803fc4 	movi	r2,255
    bcd8:	1185803a 	cmpltu	r2,r2,r6
    bcdc:	100490fa 	slli	r2,r2,3
    bce0:	3086d83a 	srl	r3,r6,r2
    bce4:	01000074 	movhi	r4,1
    bce8:	21091404 	addi	r4,r4,9296
    bcec:	20c7883a 	add	r3,r4,r3
    bcf0:	18c00003 	ldbu	r3,0(r3)
    bcf4:	1885883a 	add	r2,r3,r2
    bcf8:	00c00804 	movi	r3,32
    bcfc:	1887c83a 	sub	r3,r3,r2
    bd00:	18000526 	beq	r3,zero,bd18 <__udivdi3+0x94>
    bd04:	80e0983a 	sll	r16,r16,r3
    bd08:	9884d83a 	srl	r2,r19,r2
    bd0c:	30e2983a 	sll	r17,r6,r3
    bd10:	98e4983a 	sll	r18,r19,r3
    bd14:	142cb03a 	or	r22,r2,r16
    bd18:	882ad43a 	srli	r21,r17,16
    bd1c:	b009883a 	mov	r4,r22
    bd20:	8d3fffcc 	andi	r20,r17,65535
    bd24:	a80b883a 	mov	r5,r21
    bd28:	000c9a00 	call	c9a0 <__umodsi3>
    bd2c:	b009883a 	mov	r4,r22
    bd30:	a80b883a 	mov	r5,r21
    bd34:	1027883a 	mov	r19,r2
    bd38:	000c93c0 	call	c93c <__udivsi3>
    bd3c:	100b883a 	mov	r5,r2
    bd40:	a009883a 	mov	r4,r20
    bd44:	102d883a 	mov	r22,r2
    bd48:	000c9f80 	call	c9f8 <__mulsi3>
    bd4c:	9826943a 	slli	r19,r19,16
    bd50:	9006d43a 	srli	r3,r18,16
    bd54:	1cc6b03a 	or	r3,r3,r19
    bd58:	1880052e 	bgeu	r3,r2,bd70 <__udivdi3+0xec>
    bd5c:	1c47883a 	add	r3,r3,r17
    bd60:	b13fffc4 	addi	r4,r22,-1
    bd64:	1c400136 	bltu	r3,r17,bd6c <__udivdi3+0xe8>
    bd68:	18814236 	bltu	r3,r2,c274 <__udivdi3+0x5f0>
    bd6c:	202d883a 	mov	r22,r4
    bd70:	18a1c83a 	sub	r16,r3,r2
    bd74:	8009883a 	mov	r4,r16
    bd78:	a80b883a 	mov	r5,r21
    bd7c:	000c9a00 	call	c9a0 <__umodsi3>
    bd80:	1027883a 	mov	r19,r2
    bd84:	8009883a 	mov	r4,r16
    bd88:	a80b883a 	mov	r5,r21
    bd8c:	9826943a 	slli	r19,r19,16
    bd90:	000c93c0 	call	c93c <__udivsi3>
    bd94:	100b883a 	mov	r5,r2
    bd98:	a009883a 	mov	r4,r20
    bd9c:	94bfffcc 	andi	r18,r18,65535
    bda0:	1021883a 	mov	r16,r2
    bda4:	94e4b03a 	or	r18,r18,r19
    bda8:	000c9f80 	call	c9f8 <__mulsi3>
    bdac:	9080052e 	bgeu	r18,r2,bdc4 <__udivdi3+0x140>
    bdb0:	8ca5883a 	add	r18,r17,r18
    bdb4:	80ffffc4 	addi	r3,r16,-1
    bdb8:	94410c36 	bltu	r18,r17,c1ec <__udivdi3+0x568>
    bdbc:	90810b2e 	bgeu	r18,r2,c1ec <__udivdi3+0x568>
    bdc0:	843fff84 	addi	r16,r16,-2
    bdc4:	b004943a 	slli	r2,r22,16
    bdc8:	0007883a 	mov	r3,zero
    bdcc:	1404b03a 	or	r2,r2,r16
    bdd0:	00005e06 	br	bf4c <__udivdi3+0x2c8>
    bdd4:	29c05b36 	bltu	r5,r7,bf44 <__udivdi3+0x2c0>
    bdd8:	00bfffd4 	movui	r2,65535
    bddc:	11c0672e 	bgeu	r2,r7,bf7c <__udivdi3+0x2f8>
    bde0:	00804034 	movhi	r2,256
    bde4:	10bfffc4 	addi	r2,r2,-1
    bde8:	11c10a36 	bltu	r2,r7,c214 <__udivdi3+0x590>
    bdec:	00800404 	movi	r2,16
    bdf0:	3886d83a 	srl	r3,r7,r2
    bdf4:	01000074 	movhi	r4,1
    bdf8:	21091404 	addi	r4,r4,9296
    bdfc:	20c7883a 	add	r3,r4,r3
    be00:	18c00003 	ldbu	r3,0(r3)
    be04:	05c00804 	movi	r23,32
    be08:	1885883a 	add	r2,r3,r2
    be0c:	b8afc83a 	sub	r23,r23,r2
    be10:	b800671e 	bne	r23,zero,bfb0 <__udivdi3+0x32c>
    be14:	3c010536 	bltu	r7,r16,c22c <__udivdi3+0x5a8>
    be18:	9985403a 	cmpgeu	r2,r19,r6
    be1c:	0007883a 	mov	r3,zero
    be20:	00004a06 	br	bf4c <__udivdi3+0x2c8>
    be24:	3000041e 	bne	r6,zero,be38 <__udivdi3+0x1b4>
    be28:	000b883a 	mov	r5,zero
    be2c:	01000044 	movi	r4,1
    be30:	000c93c0 	call	c93c <__udivsi3>
    be34:	1023883a 	mov	r17,r2
    be38:	00bfffd4 	movui	r2,65535
    be3c:	1440532e 	bgeu	r2,r17,bf8c <__udivdi3+0x308>
    be40:	00804034 	movhi	r2,256
    be44:	10bfffc4 	addi	r2,r2,-1
    be48:	1440f436 	bltu	r2,r17,c21c <__udivdi3+0x598>
    be4c:	00800404 	movi	r2,16
    be50:	8886d83a 	srl	r3,r17,r2
    be54:	01000074 	movhi	r4,1
    be58:	21091404 	addi	r4,r4,9296
    be5c:	20c7883a 	add	r3,r4,r3
    be60:	18c00003 	ldbu	r3,0(r3)
    be64:	1885883a 	add	r2,r3,r2
    be68:	00c00804 	movi	r3,32
    be6c:	1887c83a 	sub	r3,r3,r2
    be70:	1800a51e 	bne	r3,zero,c108 <__udivdi3+0x484>
    be74:	882ad43a 	srli	r21,r17,16
    be78:	8461c83a 	sub	r16,r16,r17
    be7c:	8d3fffcc 	andi	r20,r17,65535
    be80:	00c00044 	movi	r3,1
    be84:	a80b883a 	mov	r5,r21
    be88:	8009883a 	mov	r4,r16
    be8c:	d8c00115 	stw	r3,4(sp)
    be90:	000c9a00 	call	c9a0 <__umodsi3>
    be94:	a80b883a 	mov	r5,r21
    be98:	8009883a 	mov	r4,r16
    be9c:	1027883a 	mov	r19,r2
    bea0:	000c93c0 	call	c93c <__udivsi3>
    bea4:	a00b883a 	mov	r5,r20
    bea8:	1009883a 	mov	r4,r2
    beac:	102d883a 	mov	r22,r2
    beb0:	000c9f80 	call	c9f8 <__mulsi3>
    beb4:	9826943a 	slli	r19,r19,16
    beb8:	900ed43a 	srli	r7,r18,16
    bebc:	d8c00117 	ldw	r3,4(sp)
    bec0:	3cceb03a 	or	r7,r7,r19
    bec4:	3880052e 	bgeu	r7,r2,bedc <__udivdi3+0x258>
    bec8:	3c4f883a 	add	r7,r7,r17
    becc:	b13fffc4 	addi	r4,r22,-1
    bed0:	3c400136 	bltu	r7,r17,bed8 <__udivdi3+0x254>
    bed4:	3880e436 	bltu	r7,r2,c268 <__udivdi3+0x5e4>
    bed8:	202d883a 	mov	r22,r4
    bedc:	38a1c83a 	sub	r16,r7,r2
    bee0:	8009883a 	mov	r4,r16
    bee4:	a80b883a 	mov	r5,r21
    bee8:	d8c00115 	stw	r3,4(sp)
    beec:	000c9a00 	call	c9a0 <__umodsi3>
    bef0:	1027883a 	mov	r19,r2
    bef4:	8009883a 	mov	r4,r16
    bef8:	a80b883a 	mov	r5,r21
    befc:	9826943a 	slli	r19,r19,16
    bf00:	000c93c0 	call	c93c <__udivsi3>
    bf04:	a00b883a 	mov	r5,r20
    bf08:	1009883a 	mov	r4,r2
    bf0c:	94bfffcc 	andi	r18,r18,65535
    bf10:	1021883a 	mov	r16,r2
    bf14:	94e4b03a 	or	r18,r18,r19
    bf18:	000c9f80 	call	c9f8 <__mulsi3>
    bf1c:	d8c00117 	ldw	r3,4(sp)
    bf20:	9080052e 	bgeu	r18,r2,bf38 <__udivdi3+0x2b4>
    bf24:	8ca5883a 	add	r18,r17,r18
    bf28:	813fffc4 	addi	r4,r16,-1
    bf2c:	9440ad36 	bltu	r18,r17,c1e4 <__udivdi3+0x560>
    bf30:	9080ac2e 	bgeu	r18,r2,c1e4 <__udivdi3+0x560>
    bf34:	843fff84 	addi	r16,r16,-2
    bf38:	b004943a 	slli	r2,r22,16
    bf3c:	1404b03a 	or	r2,r2,r16
    bf40:	00000206 	br	bf4c <__udivdi3+0x2c8>
    bf44:	0007883a 	mov	r3,zero
    bf48:	0005883a 	mov	r2,zero
    bf4c:	dfc00b17 	ldw	ra,44(sp)
    bf50:	df000a17 	ldw	fp,40(sp)
    bf54:	ddc00917 	ldw	r23,36(sp)
    bf58:	dd800817 	ldw	r22,32(sp)
    bf5c:	dd400717 	ldw	r21,28(sp)
    bf60:	dd000617 	ldw	r20,24(sp)
    bf64:	dcc00517 	ldw	r19,20(sp)
    bf68:	dc800417 	ldw	r18,16(sp)
    bf6c:	dc400317 	ldw	r17,12(sp)
    bf70:	dc000217 	ldw	r16,8(sp)
    bf74:	dec00c04 	addi	sp,sp,48
    bf78:	f800283a 	ret
    bf7c:	00803fc4 	movi	r2,255
    bf80:	11c5803a 	cmpltu	r2,r2,r7
    bf84:	100490fa 	slli	r2,r2,3
    bf88:	003f9906 	br	bdf0 <__alt_mem_onchip_memory2_0+0xf800ad60>
    bf8c:	00803fc4 	movi	r2,255
    bf90:	1445803a 	cmpltu	r2,r2,r17
    bf94:	100490fa 	slli	r2,r2,3
    bf98:	003fad06 	br	be50 <__alt_mem_onchip_memory2_0+0xf800adc0>
    bf9c:	00804034 	movhi	r2,256
    bfa0:	10bfffc4 	addi	r2,r2,-1
    bfa4:	11809f36 	bltu	r2,r6,c224 <__udivdi3+0x5a0>
    bfa8:	00800404 	movi	r2,16
    bfac:	003f4c06 	br	bce0 <__alt_mem_onchip_memory2_0+0xf800ac50>
    bfb0:	3dce983a 	sll	r7,r7,r23
    bfb4:	30b8d83a 	srl	fp,r6,r2
    bfb8:	80a2d83a 	srl	r17,r16,r2
    bfbc:	35cc983a 	sll	r6,r6,r23
    bfc0:	3f38b03a 	or	fp,r7,fp
    bfc4:	e024d43a 	srli	r18,fp,16
    bfc8:	9884d83a 	srl	r2,r19,r2
    bfcc:	85e0983a 	sll	r16,r16,r23
    bfd0:	8809883a 	mov	r4,r17
    bfd4:	900b883a 	mov	r5,r18
    bfd8:	d9800015 	stw	r6,0(sp)
    bfdc:	1420b03a 	or	r16,r2,r16
    bfe0:	000c9a00 	call	c9a0 <__umodsi3>
    bfe4:	900b883a 	mov	r5,r18
    bfe8:	8809883a 	mov	r4,r17
    bfec:	1029883a 	mov	r20,r2
    bff0:	e5bfffcc 	andi	r22,fp,65535
    bff4:	000c93c0 	call	c93c <__udivsi3>
    bff8:	100b883a 	mov	r5,r2
    bffc:	b009883a 	mov	r4,r22
    c000:	102b883a 	mov	r21,r2
    c004:	000c9f80 	call	c9f8 <__mulsi3>
    c008:	a028943a 	slli	r20,r20,16
    c00c:	8006d43a 	srli	r3,r16,16
    c010:	1d06b03a 	or	r3,r3,r20
    c014:	1880042e 	bgeu	r3,r2,c028 <__udivdi3+0x3a4>
    c018:	1f07883a 	add	r3,r3,fp
    c01c:	a93fffc4 	addi	r4,r21,-1
    c020:	1f00892e 	bgeu	r3,fp,c248 <__udivdi3+0x5c4>
    c024:	202b883a 	mov	r21,r4
    c028:	18a3c83a 	sub	r17,r3,r2
    c02c:	8809883a 	mov	r4,r17
    c030:	900b883a 	mov	r5,r18
    c034:	000c9a00 	call	c9a0 <__umodsi3>
    c038:	1029883a 	mov	r20,r2
    c03c:	8809883a 	mov	r4,r17
    c040:	900b883a 	mov	r5,r18
    c044:	a028943a 	slli	r20,r20,16
    c048:	000c93c0 	call	c93c <__udivsi3>
    c04c:	100b883a 	mov	r5,r2
    c050:	b009883a 	mov	r4,r22
    c054:	843fffcc 	andi	r16,r16,65535
    c058:	1023883a 	mov	r17,r2
    c05c:	8520b03a 	or	r16,r16,r20
    c060:	000c9f80 	call	c9f8 <__mulsi3>
    c064:	8080042e 	bgeu	r16,r2,c078 <__udivdi3+0x3f4>
    c068:	8721883a 	add	r16,r16,fp
    c06c:	88ffffc4 	addi	r3,r17,-1
    c070:	8700712e 	bgeu	r16,fp,c238 <__udivdi3+0x5b4>
    c074:	1823883a 	mov	r17,r3
    c078:	a80e943a 	slli	r7,r21,16
    c07c:	d8c00017 	ldw	r3,0(sp)
    c080:	80a1c83a 	sub	r16,r16,r2
    c084:	3c64b03a 	or	r18,r7,r17
    c088:	1d3fffcc 	andi	r20,r3,65535
    c08c:	9022d43a 	srli	r17,r18,16
    c090:	95bfffcc 	andi	r22,r18,65535
    c094:	a00b883a 	mov	r5,r20
    c098:	b009883a 	mov	r4,r22
    c09c:	182ad43a 	srli	r21,r3,16
    c0a0:	000c9f80 	call	c9f8 <__mulsi3>
    c0a4:	a00b883a 	mov	r5,r20
    c0a8:	8809883a 	mov	r4,r17
    c0ac:	1039883a 	mov	fp,r2
    c0b0:	000c9f80 	call	c9f8 <__mulsi3>
    c0b4:	8809883a 	mov	r4,r17
    c0b8:	a80b883a 	mov	r5,r21
    c0bc:	1029883a 	mov	r20,r2
    c0c0:	000c9f80 	call	c9f8 <__mulsi3>
    c0c4:	a80b883a 	mov	r5,r21
    c0c8:	b009883a 	mov	r4,r22
    c0cc:	1023883a 	mov	r17,r2
    c0d0:	000c9f80 	call	c9f8 <__mulsi3>
    c0d4:	e006d43a 	srli	r3,fp,16
    c0d8:	1505883a 	add	r2,r2,r20
    c0dc:	1887883a 	add	r3,r3,r2
    c0e0:	1d00022e 	bgeu	r3,r20,c0ec <__udivdi3+0x468>
    c0e4:	00800074 	movhi	r2,1
    c0e8:	88a3883a 	add	r17,r17,r2
    c0ec:	1804d43a 	srli	r2,r3,16
    c0f0:	1463883a 	add	r17,r2,r17
    c0f4:	84404436 	bltu	r16,r17,c208 <__udivdi3+0x584>
    c0f8:	84403e26 	beq	r16,r17,c1f4 <__udivdi3+0x570>
    c0fc:	9005883a 	mov	r2,r18
    c100:	0007883a 	mov	r3,zero
    c104:	003f9106 	br	bf4c <__alt_mem_onchip_memory2_0+0xf800aebc>
    c108:	88e2983a 	sll	r17,r17,r3
    c10c:	80aed83a 	srl	r23,r16,r2
    c110:	80e0983a 	sll	r16,r16,r3
    c114:	882ad43a 	srli	r21,r17,16
    c118:	9884d83a 	srl	r2,r19,r2
    c11c:	b809883a 	mov	r4,r23
    c120:	a80b883a 	mov	r5,r21
    c124:	98e4983a 	sll	r18,r19,r3
    c128:	142cb03a 	or	r22,r2,r16
    c12c:	000c9a00 	call	c9a0 <__umodsi3>
    c130:	b809883a 	mov	r4,r23
    c134:	a80b883a 	mov	r5,r21
    c138:	1027883a 	mov	r19,r2
    c13c:	8d3fffcc 	andi	r20,r17,65535
    c140:	000c93c0 	call	c93c <__udivsi3>
    c144:	a009883a 	mov	r4,r20
    c148:	100b883a 	mov	r5,r2
    c14c:	102f883a 	mov	r23,r2
    c150:	000c9f80 	call	c9f8 <__mulsi3>
    c154:	9826943a 	slli	r19,r19,16
    c158:	b008d43a 	srli	r4,r22,16
    c15c:	24c8b03a 	or	r4,r4,r19
    c160:	2080062e 	bgeu	r4,r2,c17c <__udivdi3+0x4f8>
    c164:	2449883a 	add	r4,r4,r17
    c168:	b8ffffc4 	addi	r3,r23,-1
    c16c:	24403c36 	bltu	r4,r17,c260 <__udivdi3+0x5dc>
    c170:	20803b2e 	bgeu	r4,r2,c260 <__udivdi3+0x5dc>
    c174:	bdffff84 	addi	r23,r23,-2
    c178:	2449883a 	add	r4,r4,r17
    c17c:	20a1c83a 	sub	r16,r4,r2
    c180:	a80b883a 	mov	r5,r21
    c184:	8009883a 	mov	r4,r16
    c188:	000c9a00 	call	c9a0 <__umodsi3>
    c18c:	a80b883a 	mov	r5,r21
    c190:	8009883a 	mov	r4,r16
    c194:	1027883a 	mov	r19,r2
    c198:	000c93c0 	call	c93c <__udivsi3>
    c19c:	a009883a 	mov	r4,r20
    c1a0:	100b883a 	mov	r5,r2
    c1a4:	9826943a 	slli	r19,r19,16
    c1a8:	1039883a 	mov	fp,r2
    c1ac:	000c9f80 	call	c9f8 <__mulsi3>
    c1b0:	b13fffcc 	andi	r4,r22,65535
    c1b4:	24c8b03a 	or	r4,r4,r19
    c1b8:	2080062e 	bgeu	r4,r2,c1d4 <__udivdi3+0x550>
    c1bc:	2449883a 	add	r4,r4,r17
    c1c0:	e0ffffc4 	addi	r3,fp,-1
    c1c4:	24402436 	bltu	r4,r17,c258 <__udivdi3+0x5d4>
    c1c8:	2080232e 	bgeu	r4,r2,c258 <__udivdi3+0x5d4>
    c1cc:	e73fff84 	addi	fp,fp,-2
    c1d0:	2449883a 	add	r4,r4,r17
    c1d4:	b82e943a 	slli	r23,r23,16
    c1d8:	20a1c83a 	sub	r16,r4,r2
    c1dc:	bf06b03a 	or	r3,r23,fp
    c1e0:	003f2806 	br	be84 <__alt_mem_onchip_memory2_0+0xf800adf4>
    c1e4:	2021883a 	mov	r16,r4
    c1e8:	003f5306 	br	bf38 <__alt_mem_onchip_memory2_0+0xf800aea8>
    c1ec:	1821883a 	mov	r16,r3
    c1f0:	003ef406 	br	bdc4 <__alt_mem_onchip_memory2_0+0xf800ad34>
    c1f4:	1806943a 	slli	r3,r3,16
    c1f8:	9de6983a 	sll	r19,r19,r23
    c1fc:	e73fffcc 	andi	fp,fp,65535
    c200:	1f07883a 	add	r3,r3,fp
    c204:	98ffbd2e 	bgeu	r19,r3,c0fc <__alt_mem_onchip_memory2_0+0xf800b06c>
    c208:	90bfffc4 	addi	r2,r18,-1
    c20c:	0007883a 	mov	r3,zero
    c210:	003f4e06 	br	bf4c <__alt_mem_onchip_memory2_0+0xf800aebc>
    c214:	00800604 	movi	r2,24
    c218:	003ef506 	br	bdf0 <__alt_mem_onchip_memory2_0+0xf800ad60>
    c21c:	00800604 	movi	r2,24
    c220:	003f0b06 	br	be50 <__alt_mem_onchip_memory2_0+0xf800adc0>
    c224:	00800604 	movi	r2,24
    c228:	003ead06 	br	bce0 <__alt_mem_onchip_memory2_0+0xf800ac50>
    c22c:	0007883a 	mov	r3,zero
    c230:	00800044 	movi	r2,1
    c234:	003f4506 	br	bf4c <__alt_mem_onchip_memory2_0+0xf800aebc>
    c238:	80bf8e2e 	bgeu	r16,r2,c074 <__alt_mem_onchip_memory2_0+0xf800afe4>
    c23c:	8c7fff84 	addi	r17,r17,-2
    c240:	8721883a 	add	r16,r16,fp
    c244:	003f8c06 	br	c078 <__alt_mem_onchip_memory2_0+0xf800afe8>
    c248:	18bf762e 	bgeu	r3,r2,c024 <__alt_mem_onchip_memory2_0+0xf800af94>
    c24c:	ad7fff84 	addi	r21,r21,-2
    c250:	1f07883a 	add	r3,r3,fp
    c254:	003f7406 	br	c028 <__alt_mem_onchip_memory2_0+0xf800af98>
    c258:	1839883a 	mov	fp,r3
    c25c:	003fdd06 	br	c1d4 <__alt_mem_onchip_memory2_0+0xf800b144>
    c260:	182f883a 	mov	r23,r3
    c264:	003fc506 	br	c17c <__alt_mem_onchip_memory2_0+0xf800b0ec>
    c268:	b5bfff84 	addi	r22,r22,-2
    c26c:	3c4f883a 	add	r7,r7,r17
    c270:	003f1a06 	br	bedc <__alt_mem_onchip_memory2_0+0xf800ae4c>
    c274:	b5bfff84 	addi	r22,r22,-2
    c278:	1c47883a 	add	r3,r3,r17
    c27c:	003ebc06 	br	bd70 <__alt_mem_onchip_memory2_0+0xf800ace0>

0000c280 <__umoddi3>:
    c280:	defff304 	addi	sp,sp,-52
    c284:	df000b15 	stw	fp,44(sp)
    c288:	dc400415 	stw	r17,16(sp)
    c28c:	dc000315 	stw	r16,12(sp)
    c290:	dfc00c15 	stw	ra,48(sp)
    c294:	ddc00a15 	stw	r23,40(sp)
    c298:	dd800915 	stw	r22,36(sp)
    c29c:	dd400815 	stw	r21,32(sp)
    c2a0:	dd000715 	stw	r20,28(sp)
    c2a4:	dcc00615 	stw	r19,24(sp)
    c2a8:	dc800515 	stw	r18,20(sp)
    c2ac:	2021883a 	mov	r16,r4
    c2b0:	2823883a 	mov	r17,r5
    c2b4:	2839883a 	mov	fp,r5
    c2b8:	3800401e 	bne	r7,zero,c3bc <__umoddi3+0x13c>
    c2bc:	3027883a 	mov	r19,r6
    c2c0:	2029883a 	mov	r20,r4
    c2c4:	2980552e 	bgeu	r5,r6,c41c <__umoddi3+0x19c>
    c2c8:	00bfffd4 	movui	r2,65535
    c2cc:	1180a236 	bltu	r2,r6,c558 <__umoddi3+0x2d8>
    c2d0:	01003fc4 	movi	r4,255
    c2d4:	2189803a 	cmpltu	r4,r4,r6
    c2d8:	200890fa 	slli	r4,r4,3
    c2dc:	3104d83a 	srl	r2,r6,r4
    c2e0:	00c00074 	movhi	r3,1
    c2e4:	18c91404 	addi	r3,r3,9296
    c2e8:	1885883a 	add	r2,r3,r2
    c2ec:	10c00003 	ldbu	r3,0(r2)
    c2f0:	00800804 	movi	r2,32
    c2f4:	1909883a 	add	r4,r3,r4
    c2f8:	1125c83a 	sub	r18,r2,r4
    c2fc:	90000526 	beq	r18,zero,c314 <__umoddi3+0x94>
    c300:	8ca2983a 	sll	r17,r17,r18
    c304:	8108d83a 	srl	r4,r16,r4
    c308:	34a6983a 	sll	r19,r6,r18
    c30c:	84a8983a 	sll	r20,r16,r18
    c310:	2478b03a 	or	fp,r4,r17
    c314:	982cd43a 	srli	r22,r19,16
    c318:	e009883a 	mov	r4,fp
    c31c:	9dffffcc 	andi	r23,r19,65535
    c320:	b00b883a 	mov	r5,r22
    c324:	000c9a00 	call	c9a0 <__umodsi3>
    c328:	b00b883a 	mov	r5,r22
    c32c:	e009883a 	mov	r4,fp
    c330:	102b883a 	mov	r21,r2
    c334:	000c93c0 	call	c93c <__udivsi3>
    c338:	100b883a 	mov	r5,r2
    c33c:	b809883a 	mov	r4,r23
    c340:	000c9f80 	call	c9f8 <__mulsi3>
    c344:	a82a943a 	slli	r21,r21,16
    c348:	a006d43a 	srli	r3,r20,16
    c34c:	1d46b03a 	or	r3,r3,r21
    c350:	1880032e 	bgeu	r3,r2,c360 <__umoddi3+0xe0>
    c354:	1cc7883a 	add	r3,r3,r19
    c358:	1cc00136 	bltu	r3,r19,c360 <__umoddi3+0xe0>
    c35c:	18813136 	bltu	r3,r2,c824 <__umoddi3+0x5a4>
    c360:	18a1c83a 	sub	r16,r3,r2
    c364:	b00b883a 	mov	r5,r22
    c368:	8009883a 	mov	r4,r16
    c36c:	000c9a00 	call	c9a0 <__umodsi3>
    c370:	b00b883a 	mov	r5,r22
    c374:	8009883a 	mov	r4,r16
    c378:	1023883a 	mov	r17,r2
    c37c:	000c93c0 	call	c93c <__udivsi3>
    c380:	100b883a 	mov	r5,r2
    c384:	b809883a 	mov	r4,r23
    c388:	8822943a 	slli	r17,r17,16
    c38c:	000c9f80 	call	c9f8 <__mulsi3>
    c390:	a0ffffcc 	andi	r3,r20,65535
    c394:	1c46b03a 	or	r3,r3,r17
    c398:	1880042e 	bgeu	r3,r2,c3ac <__umoddi3+0x12c>
    c39c:	1cc7883a 	add	r3,r3,r19
    c3a0:	1cc00236 	bltu	r3,r19,c3ac <__umoddi3+0x12c>
    c3a4:	1880012e 	bgeu	r3,r2,c3ac <__umoddi3+0x12c>
    c3a8:	1cc7883a 	add	r3,r3,r19
    c3ac:	1885c83a 	sub	r2,r3,r2
    c3b0:	1484d83a 	srl	r2,r2,r18
    c3b4:	0007883a 	mov	r3,zero
    c3b8:	00005306 	br	c508 <__umoddi3+0x288>
    c3bc:	29c05036 	bltu	r5,r7,c500 <__umoddi3+0x280>
    c3c0:	00bfffd4 	movui	r2,65535
    c3c4:	11c05c2e 	bgeu	r2,r7,c538 <__umoddi3+0x2b8>
    c3c8:	00804034 	movhi	r2,256
    c3cc:	10bfffc4 	addi	r2,r2,-1
    c3d0:	11c10636 	bltu	r2,r7,c7ec <__umoddi3+0x56c>
    c3d4:	01000404 	movi	r4,16
    c3d8:	3904d83a 	srl	r2,r7,r4
    c3dc:	00c00074 	movhi	r3,1
    c3e0:	18c91404 	addi	r3,r3,9296
    c3e4:	1885883a 	add	r2,r3,r2
    c3e8:	14c00003 	ldbu	r19,0(r2)
    c3ec:	00c00804 	movi	r3,32
    c3f0:	9927883a 	add	r19,r19,r4
    c3f4:	1ce9c83a 	sub	r20,r3,r19
    c3f8:	a0005c1e 	bne	r20,zero,c56c <__umoddi3+0x2ec>
    c3fc:	3c400136 	bltu	r7,r17,c404 <__umoddi3+0x184>
    c400:	81810a36 	bltu	r16,r6,c82c <__umoddi3+0x5ac>
    c404:	8185c83a 	sub	r2,r16,r6
    c408:	89e3c83a 	sub	r17,r17,r7
    c40c:	8089803a 	cmpltu	r4,r16,r2
    c410:	8939c83a 	sub	fp,r17,r4
    c414:	e007883a 	mov	r3,fp
    c418:	00003b06 	br	c508 <__umoddi3+0x288>
    c41c:	3000041e 	bne	r6,zero,c430 <__umoddi3+0x1b0>
    c420:	000b883a 	mov	r5,zero
    c424:	01000044 	movi	r4,1
    c428:	000c93c0 	call	c93c <__udivsi3>
    c42c:	1027883a 	mov	r19,r2
    c430:	00bfffd4 	movui	r2,65535
    c434:	14c0442e 	bgeu	r2,r19,c548 <__umoddi3+0x2c8>
    c438:	00804034 	movhi	r2,256
    c43c:	10bfffc4 	addi	r2,r2,-1
    c440:	14c0ec36 	bltu	r2,r19,c7f4 <__umoddi3+0x574>
    c444:	00800404 	movi	r2,16
    c448:	9886d83a 	srl	r3,r19,r2
    c44c:	01000074 	movhi	r4,1
    c450:	21091404 	addi	r4,r4,9296
    c454:	20c7883a 	add	r3,r4,r3
    c458:	18c00003 	ldbu	r3,0(r3)
    c45c:	1887883a 	add	r3,r3,r2
    c460:	00800804 	movi	r2,32
    c464:	10e5c83a 	sub	r18,r2,r3
    c468:	9000ab1e 	bne	r18,zero,c718 <__umoddi3+0x498>
    c46c:	982cd43a 	srli	r22,r19,16
    c470:	8ce3c83a 	sub	r17,r17,r19
    c474:	9dffffcc 	andi	r23,r19,65535
    c478:	b00b883a 	mov	r5,r22
    c47c:	8809883a 	mov	r4,r17
    c480:	000c9a00 	call	c9a0 <__umodsi3>
    c484:	b00b883a 	mov	r5,r22
    c488:	8809883a 	mov	r4,r17
    c48c:	102b883a 	mov	r21,r2
    c490:	000c93c0 	call	c93c <__udivsi3>
    c494:	b80b883a 	mov	r5,r23
    c498:	1009883a 	mov	r4,r2
    c49c:	000c9f80 	call	c9f8 <__mulsi3>
    c4a0:	a82a943a 	slli	r21,r21,16
    c4a4:	a006d43a 	srli	r3,r20,16
    c4a8:	1d46b03a 	or	r3,r3,r21
    c4ac:	1880042e 	bgeu	r3,r2,c4c0 <__umoddi3+0x240>
    c4b0:	1cc7883a 	add	r3,r3,r19
    c4b4:	1cc00236 	bltu	r3,r19,c4c0 <__umoddi3+0x240>
    c4b8:	1880012e 	bgeu	r3,r2,c4c0 <__umoddi3+0x240>
    c4bc:	1cc7883a 	add	r3,r3,r19
    c4c0:	18a1c83a 	sub	r16,r3,r2
    c4c4:	b00b883a 	mov	r5,r22
    c4c8:	8009883a 	mov	r4,r16
    c4cc:	000c9a00 	call	c9a0 <__umodsi3>
    c4d0:	1023883a 	mov	r17,r2
    c4d4:	b00b883a 	mov	r5,r22
    c4d8:	8009883a 	mov	r4,r16
    c4dc:	000c93c0 	call	c93c <__udivsi3>
    c4e0:	8822943a 	slli	r17,r17,16
    c4e4:	b80b883a 	mov	r5,r23
    c4e8:	1009883a 	mov	r4,r2
    c4ec:	000c9f80 	call	c9f8 <__mulsi3>
    c4f0:	a53fffcc 	andi	r20,r20,65535
    c4f4:	a446b03a 	or	r3,r20,r17
    c4f8:	18bfac2e 	bgeu	r3,r2,c3ac <__alt_mem_onchip_memory2_0+0xf800b31c>
    c4fc:	003fa706 	br	c39c <__alt_mem_onchip_memory2_0+0xf800b30c>
    c500:	2005883a 	mov	r2,r4
    c504:	2807883a 	mov	r3,r5
    c508:	dfc00c17 	ldw	ra,48(sp)
    c50c:	df000b17 	ldw	fp,44(sp)
    c510:	ddc00a17 	ldw	r23,40(sp)
    c514:	dd800917 	ldw	r22,36(sp)
    c518:	dd400817 	ldw	r21,32(sp)
    c51c:	dd000717 	ldw	r20,28(sp)
    c520:	dcc00617 	ldw	r19,24(sp)
    c524:	dc800517 	ldw	r18,20(sp)
    c528:	dc400417 	ldw	r17,16(sp)
    c52c:	dc000317 	ldw	r16,12(sp)
    c530:	dec00d04 	addi	sp,sp,52
    c534:	f800283a 	ret
    c538:	04c03fc4 	movi	r19,255
    c53c:	99c9803a 	cmpltu	r4,r19,r7
    c540:	200890fa 	slli	r4,r4,3
    c544:	003fa406 	br	c3d8 <__alt_mem_onchip_memory2_0+0xf800b348>
    c548:	00803fc4 	movi	r2,255
    c54c:	14c5803a 	cmpltu	r2,r2,r19
    c550:	100490fa 	slli	r2,r2,3
    c554:	003fbc06 	br	c448 <__alt_mem_onchip_memory2_0+0xf800b3b8>
    c558:	00804034 	movhi	r2,256
    c55c:	10bfffc4 	addi	r2,r2,-1
    c560:	1180a636 	bltu	r2,r6,c7fc <__umoddi3+0x57c>
    c564:	01000404 	movi	r4,16
    c568:	003f5c06 	br	c2dc <__alt_mem_onchip_memory2_0+0xf800b24c>
    c56c:	3d0e983a 	sll	r7,r7,r20
    c570:	34ead83a 	srl	r21,r6,r19
    c574:	8cc6d83a 	srl	r3,r17,r19
    c578:	8d10983a 	sll	r8,r17,r20
    c57c:	3d6ab03a 	or	r21,r7,r21
    c580:	a82cd43a 	srli	r22,r21,16
    c584:	84e2d83a 	srl	r17,r16,r19
    c588:	1809883a 	mov	r4,r3
    c58c:	b00b883a 	mov	r5,r22
    c590:	8a22b03a 	or	r17,r17,r8
    c594:	3524983a 	sll	r18,r6,r20
    c598:	dc400015 	stw	r17,0(sp)
    c59c:	d8c00115 	stw	r3,4(sp)
    c5a0:	000c9a00 	call	c9a0 <__umodsi3>
    c5a4:	d8c00117 	ldw	r3,4(sp)
    c5a8:	b00b883a 	mov	r5,r22
    c5ac:	1039883a 	mov	fp,r2
    c5b0:	1809883a 	mov	r4,r3
    c5b4:	000c93c0 	call	c93c <__udivsi3>
    c5b8:	adffffcc 	andi	r23,r21,65535
    c5bc:	100b883a 	mov	r5,r2
    c5c0:	b809883a 	mov	r4,r23
    c5c4:	1023883a 	mov	r17,r2
    c5c8:	000c9f80 	call	c9f8 <__mulsi3>
    c5cc:	d9400017 	ldw	r5,0(sp)
    c5d0:	e008943a 	slli	r4,fp,16
    c5d4:	8520983a 	sll	r16,r16,r20
    c5d8:	2806d43a 	srli	r3,r5,16
    c5dc:	1906b03a 	or	r3,r3,r4
    c5e0:	1880042e 	bgeu	r3,r2,c5f4 <__umoddi3+0x374>
    c5e4:	1d47883a 	add	r3,r3,r21
    c5e8:	893fffc4 	addi	r4,r17,-1
    c5ec:	1d40892e 	bgeu	r3,r21,c814 <__umoddi3+0x594>
    c5f0:	2023883a 	mov	r17,r4
    c5f4:	18b9c83a 	sub	fp,r3,r2
    c5f8:	b00b883a 	mov	r5,r22
    c5fc:	e009883a 	mov	r4,fp
    c600:	000c9a00 	call	c9a0 <__umodsi3>
    c604:	b00b883a 	mov	r5,r22
    c608:	e009883a 	mov	r4,fp
    c60c:	d8800215 	stw	r2,8(sp)
    c610:	000c93c0 	call	c93c <__udivsi3>
    c614:	100b883a 	mov	r5,r2
    c618:	b809883a 	mov	r4,r23
    c61c:	102d883a 	mov	r22,r2
    c620:	000c9f80 	call	c9f8 <__mulsi3>
    c624:	d9800217 	ldw	r6,8(sp)
    c628:	d8c00017 	ldw	r3,0(sp)
    c62c:	300c943a 	slli	r6,r6,16
    c630:	1a3fffcc 	andi	r8,r3,65535
    c634:	4190b03a 	or	r8,r8,r6
    c638:	4080042e 	bgeu	r8,r2,c64c <__umoddi3+0x3cc>
    c63c:	4551883a 	add	r8,r8,r21
    c640:	b0ffffc4 	addi	r3,r22,-1
    c644:	45406f2e 	bgeu	r8,r21,c804 <__umoddi3+0x584>
    c648:	182d883a 	mov	r22,r3
    c64c:	880e943a 	slli	r7,r17,16
    c650:	9006d43a 	srli	r3,r18,16
    c654:	91bfffcc 	andi	r6,r18,65535
    c658:	3dacb03a 	or	r22,r7,r22
    c65c:	b02ed43a 	srli	r23,r22,16
    c660:	b5bfffcc 	andi	r22,r22,65535
    c664:	300b883a 	mov	r5,r6
    c668:	b009883a 	mov	r4,r22
    c66c:	40a3c83a 	sub	r17,r8,r2
    c670:	d8c00115 	stw	r3,4(sp)
    c674:	d9800215 	stw	r6,8(sp)
    c678:	000c9f80 	call	c9f8 <__mulsi3>
    c67c:	d9800217 	ldw	r6,8(sp)
    c680:	b809883a 	mov	r4,r23
    c684:	1039883a 	mov	fp,r2
    c688:	300b883a 	mov	r5,r6
    c68c:	000c9f80 	call	c9f8 <__mulsi3>
    c690:	d8c00117 	ldw	r3,4(sp)
    c694:	b809883a 	mov	r4,r23
    c698:	d8800215 	stw	r2,8(sp)
    c69c:	180b883a 	mov	r5,r3
    c6a0:	000c9f80 	call	c9f8 <__mulsi3>
    c6a4:	d8c00117 	ldw	r3,4(sp)
    c6a8:	b009883a 	mov	r4,r22
    c6ac:	102f883a 	mov	r23,r2
    c6b0:	180b883a 	mov	r5,r3
    c6b4:	000c9f80 	call	c9f8 <__mulsi3>
    c6b8:	d9800217 	ldw	r6,8(sp)
    c6bc:	e006d43a 	srli	r3,fp,16
    c6c0:	1185883a 	add	r2,r2,r6
    c6c4:	1885883a 	add	r2,r3,r2
    c6c8:	1180022e 	bgeu	r2,r6,c6d4 <__umoddi3+0x454>
    c6cc:	00c00074 	movhi	r3,1
    c6d0:	b8ef883a 	add	r23,r23,r3
    c6d4:	1006d43a 	srli	r3,r2,16
    c6d8:	1004943a 	slli	r2,r2,16
    c6dc:	e73fffcc 	andi	fp,fp,65535
    c6e0:	1dc7883a 	add	r3,r3,r23
    c6e4:	1739883a 	add	fp,r2,fp
    c6e8:	88c03a36 	bltu	r17,r3,c7d4 <__umoddi3+0x554>
    c6ec:	88c05126 	beq	r17,r3,c834 <__umoddi3+0x5b4>
    c6f0:	88c9c83a 	sub	r4,r17,r3
    c6f4:	e00f883a 	mov	r7,fp
    c6f8:	81cfc83a 	sub	r7,r16,r7
    c6fc:	81c7803a 	cmpltu	r3,r16,r7
    c700:	20c7c83a 	sub	r3,r4,r3
    c704:	1cc4983a 	sll	r2,r3,r19
    c708:	3d0ed83a 	srl	r7,r7,r20
    c70c:	1d06d83a 	srl	r3,r3,r20
    c710:	11c4b03a 	or	r2,r2,r7
    c714:	003f7c06 	br	c508 <__alt_mem_onchip_memory2_0+0xf800b478>
    c718:	9ca6983a 	sll	r19,r19,r18
    c71c:	88f8d83a 	srl	fp,r17,r3
    c720:	80c4d83a 	srl	r2,r16,r3
    c724:	982cd43a 	srli	r22,r19,16
    c728:	8ca2983a 	sll	r17,r17,r18
    c72c:	e009883a 	mov	r4,fp
    c730:	b00b883a 	mov	r5,r22
    c734:	146ab03a 	or	r21,r2,r17
    c738:	000c9a00 	call	c9a0 <__umodsi3>
    c73c:	b00b883a 	mov	r5,r22
    c740:	e009883a 	mov	r4,fp
    c744:	1029883a 	mov	r20,r2
    c748:	9dffffcc 	andi	r23,r19,65535
    c74c:	000c93c0 	call	c93c <__udivsi3>
    c750:	b809883a 	mov	r4,r23
    c754:	100b883a 	mov	r5,r2
    c758:	000c9f80 	call	c9f8 <__mulsi3>
    c75c:	a008943a 	slli	r4,r20,16
    c760:	a806d43a 	srli	r3,r21,16
    c764:	84a8983a 	sll	r20,r16,r18
    c768:	1906b03a 	or	r3,r3,r4
    c76c:	1880042e 	bgeu	r3,r2,c780 <__umoddi3+0x500>
    c770:	1cc7883a 	add	r3,r3,r19
    c774:	1cc00236 	bltu	r3,r19,c780 <__umoddi3+0x500>
    c778:	1880012e 	bgeu	r3,r2,c780 <__umoddi3+0x500>
    c77c:	1cc7883a 	add	r3,r3,r19
    c780:	18a3c83a 	sub	r17,r3,r2
    c784:	b00b883a 	mov	r5,r22
    c788:	8809883a 	mov	r4,r17
    c78c:	000c9a00 	call	c9a0 <__umodsi3>
    c790:	b00b883a 	mov	r5,r22
    c794:	8809883a 	mov	r4,r17
    c798:	1021883a 	mov	r16,r2
    c79c:	000c93c0 	call	c93c <__udivsi3>
    c7a0:	100b883a 	mov	r5,r2
    c7a4:	b809883a 	mov	r4,r23
    c7a8:	8020943a 	slli	r16,r16,16
    c7ac:	000c9f80 	call	c9f8 <__mulsi3>
    c7b0:	a8ffffcc 	andi	r3,r21,65535
    c7b4:	1c06b03a 	or	r3,r3,r16
    c7b8:	1880042e 	bgeu	r3,r2,c7cc <__umoddi3+0x54c>
    c7bc:	1cc7883a 	add	r3,r3,r19
    c7c0:	1cc00236 	bltu	r3,r19,c7cc <__umoddi3+0x54c>
    c7c4:	1880012e 	bgeu	r3,r2,c7cc <__umoddi3+0x54c>
    c7c8:	1cc7883a 	add	r3,r3,r19
    c7cc:	18a3c83a 	sub	r17,r3,r2
    c7d0:	003f2906 	br	c478 <__alt_mem_onchip_memory2_0+0xf800b3e8>
    c7d4:	e48fc83a 	sub	r7,fp,r18
    c7d8:	1d49c83a 	sub	r4,r3,r21
    c7dc:	e1f9803a 	cmpltu	fp,fp,r7
    c7e0:	2739c83a 	sub	fp,r4,fp
    c7e4:	8f09c83a 	sub	r4,r17,fp
    c7e8:	003fc306 	br	c6f8 <__alt_mem_onchip_memory2_0+0xf800b668>
    c7ec:	01000604 	movi	r4,24
    c7f0:	003ef906 	br	c3d8 <__alt_mem_onchip_memory2_0+0xf800b348>
    c7f4:	00800604 	movi	r2,24
    c7f8:	003f1306 	br	c448 <__alt_mem_onchip_memory2_0+0xf800b3b8>
    c7fc:	01000604 	movi	r4,24
    c800:	003eb606 	br	c2dc <__alt_mem_onchip_memory2_0+0xf800b24c>
    c804:	40bf902e 	bgeu	r8,r2,c648 <__alt_mem_onchip_memory2_0+0xf800b5b8>
    c808:	b5bfff84 	addi	r22,r22,-2
    c80c:	4551883a 	add	r8,r8,r21
    c810:	003f8e06 	br	c64c <__alt_mem_onchip_memory2_0+0xf800b5bc>
    c814:	18bf762e 	bgeu	r3,r2,c5f0 <__alt_mem_onchip_memory2_0+0xf800b560>
    c818:	8c7fff84 	addi	r17,r17,-2
    c81c:	1d47883a 	add	r3,r3,r21
    c820:	003f7406 	br	c5f4 <__alt_mem_onchip_memory2_0+0xf800b564>
    c824:	1cc7883a 	add	r3,r3,r19
    c828:	003ecd06 	br	c360 <__alt_mem_onchip_memory2_0+0xf800b2d0>
    c82c:	8005883a 	mov	r2,r16
    c830:	003ef806 	br	c414 <__alt_mem_onchip_memory2_0+0xf800b384>
    c834:	873fe736 	bltu	r16,fp,c7d4 <__alt_mem_onchip_memory2_0+0xf800b744>
    c838:	e00f883a 	mov	r7,fp
    c83c:	0009883a 	mov	r4,zero
    c840:	003fad06 	br	c6f8 <__alt_mem_onchip_memory2_0+0xf800b668>

0000c844 <__divsi3>:
    c844:	20001b16 	blt	r4,zero,c8b4 <__divsi3+0x70>
    c848:	000f883a 	mov	r7,zero
    c84c:	28001616 	blt	r5,zero,c8a8 <__divsi3+0x64>
    c850:	200d883a 	mov	r6,r4
    c854:	29001a2e 	bgeu	r5,r4,c8c0 <__divsi3+0x7c>
    c858:	00800804 	movi	r2,32
    c85c:	00c00044 	movi	r3,1
    c860:	00000106 	br	c868 <__divsi3+0x24>
    c864:	10000d26 	beq	r2,zero,c89c <__divsi3+0x58>
    c868:	294b883a 	add	r5,r5,r5
    c86c:	10bfffc4 	addi	r2,r2,-1
    c870:	18c7883a 	add	r3,r3,r3
    c874:	293ffb36 	bltu	r5,r4,c864 <__alt_mem_onchip_memory2_0+0xf800b7d4>
    c878:	0005883a 	mov	r2,zero
    c87c:	18000726 	beq	r3,zero,c89c <__divsi3+0x58>
    c880:	0005883a 	mov	r2,zero
    c884:	31400236 	bltu	r6,r5,c890 <__divsi3+0x4c>
    c888:	314dc83a 	sub	r6,r6,r5
    c88c:	10c4b03a 	or	r2,r2,r3
    c890:	1806d07a 	srli	r3,r3,1
    c894:	280ad07a 	srli	r5,r5,1
    c898:	183ffa1e 	bne	r3,zero,c884 <__alt_mem_onchip_memory2_0+0xf800b7f4>
    c89c:	38000126 	beq	r7,zero,c8a4 <__divsi3+0x60>
    c8a0:	0085c83a 	sub	r2,zero,r2
    c8a4:	f800283a 	ret
    c8a8:	014bc83a 	sub	r5,zero,r5
    c8ac:	39c0005c 	xori	r7,r7,1
    c8b0:	003fe706 	br	c850 <__alt_mem_onchip_memory2_0+0xf800b7c0>
    c8b4:	0109c83a 	sub	r4,zero,r4
    c8b8:	01c00044 	movi	r7,1
    c8bc:	003fe306 	br	c84c <__alt_mem_onchip_memory2_0+0xf800b7bc>
    c8c0:	00c00044 	movi	r3,1
    c8c4:	003fee06 	br	c880 <__alt_mem_onchip_memory2_0+0xf800b7f0>

0000c8c8 <__modsi3>:
    c8c8:	20001716 	blt	r4,zero,c928 <__modsi3+0x60>
    c8cc:	000f883a 	mov	r7,zero
    c8d0:	2005883a 	mov	r2,r4
    c8d4:	28001216 	blt	r5,zero,c920 <__modsi3+0x58>
    c8d8:	2900162e 	bgeu	r5,r4,c934 <__modsi3+0x6c>
    c8dc:	01800804 	movi	r6,32
    c8e0:	00c00044 	movi	r3,1
    c8e4:	00000106 	br	c8ec <__modsi3+0x24>
    c8e8:	30000a26 	beq	r6,zero,c914 <__modsi3+0x4c>
    c8ec:	294b883a 	add	r5,r5,r5
    c8f0:	31bfffc4 	addi	r6,r6,-1
    c8f4:	18c7883a 	add	r3,r3,r3
    c8f8:	293ffb36 	bltu	r5,r4,c8e8 <__alt_mem_onchip_memory2_0+0xf800b858>
    c8fc:	18000526 	beq	r3,zero,c914 <__modsi3+0x4c>
    c900:	1806d07a 	srli	r3,r3,1
    c904:	11400136 	bltu	r2,r5,c90c <__modsi3+0x44>
    c908:	1145c83a 	sub	r2,r2,r5
    c90c:	280ad07a 	srli	r5,r5,1
    c910:	183ffb1e 	bne	r3,zero,c900 <__alt_mem_onchip_memory2_0+0xf800b870>
    c914:	38000126 	beq	r7,zero,c91c <__modsi3+0x54>
    c918:	0085c83a 	sub	r2,zero,r2
    c91c:	f800283a 	ret
    c920:	014bc83a 	sub	r5,zero,r5
    c924:	003fec06 	br	c8d8 <__alt_mem_onchip_memory2_0+0xf800b848>
    c928:	0109c83a 	sub	r4,zero,r4
    c92c:	01c00044 	movi	r7,1
    c930:	003fe706 	br	c8d0 <__alt_mem_onchip_memory2_0+0xf800b840>
    c934:	00c00044 	movi	r3,1
    c938:	003ff106 	br	c900 <__alt_mem_onchip_memory2_0+0xf800b870>

0000c93c <__udivsi3>:
    c93c:	200d883a 	mov	r6,r4
    c940:	2900152e 	bgeu	r5,r4,c998 <__udivsi3+0x5c>
    c944:	28001416 	blt	r5,zero,c998 <__udivsi3+0x5c>
    c948:	00800804 	movi	r2,32
    c94c:	00c00044 	movi	r3,1
    c950:	00000206 	br	c95c <__udivsi3+0x20>
    c954:	10000e26 	beq	r2,zero,c990 <__udivsi3+0x54>
    c958:	28000516 	blt	r5,zero,c970 <__udivsi3+0x34>
    c95c:	294b883a 	add	r5,r5,r5
    c960:	10bfffc4 	addi	r2,r2,-1
    c964:	18c7883a 	add	r3,r3,r3
    c968:	293ffa36 	bltu	r5,r4,c954 <__alt_mem_onchip_memory2_0+0xf800b8c4>
    c96c:	18000826 	beq	r3,zero,c990 <__udivsi3+0x54>
    c970:	0005883a 	mov	r2,zero
    c974:	31400236 	bltu	r6,r5,c980 <__udivsi3+0x44>
    c978:	314dc83a 	sub	r6,r6,r5
    c97c:	10c4b03a 	or	r2,r2,r3
    c980:	1806d07a 	srli	r3,r3,1
    c984:	280ad07a 	srli	r5,r5,1
    c988:	183ffa1e 	bne	r3,zero,c974 <__alt_mem_onchip_memory2_0+0xf800b8e4>
    c98c:	f800283a 	ret
    c990:	0005883a 	mov	r2,zero
    c994:	f800283a 	ret
    c998:	00c00044 	movi	r3,1
    c99c:	003ff406 	br	c970 <__alt_mem_onchip_memory2_0+0xf800b8e0>

0000c9a0 <__umodsi3>:
    c9a0:	2005883a 	mov	r2,r4
    c9a4:	2900122e 	bgeu	r5,r4,c9f0 <__umodsi3+0x50>
    c9a8:	28001116 	blt	r5,zero,c9f0 <__umodsi3+0x50>
    c9ac:	01800804 	movi	r6,32
    c9b0:	00c00044 	movi	r3,1
    c9b4:	00000206 	br	c9c0 <__umodsi3+0x20>
    c9b8:	30000c26 	beq	r6,zero,c9ec <__umodsi3+0x4c>
    c9bc:	28000516 	blt	r5,zero,c9d4 <__umodsi3+0x34>
    c9c0:	294b883a 	add	r5,r5,r5
    c9c4:	31bfffc4 	addi	r6,r6,-1
    c9c8:	18c7883a 	add	r3,r3,r3
    c9cc:	293ffa36 	bltu	r5,r4,c9b8 <__alt_mem_onchip_memory2_0+0xf800b928>
    c9d0:	18000626 	beq	r3,zero,c9ec <__umodsi3+0x4c>
    c9d4:	1806d07a 	srli	r3,r3,1
    c9d8:	11400136 	bltu	r2,r5,c9e0 <__umodsi3+0x40>
    c9dc:	1145c83a 	sub	r2,r2,r5
    c9e0:	280ad07a 	srli	r5,r5,1
    c9e4:	183ffb1e 	bne	r3,zero,c9d4 <__alt_mem_onchip_memory2_0+0xf800b944>
    c9e8:	f800283a 	ret
    c9ec:	f800283a 	ret
    c9f0:	00c00044 	movi	r3,1
    c9f4:	003ff706 	br	c9d4 <__alt_mem_onchip_memory2_0+0xf800b944>

0000c9f8 <__mulsi3>:
    c9f8:	0005883a 	mov	r2,zero
    c9fc:	20000726 	beq	r4,zero,ca1c <__mulsi3+0x24>
    ca00:	20c0004c 	andi	r3,r4,1
    ca04:	2008d07a 	srli	r4,r4,1
    ca08:	18000126 	beq	r3,zero,ca10 <__mulsi3+0x18>
    ca0c:	1145883a 	add	r2,r2,r5
    ca10:	294b883a 	add	r5,r5,r5
    ca14:	203ffa1e 	bne	r4,zero,ca00 <__alt_mem_onchip_memory2_0+0xf800b970>
    ca18:	f800283a 	ret
    ca1c:	f800283a 	ret

0000ca20 <__adddf3>:
    ca20:	02c00434 	movhi	r11,16
    ca24:	5affffc4 	addi	r11,r11,-1
    ca28:	2806d7fa 	srli	r3,r5,31
    ca2c:	2ad4703a 	and	r10,r5,r11
    ca30:	3ad2703a 	and	r9,r7,r11
    ca34:	3804d53a 	srli	r2,r7,20
    ca38:	3018d77a 	srli	r12,r6,29
    ca3c:	280ad53a 	srli	r5,r5,20
    ca40:	501490fa 	slli	r10,r10,3
    ca44:	2010d77a 	srli	r8,r4,29
    ca48:	481290fa 	slli	r9,r9,3
    ca4c:	380ed7fa 	srli	r7,r7,31
    ca50:	defffb04 	addi	sp,sp,-20
    ca54:	dc800215 	stw	r18,8(sp)
    ca58:	dc400115 	stw	r17,4(sp)
    ca5c:	dc000015 	stw	r16,0(sp)
    ca60:	dfc00415 	stw	ra,16(sp)
    ca64:	dcc00315 	stw	r19,12(sp)
    ca68:	1c803fcc 	andi	r18,r3,255
    ca6c:	2c01ffcc 	andi	r16,r5,2047
    ca70:	5210b03a 	or	r8,r10,r8
    ca74:	202290fa 	slli	r17,r4,3
    ca78:	1081ffcc 	andi	r2,r2,2047
    ca7c:	4b12b03a 	or	r9,r9,r12
    ca80:	300c90fa 	slli	r6,r6,3
    ca84:	91c07526 	beq	r18,r7,cc5c <__adddf3+0x23c>
    ca88:	8087c83a 	sub	r3,r16,r2
    ca8c:	00c0ab0e 	bge	zero,r3,cd3c <__adddf3+0x31c>
    ca90:	10002a1e 	bne	r2,zero,cb3c <__adddf3+0x11c>
    ca94:	4984b03a 	or	r2,r9,r6
    ca98:	1000961e 	bne	r2,zero,ccf4 <__adddf3+0x2d4>
    ca9c:	888001cc 	andi	r2,r17,7
    caa0:	10000726 	beq	r2,zero,cac0 <__adddf3+0xa0>
    caa4:	888003cc 	andi	r2,r17,15
    caa8:	00c00104 	movi	r3,4
    caac:	10c00426 	beq	r2,r3,cac0 <__adddf3+0xa0>
    cab0:	88c7883a 	add	r3,r17,r3
    cab4:	1c63803a 	cmpltu	r17,r3,r17
    cab8:	4451883a 	add	r8,r8,r17
    cabc:	1823883a 	mov	r17,r3
    cac0:	4080202c 	andhi	r2,r8,128
    cac4:	10005926 	beq	r2,zero,cc2c <__adddf3+0x20c>
    cac8:	84000044 	addi	r16,r16,1
    cacc:	0081ffc4 	movi	r2,2047
    cad0:	8080ba26 	beq	r16,r2,cdbc <__adddf3+0x39c>
    cad4:	00bfe034 	movhi	r2,65408
    cad8:	10bfffc4 	addi	r2,r2,-1
    cadc:	4090703a 	and	r8,r8,r2
    cae0:	4004977a 	slli	r2,r8,29
    cae4:	4010927a 	slli	r8,r8,9
    cae8:	8822d0fa 	srli	r17,r17,3
    caec:	8401ffcc 	andi	r16,r16,2047
    caf0:	4010d33a 	srli	r8,r8,12
    caf4:	9007883a 	mov	r3,r18
    caf8:	1444b03a 	or	r2,r2,r17
    cafc:	8401ffcc 	andi	r16,r16,2047
    cb00:	8020953a 	slli	r16,r16,20
    cb04:	18c03fcc 	andi	r3,r3,255
    cb08:	01000434 	movhi	r4,16
    cb0c:	213fffc4 	addi	r4,r4,-1
    cb10:	180697fa 	slli	r3,r3,31
    cb14:	4110703a 	and	r8,r8,r4
    cb18:	4410b03a 	or	r8,r8,r16
    cb1c:	40c6b03a 	or	r3,r8,r3
    cb20:	dfc00417 	ldw	ra,16(sp)
    cb24:	dcc00317 	ldw	r19,12(sp)
    cb28:	dc800217 	ldw	r18,8(sp)
    cb2c:	dc400117 	ldw	r17,4(sp)
    cb30:	dc000017 	ldw	r16,0(sp)
    cb34:	dec00504 	addi	sp,sp,20
    cb38:	f800283a 	ret
    cb3c:	0081ffc4 	movi	r2,2047
    cb40:	80bfd626 	beq	r16,r2,ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    cb44:	4a402034 	orhi	r9,r9,128
    cb48:	00800e04 	movi	r2,56
    cb4c:	10c09f16 	blt	r2,r3,cdcc <__adddf3+0x3ac>
    cb50:	008007c4 	movi	r2,31
    cb54:	10c0c216 	blt	r2,r3,ce60 <__adddf3+0x440>
    cb58:	00800804 	movi	r2,32
    cb5c:	10c5c83a 	sub	r2,r2,r3
    cb60:	488a983a 	sll	r5,r9,r2
    cb64:	30c8d83a 	srl	r4,r6,r3
    cb68:	3084983a 	sll	r2,r6,r2
    cb6c:	48c6d83a 	srl	r3,r9,r3
    cb70:	290cb03a 	or	r6,r5,r4
    cb74:	1004c03a 	cmpne	r2,r2,zero
    cb78:	308cb03a 	or	r6,r6,r2
    cb7c:	898dc83a 	sub	r6,r17,r6
    cb80:	89a3803a 	cmpltu	r17,r17,r6
    cb84:	40d1c83a 	sub	r8,r8,r3
    cb88:	4451c83a 	sub	r8,r8,r17
    cb8c:	3023883a 	mov	r17,r6
    cb90:	4080202c 	andhi	r2,r8,128
    cb94:	10002326 	beq	r2,zero,cc24 <__adddf3+0x204>
    cb98:	04c02034 	movhi	r19,128
    cb9c:	9cffffc4 	addi	r19,r19,-1
    cba0:	44e6703a 	and	r19,r8,r19
    cba4:	98007626 	beq	r19,zero,cd80 <__adddf3+0x360>
    cba8:	9809883a 	mov	r4,r19
    cbac:	000f2600 	call	f260 <__clzsi2>
    cbb0:	10fffe04 	addi	r3,r2,-8
    cbb4:	010007c4 	movi	r4,31
    cbb8:	20c07716 	blt	r4,r3,cd98 <__adddf3+0x378>
    cbbc:	00800804 	movi	r2,32
    cbc0:	10c5c83a 	sub	r2,r2,r3
    cbc4:	8884d83a 	srl	r2,r17,r2
    cbc8:	98d0983a 	sll	r8,r19,r3
    cbcc:	88e2983a 	sll	r17,r17,r3
    cbd0:	1204b03a 	or	r2,r2,r8
    cbd4:	1c007416 	blt	r3,r16,cda8 <__adddf3+0x388>
    cbd8:	1c21c83a 	sub	r16,r3,r16
    cbdc:	82000044 	addi	r8,r16,1
    cbe0:	00c007c4 	movi	r3,31
    cbe4:	1a009116 	blt	r3,r8,ce2c <__adddf3+0x40c>
    cbe8:	00c00804 	movi	r3,32
    cbec:	1a07c83a 	sub	r3,r3,r8
    cbf0:	8a08d83a 	srl	r4,r17,r8
    cbf4:	88e2983a 	sll	r17,r17,r3
    cbf8:	10c6983a 	sll	r3,r2,r3
    cbfc:	1210d83a 	srl	r8,r2,r8
    cc00:	8804c03a 	cmpne	r2,r17,zero
    cc04:	1906b03a 	or	r3,r3,r4
    cc08:	18a2b03a 	or	r17,r3,r2
    cc0c:	0021883a 	mov	r16,zero
    cc10:	003fa206 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    cc14:	1890b03a 	or	r8,r3,r2
    cc18:	40017d26 	beq	r8,zero,d210 <__adddf3+0x7f0>
    cc1c:	1011883a 	mov	r8,r2
    cc20:	1823883a 	mov	r17,r3
    cc24:	888001cc 	andi	r2,r17,7
    cc28:	103f9e1e 	bne	r2,zero,caa4 <__alt_mem_onchip_memory2_0+0xf800ba14>
    cc2c:	4004977a 	slli	r2,r8,29
    cc30:	8822d0fa 	srli	r17,r17,3
    cc34:	4010d0fa 	srli	r8,r8,3
    cc38:	9007883a 	mov	r3,r18
    cc3c:	1444b03a 	or	r2,r2,r17
    cc40:	0101ffc4 	movi	r4,2047
    cc44:	81002426 	beq	r16,r4,ccd8 <__adddf3+0x2b8>
    cc48:	8120703a 	and	r16,r16,r4
    cc4c:	01000434 	movhi	r4,16
    cc50:	213fffc4 	addi	r4,r4,-1
    cc54:	4110703a 	and	r8,r8,r4
    cc58:	003fa806 	br	cafc <__alt_mem_onchip_memory2_0+0xf800ba6c>
    cc5c:	8089c83a 	sub	r4,r16,r2
    cc60:	01005e0e 	bge	zero,r4,cddc <__adddf3+0x3bc>
    cc64:	10002b26 	beq	r2,zero,cd14 <__adddf3+0x2f4>
    cc68:	0081ffc4 	movi	r2,2047
    cc6c:	80bf8b26 	beq	r16,r2,ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    cc70:	4a402034 	orhi	r9,r9,128
    cc74:	00800e04 	movi	r2,56
    cc78:	1100a40e 	bge	r2,r4,cf0c <__adddf3+0x4ec>
    cc7c:	498cb03a 	or	r6,r9,r6
    cc80:	300ac03a 	cmpne	r5,r6,zero
    cc84:	0013883a 	mov	r9,zero
    cc88:	2c4b883a 	add	r5,r5,r17
    cc8c:	2c63803a 	cmpltu	r17,r5,r17
    cc90:	4a11883a 	add	r8,r9,r8
    cc94:	8a11883a 	add	r8,r17,r8
    cc98:	2823883a 	mov	r17,r5
    cc9c:	4080202c 	andhi	r2,r8,128
    cca0:	103fe026 	beq	r2,zero,cc24 <__alt_mem_onchip_memory2_0+0xf800bb94>
    cca4:	84000044 	addi	r16,r16,1
    cca8:	0081ffc4 	movi	r2,2047
    ccac:	8080d226 	beq	r16,r2,cff8 <__adddf3+0x5d8>
    ccb0:	00bfe034 	movhi	r2,65408
    ccb4:	10bfffc4 	addi	r2,r2,-1
    ccb8:	4090703a 	and	r8,r8,r2
    ccbc:	880ad07a 	srli	r5,r17,1
    ccc0:	400897fa 	slli	r4,r8,31
    ccc4:	88c0004c 	andi	r3,r17,1
    ccc8:	28e2b03a 	or	r17,r5,r3
    cccc:	4010d07a 	srli	r8,r8,1
    ccd0:	2462b03a 	or	r17,r4,r17
    ccd4:	003f7106 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    ccd8:	4088b03a 	or	r4,r8,r2
    ccdc:	20014526 	beq	r4,zero,d1f4 <__adddf3+0x7d4>
    cce0:	01000434 	movhi	r4,16
    cce4:	42000234 	orhi	r8,r8,8
    cce8:	213fffc4 	addi	r4,r4,-1
    ccec:	4110703a 	and	r8,r8,r4
    ccf0:	003f8206 	br	cafc <__alt_mem_onchip_memory2_0+0xf800ba6c>
    ccf4:	18ffffc4 	addi	r3,r3,-1
    ccf8:	1800491e 	bne	r3,zero,ce20 <__adddf3+0x400>
    ccfc:	898bc83a 	sub	r5,r17,r6
    cd00:	8963803a 	cmpltu	r17,r17,r5
    cd04:	4251c83a 	sub	r8,r8,r9
    cd08:	4451c83a 	sub	r8,r8,r17
    cd0c:	2823883a 	mov	r17,r5
    cd10:	003f9f06 	br	cb90 <__alt_mem_onchip_memory2_0+0xf800bb00>
    cd14:	4984b03a 	or	r2,r9,r6
    cd18:	103f6026 	beq	r2,zero,ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    cd1c:	213fffc4 	addi	r4,r4,-1
    cd20:	2000931e 	bne	r4,zero,cf70 <__adddf3+0x550>
    cd24:	898d883a 	add	r6,r17,r6
    cd28:	3463803a 	cmpltu	r17,r6,r17
    cd2c:	4251883a 	add	r8,r8,r9
    cd30:	8a11883a 	add	r8,r17,r8
    cd34:	3023883a 	mov	r17,r6
    cd38:	003fd806 	br	cc9c <__alt_mem_onchip_memory2_0+0xf800bc0c>
    cd3c:	1800541e 	bne	r3,zero,ce90 <__adddf3+0x470>
    cd40:	80800044 	addi	r2,r16,1
    cd44:	1081ffcc 	andi	r2,r2,2047
    cd48:	00c00044 	movi	r3,1
    cd4c:	1880a00e 	bge	r3,r2,cfd0 <__adddf3+0x5b0>
    cd50:	8989c83a 	sub	r4,r17,r6
    cd54:	8905803a 	cmpltu	r2,r17,r4
    cd58:	4267c83a 	sub	r19,r8,r9
    cd5c:	98a7c83a 	sub	r19,r19,r2
    cd60:	9880202c 	andhi	r2,r19,128
    cd64:	10006326 	beq	r2,zero,cef4 <__adddf3+0x4d4>
    cd68:	3463c83a 	sub	r17,r6,r17
    cd6c:	4a07c83a 	sub	r3,r9,r8
    cd70:	344d803a 	cmpltu	r6,r6,r17
    cd74:	19a7c83a 	sub	r19,r3,r6
    cd78:	3825883a 	mov	r18,r7
    cd7c:	983f8a1e 	bne	r19,zero,cba8 <__alt_mem_onchip_memory2_0+0xf800bb18>
    cd80:	8809883a 	mov	r4,r17
    cd84:	000f2600 	call	f260 <__clzsi2>
    cd88:	10800804 	addi	r2,r2,32
    cd8c:	10fffe04 	addi	r3,r2,-8
    cd90:	010007c4 	movi	r4,31
    cd94:	20ff890e 	bge	r4,r3,cbbc <__alt_mem_onchip_memory2_0+0xf800bb2c>
    cd98:	10bff604 	addi	r2,r2,-40
    cd9c:	8884983a 	sll	r2,r17,r2
    cda0:	0023883a 	mov	r17,zero
    cda4:	1c3f8c0e 	bge	r3,r16,cbd8 <__alt_mem_onchip_memory2_0+0xf800bb48>
    cda8:	023fe034 	movhi	r8,65408
    cdac:	423fffc4 	addi	r8,r8,-1
    cdb0:	80e1c83a 	sub	r16,r16,r3
    cdb4:	1210703a 	and	r8,r2,r8
    cdb8:	003f3806 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    cdbc:	9007883a 	mov	r3,r18
    cdc0:	0011883a 	mov	r8,zero
    cdc4:	0005883a 	mov	r2,zero
    cdc8:	003f4c06 	br	cafc <__alt_mem_onchip_memory2_0+0xf800ba6c>
    cdcc:	498cb03a 	or	r6,r9,r6
    cdd0:	300cc03a 	cmpne	r6,r6,zero
    cdd4:	0007883a 	mov	r3,zero
    cdd8:	003f6806 	br	cb7c <__alt_mem_onchip_memory2_0+0xf800baec>
    cddc:	20009c1e 	bne	r4,zero,d050 <__adddf3+0x630>
    cde0:	80800044 	addi	r2,r16,1
    cde4:	1141ffcc 	andi	r5,r2,2047
    cde8:	01000044 	movi	r4,1
    cdec:	2140670e 	bge	r4,r5,cf8c <__adddf3+0x56c>
    cdf0:	0101ffc4 	movi	r4,2047
    cdf4:	11007f26 	beq	r2,r4,cff4 <__adddf3+0x5d4>
    cdf8:	898d883a 	add	r6,r17,r6
    cdfc:	4247883a 	add	r3,r8,r9
    ce00:	3451803a 	cmpltu	r8,r6,r17
    ce04:	40d1883a 	add	r8,r8,r3
    ce08:	402297fa 	slli	r17,r8,31
    ce0c:	300cd07a 	srli	r6,r6,1
    ce10:	4010d07a 	srli	r8,r8,1
    ce14:	1021883a 	mov	r16,r2
    ce18:	89a2b03a 	or	r17,r17,r6
    ce1c:	003f1f06 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    ce20:	0081ffc4 	movi	r2,2047
    ce24:	80bf481e 	bne	r16,r2,cb48 <__alt_mem_onchip_memory2_0+0xf800bab8>
    ce28:	003f1c06 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    ce2c:	843ff844 	addi	r16,r16,-31
    ce30:	01000804 	movi	r4,32
    ce34:	1406d83a 	srl	r3,r2,r16
    ce38:	41005026 	beq	r8,r4,cf7c <__adddf3+0x55c>
    ce3c:	01001004 	movi	r4,64
    ce40:	2211c83a 	sub	r8,r4,r8
    ce44:	1204983a 	sll	r2,r2,r8
    ce48:	88a2b03a 	or	r17,r17,r2
    ce4c:	8822c03a 	cmpne	r17,r17,zero
    ce50:	1c62b03a 	or	r17,r3,r17
    ce54:	0011883a 	mov	r8,zero
    ce58:	0021883a 	mov	r16,zero
    ce5c:	003f7106 	br	cc24 <__alt_mem_onchip_memory2_0+0xf800bb94>
    ce60:	193ff804 	addi	r4,r3,-32
    ce64:	00800804 	movi	r2,32
    ce68:	4908d83a 	srl	r4,r9,r4
    ce6c:	18804526 	beq	r3,r2,cf84 <__adddf3+0x564>
    ce70:	00801004 	movi	r2,64
    ce74:	10c5c83a 	sub	r2,r2,r3
    ce78:	4886983a 	sll	r3,r9,r2
    ce7c:	198cb03a 	or	r6,r3,r6
    ce80:	300cc03a 	cmpne	r6,r6,zero
    ce84:	218cb03a 	or	r6,r4,r6
    ce88:	0007883a 	mov	r3,zero
    ce8c:	003f3b06 	br	cb7c <__alt_mem_onchip_memory2_0+0xf800baec>
    ce90:	80002a26 	beq	r16,zero,cf3c <__adddf3+0x51c>
    ce94:	0101ffc4 	movi	r4,2047
    ce98:	11006826 	beq	r2,r4,d03c <__adddf3+0x61c>
    ce9c:	00c7c83a 	sub	r3,zero,r3
    cea0:	42002034 	orhi	r8,r8,128
    cea4:	01000e04 	movi	r4,56
    cea8:	20c07c16 	blt	r4,r3,d09c <__adddf3+0x67c>
    ceac:	010007c4 	movi	r4,31
    ceb0:	20c0da16 	blt	r4,r3,d21c <__adddf3+0x7fc>
    ceb4:	01000804 	movi	r4,32
    ceb8:	20c9c83a 	sub	r4,r4,r3
    cebc:	4114983a 	sll	r10,r8,r4
    cec0:	88cad83a 	srl	r5,r17,r3
    cec4:	8908983a 	sll	r4,r17,r4
    cec8:	40c6d83a 	srl	r3,r8,r3
    cecc:	5162b03a 	or	r17,r10,r5
    ced0:	2008c03a 	cmpne	r4,r4,zero
    ced4:	8922b03a 	or	r17,r17,r4
    ced8:	3463c83a 	sub	r17,r6,r17
    cedc:	48c7c83a 	sub	r3,r9,r3
    cee0:	344d803a 	cmpltu	r6,r6,r17
    cee4:	1991c83a 	sub	r8,r3,r6
    cee8:	1021883a 	mov	r16,r2
    ceec:	3825883a 	mov	r18,r7
    cef0:	003f2706 	br	cb90 <__alt_mem_onchip_memory2_0+0xf800bb00>
    cef4:	24d0b03a 	or	r8,r4,r19
    cef8:	40001b1e 	bne	r8,zero,cf68 <__adddf3+0x548>
    cefc:	0005883a 	mov	r2,zero
    cf00:	0007883a 	mov	r3,zero
    cf04:	0021883a 	mov	r16,zero
    cf08:	003f4d06 	br	cc40 <__alt_mem_onchip_memory2_0+0xf800bbb0>
    cf0c:	008007c4 	movi	r2,31
    cf10:	11003c16 	blt	r2,r4,d004 <__adddf3+0x5e4>
    cf14:	00800804 	movi	r2,32
    cf18:	1105c83a 	sub	r2,r2,r4
    cf1c:	488e983a 	sll	r7,r9,r2
    cf20:	310ad83a 	srl	r5,r6,r4
    cf24:	3084983a 	sll	r2,r6,r2
    cf28:	4912d83a 	srl	r9,r9,r4
    cf2c:	394ab03a 	or	r5,r7,r5
    cf30:	1004c03a 	cmpne	r2,r2,zero
    cf34:	288ab03a 	or	r5,r5,r2
    cf38:	003f5306 	br	cc88 <__alt_mem_onchip_memory2_0+0xf800bbf8>
    cf3c:	4448b03a 	or	r4,r8,r17
    cf40:	20003e26 	beq	r4,zero,d03c <__adddf3+0x61c>
    cf44:	00c6303a 	nor	r3,zero,r3
    cf48:	18003a1e 	bne	r3,zero,d034 <__adddf3+0x614>
    cf4c:	3463c83a 	sub	r17,r6,r17
    cf50:	4a07c83a 	sub	r3,r9,r8
    cf54:	344d803a 	cmpltu	r6,r6,r17
    cf58:	1991c83a 	sub	r8,r3,r6
    cf5c:	1021883a 	mov	r16,r2
    cf60:	3825883a 	mov	r18,r7
    cf64:	003f0a06 	br	cb90 <__alt_mem_onchip_memory2_0+0xf800bb00>
    cf68:	2023883a 	mov	r17,r4
    cf6c:	003f0d06 	br	cba4 <__alt_mem_onchip_memory2_0+0xf800bb14>
    cf70:	0081ffc4 	movi	r2,2047
    cf74:	80bf3f1e 	bne	r16,r2,cc74 <__alt_mem_onchip_memory2_0+0xf800bbe4>
    cf78:	003ec806 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    cf7c:	0005883a 	mov	r2,zero
    cf80:	003fb106 	br	ce48 <__alt_mem_onchip_memory2_0+0xf800bdb8>
    cf84:	0007883a 	mov	r3,zero
    cf88:	003fbc06 	br	ce7c <__alt_mem_onchip_memory2_0+0xf800bdec>
    cf8c:	4444b03a 	or	r2,r8,r17
    cf90:	8000871e 	bne	r16,zero,d1b0 <__adddf3+0x790>
    cf94:	1000ba26 	beq	r2,zero,d280 <__adddf3+0x860>
    cf98:	4984b03a 	or	r2,r9,r6
    cf9c:	103ebf26 	beq	r2,zero,ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    cfa0:	8985883a 	add	r2,r17,r6
    cfa4:	4247883a 	add	r3,r8,r9
    cfa8:	1451803a 	cmpltu	r8,r2,r17
    cfac:	40d1883a 	add	r8,r8,r3
    cfb0:	40c0202c 	andhi	r3,r8,128
    cfb4:	1023883a 	mov	r17,r2
    cfb8:	183f1a26 	beq	r3,zero,cc24 <__alt_mem_onchip_memory2_0+0xf800bb94>
    cfbc:	00bfe034 	movhi	r2,65408
    cfc0:	10bfffc4 	addi	r2,r2,-1
    cfc4:	2021883a 	mov	r16,r4
    cfc8:	4090703a 	and	r8,r8,r2
    cfcc:	003eb306 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    cfd0:	4444b03a 	or	r2,r8,r17
    cfd4:	8000291e 	bne	r16,zero,d07c <__adddf3+0x65c>
    cfd8:	10004b1e 	bne	r2,zero,d108 <__adddf3+0x6e8>
    cfdc:	4990b03a 	or	r8,r9,r6
    cfe0:	40008b26 	beq	r8,zero,d210 <__adddf3+0x7f0>
    cfe4:	4811883a 	mov	r8,r9
    cfe8:	3023883a 	mov	r17,r6
    cfec:	3825883a 	mov	r18,r7
    cff0:	003eaa06 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    cff4:	1021883a 	mov	r16,r2
    cff8:	0011883a 	mov	r8,zero
    cffc:	0005883a 	mov	r2,zero
    d000:	003f0f06 	br	cc40 <__alt_mem_onchip_memory2_0+0xf800bbb0>
    d004:	217ff804 	addi	r5,r4,-32
    d008:	00800804 	movi	r2,32
    d00c:	494ad83a 	srl	r5,r9,r5
    d010:	20807d26 	beq	r4,r2,d208 <__adddf3+0x7e8>
    d014:	00801004 	movi	r2,64
    d018:	1109c83a 	sub	r4,r2,r4
    d01c:	4912983a 	sll	r9,r9,r4
    d020:	498cb03a 	or	r6,r9,r6
    d024:	300cc03a 	cmpne	r6,r6,zero
    d028:	298ab03a 	or	r5,r5,r6
    d02c:	0013883a 	mov	r9,zero
    d030:	003f1506 	br	cc88 <__alt_mem_onchip_memory2_0+0xf800bbf8>
    d034:	0101ffc4 	movi	r4,2047
    d038:	113f9a1e 	bne	r2,r4,cea4 <__alt_mem_onchip_memory2_0+0xf800be14>
    d03c:	4811883a 	mov	r8,r9
    d040:	3023883a 	mov	r17,r6
    d044:	1021883a 	mov	r16,r2
    d048:	3825883a 	mov	r18,r7
    d04c:	003e9306 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    d050:	8000161e 	bne	r16,zero,d0ac <__adddf3+0x68c>
    d054:	444ab03a 	or	r5,r8,r17
    d058:	28005126 	beq	r5,zero,d1a0 <__adddf3+0x780>
    d05c:	0108303a 	nor	r4,zero,r4
    d060:	20004d1e 	bne	r4,zero,d198 <__adddf3+0x778>
    d064:	89a3883a 	add	r17,r17,r6
    d068:	4253883a 	add	r9,r8,r9
    d06c:	898d803a 	cmpltu	r6,r17,r6
    d070:	3251883a 	add	r8,r6,r9
    d074:	1021883a 	mov	r16,r2
    d078:	003f0806 	br	cc9c <__alt_mem_onchip_memory2_0+0xf800bc0c>
    d07c:	1000301e 	bne	r2,zero,d140 <__adddf3+0x720>
    d080:	4984b03a 	or	r2,r9,r6
    d084:	10007126 	beq	r2,zero,d24c <__adddf3+0x82c>
    d088:	4811883a 	mov	r8,r9
    d08c:	3023883a 	mov	r17,r6
    d090:	3825883a 	mov	r18,r7
    d094:	0401ffc4 	movi	r16,2047
    d098:	003e8006 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    d09c:	4462b03a 	or	r17,r8,r17
    d0a0:	8822c03a 	cmpne	r17,r17,zero
    d0a4:	0007883a 	mov	r3,zero
    d0a8:	003f8b06 	br	ced8 <__alt_mem_onchip_memory2_0+0xf800be48>
    d0ac:	0141ffc4 	movi	r5,2047
    d0b0:	11403b26 	beq	r2,r5,d1a0 <__adddf3+0x780>
    d0b4:	0109c83a 	sub	r4,zero,r4
    d0b8:	42002034 	orhi	r8,r8,128
    d0bc:	01400e04 	movi	r5,56
    d0c0:	29006716 	blt	r5,r4,d260 <__adddf3+0x840>
    d0c4:	014007c4 	movi	r5,31
    d0c8:	29007016 	blt	r5,r4,d28c <__adddf3+0x86c>
    d0cc:	01400804 	movi	r5,32
    d0d0:	290bc83a 	sub	r5,r5,r4
    d0d4:	4154983a 	sll	r10,r8,r5
    d0d8:	890ed83a 	srl	r7,r17,r4
    d0dc:	894a983a 	sll	r5,r17,r5
    d0e0:	4108d83a 	srl	r4,r8,r4
    d0e4:	51e2b03a 	or	r17,r10,r7
    d0e8:	280ac03a 	cmpne	r5,r5,zero
    d0ec:	8962b03a 	or	r17,r17,r5
    d0f0:	89a3883a 	add	r17,r17,r6
    d0f4:	2253883a 	add	r9,r4,r9
    d0f8:	898d803a 	cmpltu	r6,r17,r6
    d0fc:	3251883a 	add	r8,r6,r9
    d100:	1021883a 	mov	r16,r2
    d104:	003ee506 	br	cc9c <__alt_mem_onchip_memory2_0+0xf800bc0c>
    d108:	4984b03a 	or	r2,r9,r6
    d10c:	103e6326 	beq	r2,zero,ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    d110:	8987c83a 	sub	r3,r17,r6
    d114:	88c9803a 	cmpltu	r4,r17,r3
    d118:	4245c83a 	sub	r2,r8,r9
    d11c:	1105c83a 	sub	r2,r2,r4
    d120:	1100202c 	andhi	r4,r2,128
    d124:	203ebb26 	beq	r4,zero,cc14 <__alt_mem_onchip_memory2_0+0xf800bb84>
    d128:	3463c83a 	sub	r17,r6,r17
    d12c:	4a07c83a 	sub	r3,r9,r8
    d130:	344d803a 	cmpltu	r6,r6,r17
    d134:	1991c83a 	sub	r8,r3,r6
    d138:	3825883a 	mov	r18,r7
    d13c:	003e5706 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    d140:	4984b03a 	or	r2,r9,r6
    d144:	10002e26 	beq	r2,zero,d200 <__adddf3+0x7e0>
    d148:	4004d0fa 	srli	r2,r8,3
    d14c:	8822d0fa 	srli	r17,r17,3
    d150:	4010977a 	slli	r8,r8,29
    d154:	10c0022c 	andhi	r3,r2,8
    d158:	4462b03a 	or	r17,r8,r17
    d15c:	18000826 	beq	r3,zero,d180 <__adddf3+0x760>
    d160:	4808d0fa 	srli	r4,r9,3
    d164:	20c0022c 	andhi	r3,r4,8
    d168:	1800051e 	bne	r3,zero,d180 <__adddf3+0x760>
    d16c:	300cd0fa 	srli	r6,r6,3
    d170:	4806977a 	slli	r3,r9,29
    d174:	2005883a 	mov	r2,r4
    d178:	3825883a 	mov	r18,r7
    d17c:	19a2b03a 	or	r17,r3,r6
    d180:	8810d77a 	srli	r8,r17,29
    d184:	100490fa 	slli	r2,r2,3
    d188:	882290fa 	slli	r17,r17,3
    d18c:	0401ffc4 	movi	r16,2047
    d190:	4090b03a 	or	r8,r8,r2
    d194:	003e4106 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    d198:	0141ffc4 	movi	r5,2047
    d19c:	117fc71e 	bne	r2,r5,d0bc <__alt_mem_onchip_memory2_0+0xf800c02c>
    d1a0:	4811883a 	mov	r8,r9
    d1a4:	3023883a 	mov	r17,r6
    d1a8:	1021883a 	mov	r16,r2
    d1ac:	003e3b06 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    d1b0:	10002f26 	beq	r2,zero,d270 <__adddf3+0x850>
    d1b4:	4984b03a 	or	r2,r9,r6
    d1b8:	10001126 	beq	r2,zero,d200 <__adddf3+0x7e0>
    d1bc:	4004d0fa 	srli	r2,r8,3
    d1c0:	8822d0fa 	srli	r17,r17,3
    d1c4:	4010977a 	slli	r8,r8,29
    d1c8:	10c0022c 	andhi	r3,r2,8
    d1cc:	4462b03a 	or	r17,r8,r17
    d1d0:	183feb26 	beq	r3,zero,d180 <__alt_mem_onchip_memory2_0+0xf800c0f0>
    d1d4:	4808d0fa 	srli	r4,r9,3
    d1d8:	20c0022c 	andhi	r3,r4,8
    d1dc:	183fe81e 	bne	r3,zero,d180 <__alt_mem_onchip_memory2_0+0xf800c0f0>
    d1e0:	300cd0fa 	srli	r6,r6,3
    d1e4:	4806977a 	slli	r3,r9,29
    d1e8:	2005883a 	mov	r2,r4
    d1ec:	19a2b03a 	or	r17,r3,r6
    d1f0:	003fe306 	br	d180 <__alt_mem_onchip_memory2_0+0xf800c0f0>
    d1f4:	0011883a 	mov	r8,zero
    d1f8:	0005883a 	mov	r2,zero
    d1fc:	003e3f06 	br	cafc <__alt_mem_onchip_memory2_0+0xf800ba6c>
    d200:	0401ffc4 	movi	r16,2047
    d204:	003e2506 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    d208:	0013883a 	mov	r9,zero
    d20c:	003f8406 	br	d020 <__alt_mem_onchip_memory2_0+0xf800bf90>
    d210:	0005883a 	mov	r2,zero
    d214:	0007883a 	mov	r3,zero
    d218:	003e8906 	br	cc40 <__alt_mem_onchip_memory2_0+0xf800bbb0>
    d21c:	197ff804 	addi	r5,r3,-32
    d220:	01000804 	movi	r4,32
    d224:	414ad83a 	srl	r5,r8,r5
    d228:	19002426 	beq	r3,r4,d2bc <__adddf3+0x89c>
    d22c:	01001004 	movi	r4,64
    d230:	20c7c83a 	sub	r3,r4,r3
    d234:	40c6983a 	sll	r3,r8,r3
    d238:	1c46b03a 	or	r3,r3,r17
    d23c:	1806c03a 	cmpne	r3,r3,zero
    d240:	28e2b03a 	or	r17,r5,r3
    d244:	0007883a 	mov	r3,zero
    d248:	003f2306 	br	ced8 <__alt_mem_onchip_memory2_0+0xf800be48>
    d24c:	0007883a 	mov	r3,zero
    d250:	5811883a 	mov	r8,r11
    d254:	00bfffc4 	movi	r2,-1
    d258:	0401ffc4 	movi	r16,2047
    d25c:	003e7806 	br	cc40 <__alt_mem_onchip_memory2_0+0xf800bbb0>
    d260:	4462b03a 	or	r17,r8,r17
    d264:	8822c03a 	cmpne	r17,r17,zero
    d268:	0009883a 	mov	r4,zero
    d26c:	003fa006 	br	d0f0 <__alt_mem_onchip_memory2_0+0xf800c060>
    d270:	4811883a 	mov	r8,r9
    d274:	3023883a 	mov	r17,r6
    d278:	0401ffc4 	movi	r16,2047
    d27c:	003e0706 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    d280:	4811883a 	mov	r8,r9
    d284:	3023883a 	mov	r17,r6
    d288:	003e0406 	br	ca9c <__alt_mem_onchip_memory2_0+0xf800ba0c>
    d28c:	21fff804 	addi	r7,r4,-32
    d290:	01400804 	movi	r5,32
    d294:	41ced83a 	srl	r7,r8,r7
    d298:	21400a26 	beq	r4,r5,d2c4 <__adddf3+0x8a4>
    d29c:	01401004 	movi	r5,64
    d2a0:	2909c83a 	sub	r4,r5,r4
    d2a4:	4108983a 	sll	r4,r8,r4
    d2a8:	2448b03a 	or	r4,r4,r17
    d2ac:	2008c03a 	cmpne	r4,r4,zero
    d2b0:	3922b03a 	or	r17,r7,r4
    d2b4:	0009883a 	mov	r4,zero
    d2b8:	003f8d06 	br	d0f0 <__alt_mem_onchip_memory2_0+0xf800c060>
    d2bc:	0007883a 	mov	r3,zero
    d2c0:	003fdd06 	br	d238 <__alt_mem_onchip_memory2_0+0xf800c1a8>
    d2c4:	0009883a 	mov	r4,zero
    d2c8:	003ff706 	br	d2a8 <__alt_mem_onchip_memory2_0+0xf800c218>

0000d2cc <__divdf3>:
    d2cc:	defff004 	addi	sp,sp,-64
    d2d0:	dc800815 	stw	r18,32(sp)
    d2d4:	2824d53a 	srli	r18,r5,20
    d2d8:	dd800c15 	stw	r22,48(sp)
    d2dc:	282cd7fa 	srli	r22,r5,31
    d2e0:	dc000615 	stw	r16,24(sp)
    d2e4:	04000434 	movhi	r16,16
    d2e8:	843fffc4 	addi	r16,r16,-1
    d2ec:	dfc00f15 	stw	ra,60(sp)
    d2f0:	df000e15 	stw	fp,56(sp)
    d2f4:	ddc00d15 	stw	r23,52(sp)
    d2f8:	dd400b15 	stw	r21,44(sp)
    d2fc:	dd000a15 	stw	r20,40(sp)
    d300:	dcc00915 	stw	r19,36(sp)
    d304:	dc400715 	stw	r17,28(sp)
    d308:	9481ffcc 	andi	r18,r18,2047
    d30c:	2c20703a 	and	r16,r5,r16
    d310:	b2003fcc 	andi	r8,r22,255
    d314:	90006126 	beq	r18,zero,d49c <__divdf3+0x1d0>
    d318:	0081ffc4 	movi	r2,2047
    d31c:	202b883a 	mov	r21,r4
    d320:	90803726 	beq	r18,r2,d400 <__divdf3+0x134>
    d324:	80800434 	orhi	r2,r16,16
    d328:	100490fa 	slli	r2,r2,3
    d32c:	2020d77a 	srli	r16,r4,29
    d330:	202a90fa 	slli	r21,r4,3
    d334:	94bf0044 	addi	r18,r18,-1023
    d338:	80a0b03a 	or	r16,r16,r2
    d33c:	0013883a 	mov	r9,zero
    d340:	000b883a 	mov	r5,zero
    d344:	3806d53a 	srli	r3,r7,20
    d348:	382ed7fa 	srli	r23,r7,31
    d34c:	04400434 	movhi	r17,16
    d350:	8c7fffc4 	addi	r17,r17,-1
    d354:	18c1ffcc 	andi	r3,r3,2047
    d358:	3029883a 	mov	r20,r6
    d35c:	3c62703a 	and	r17,r7,r17
    d360:	bf003fcc 	andi	fp,r23,255
    d364:	18006e26 	beq	r3,zero,d520 <__divdf3+0x254>
    d368:	0081ffc4 	movi	r2,2047
    d36c:	18806626 	beq	r3,r2,d508 <__divdf3+0x23c>
    d370:	88800434 	orhi	r2,r17,16
    d374:	100490fa 	slli	r2,r2,3
    d378:	3022d77a 	srli	r17,r6,29
    d37c:	302890fa 	slli	r20,r6,3
    d380:	18ff0044 	addi	r3,r3,-1023
    d384:	88a2b03a 	or	r17,r17,r2
    d388:	000f883a 	mov	r7,zero
    d38c:	b5e6f03a 	xor	r19,r22,r23
    d390:	3a4cb03a 	or	r6,r7,r9
    d394:	008003c4 	movi	r2,15
    d398:	9809883a 	mov	r4,r19
    d39c:	90c7c83a 	sub	r3,r18,r3
    d3a0:	9cc03fcc 	andi	r19,r19,255
    d3a4:	11809636 	bltu	r2,r6,d600 <__divdf3+0x334>
    d3a8:	300c90ba 	slli	r6,r6,2
    d3ac:	00800074 	movhi	r2,1
    d3b0:	10b4f004 	addi	r2,r2,-11328
    d3b4:	308d883a 	add	r6,r6,r2
    d3b8:	30800017 	ldw	r2,0(r6)
    d3bc:	1000683a 	jmp	r2
    d3c0:	0000d600 	call	d60 <main+0x900>
    d3c4:	0000d438 	rdprs	zero,zero,848
    d3c8:	0000d5f0 	cmpltui	zero,zero,855
    d3cc:	0000d42c 	andhi	zero,zero,848
    d3d0:	0000d5f0 	cmpltui	zero,zero,855
    d3d4:	0000d5c4 	movi	zero,855
    d3d8:	0000d5f0 	cmpltui	zero,zero,855
    d3dc:	0000d42c 	andhi	zero,zero,848
    d3e0:	0000d438 	rdprs	zero,zero,848
    d3e4:	0000d438 	rdprs	zero,zero,848
    d3e8:	0000d5c4 	movi	zero,855
    d3ec:	0000d42c 	andhi	zero,zero,848
    d3f0:	0000d41c 	xori	zero,zero,848
    d3f4:	0000d41c 	xori	zero,zero,848
    d3f8:	0000d41c 	xori	zero,zero,848
    d3fc:	0000d988 	cmpgei	zero,zero,870
    d400:	2404b03a 	or	r2,r4,r16
    d404:	10006c1e 	bne	r2,zero,d5b8 <__divdf3+0x2ec>
    d408:	02400204 	movi	r9,8
    d40c:	0021883a 	mov	r16,zero
    d410:	002b883a 	mov	r21,zero
    d414:	01400084 	movi	r5,2
    d418:	003fca06 	br	d344 <__alt_mem_onchip_memory2_0+0xf800c2b4>
    d41c:	8023883a 	mov	r17,r16
    d420:	a829883a 	mov	r20,r21
    d424:	4039883a 	mov	fp,r8
    d428:	280f883a 	mov	r7,r5
    d42c:	00800084 	movi	r2,2
    d430:	3881601e 	bne	r7,r2,d9b4 <__divdf3+0x6e8>
    d434:	e027883a 	mov	r19,fp
    d438:	9900004c 	andi	r4,r19,1
    d43c:	0081ffc4 	movi	r2,2047
    d440:	0021883a 	mov	r16,zero
    d444:	002b883a 	mov	r21,zero
    d448:	1004953a 	slli	r2,r2,20
    d44c:	20c03fcc 	andi	r3,r4,255
    d450:	01400434 	movhi	r5,16
    d454:	297fffc4 	addi	r5,r5,-1
    d458:	180697fa 	slli	r3,r3,31
    d45c:	8160703a 	and	r16,r16,r5
    d460:	80a0b03a 	or	r16,r16,r2
    d464:	80c6b03a 	or	r3,r16,r3
    d468:	a805883a 	mov	r2,r21
    d46c:	dfc00f17 	ldw	ra,60(sp)
    d470:	df000e17 	ldw	fp,56(sp)
    d474:	ddc00d17 	ldw	r23,52(sp)
    d478:	dd800c17 	ldw	r22,48(sp)
    d47c:	dd400b17 	ldw	r21,44(sp)
    d480:	dd000a17 	ldw	r20,40(sp)
    d484:	dcc00917 	ldw	r19,36(sp)
    d488:	dc800817 	ldw	r18,32(sp)
    d48c:	dc400717 	ldw	r17,28(sp)
    d490:	dc000617 	ldw	r16,24(sp)
    d494:	dec01004 	addi	sp,sp,64
    d498:	f800283a 	ret
    d49c:	2404b03a 	or	r2,r4,r16
    d4a0:	2023883a 	mov	r17,r4
    d4a4:	10003f26 	beq	r2,zero,d5a4 <__divdf3+0x2d8>
    d4a8:	80015e26 	beq	r16,zero,da24 <__divdf3+0x758>
    d4ac:	8009883a 	mov	r4,r16
    d4b0:	d9800215 	stw	r6,8(sp)
    d4b4:	d9c00515 	stw	r7,20(sp)
    d4b8:	da000415 	stw	r8,16(sp)
    d4bc:	000f2600 	call	f260 <__clzsi2>
    d4c0:	d9800217 	ldw	r6,8(sp)
    d4c4:	d9c00517 	ldw	r7,20(sp)
    d4c8:	da000417 	ldw	r8,16(sp)
    d4cc:	113ffd44 	addi	r4,r2,-11
    d4d0:	00c00704 	movi	r3,28
    d4d4:	19014f16 	blt	r3,r4,da14 <__divdf3+0x748>
    d4d8:	00c00744 	movi	r3,29
    d4dc:	157ffe04 	addi	r21,r2,-8
    d4e0:	1907c83a 	sub	r3,r3,r4
    d4e4:	8560983a 	sll	r16,r16,r21
    d4e8:	88c6d83a 	srl	r3,r17,r3
    d4ec:	8d6a983a 	sll	r21,r17,r21
    d4f0:	1c20b03a 	or	r16,r3,r16
    d4f4:	1080fcc4 	addi	r2,r2,1011
    d4f8:	00a5c83a 	sub	r18,zero,r2
    d4fc:	0013883a 	mov	r9,zero
    d500:	000b883a 	mov	r5,zero
    d504:	003f8f06 	br	d344 <__alt_mem_onchip_memory2_0+0xf800c2b4>
    d508:	3444b03a 	or	r2,r6,r17
    d50c:	1000231e 	bne	r2,zero,d59c <__divdf3+0x2d0>
    d510:	0023883a 	mov	r17,zero
    d514:	0029883a 	mov	r20,zero
    d518:	01c00084 	movi	r7,2
    d51c:	003f9b06 	br	d38c <__alt_mem_onchip_memory2_0+0xf800c2fc>
    d520:	3444b03a 	or	r2,r6,r17
    d524:	10001926 	beq	r2,zero,d58c <__divdf3+0x2c0>
    d528:	88014b26 	beq	r17,zero,da58 <__divdf3+0x78c>
    d52c:	8809883a 	mov	r4,r17
    d530:	d9400115 	stw	r5,4(sp)
    d534:	d9800215 	stw	r6,8(sp)
    d538:	da000415 	stw	r8,16(sp)
    d53c:	da400315 	stw	r9,12(sp)
    d540:	000f2600 	call	f260 <__clzsi2>
    d544:	d9400117 	ldw	r5,4(sp)
    d548:	d9800217 	ldw	r6,8(sp)
    d54c:	da000417 	ldw	r8,16(sp)
    d550:	da400317 	ldw	r9,12(sp)
    d554:	113ffd44 	addi	r4,r2,-11
    d558:	00c00704 	movi	r3,28
    d55c:	19013a16 	blt	r3,r4,da48 <__divdf3+0x77c>
    d560:	00c00744 	movi	r3,29
    d564:	153ffe04 	addi	r20,r2,-8
    d568:	1907c83a 	sub	r3,r3,r4
    d56c:	8d22983a 	sll	r17,r17,r20
    d570:	30c6d83a 	srl	r3,r6,r3
    d574:	3528983a 	sll	r20,r6,r20
    d578:	1c62b03a 	or	r17,r3,r17
    d57c:	1080fcc4 	addi	r2,r2,1011
    d580:	0087c83a 	sub	r3,zero,r2
    d584:	000f883a 	mov	r7,zero
    d588:	003f8006 	br	d38c <__alt_mem_onchip_memory2_0+0xf800c2fc>
    d58c:	0023883a 	mov	r17,zero
    d590:	0029883a 	mov	r20,zero
    d594:	01c00044 	movi	r7,1
    d598:	003f7c06 	br	d38c <__alt_mem_onchip_memory2_0+0xf800c2fc>
    d59c:	01c000c4 	movi	r7,3
    d5a0:	003f7a06 	br	d38c <__alt_mem_onchip_memory2_0+0xf800c2fc>
    d5a4:	02400104 	movi	r9,4
    d5a8:	0021883a 	mov	r16,zero
    d5ac:	002b883a 	mov	r21,zero
    d5b0:	01400044 	movi	r5,1
    d5b4:	003f6306 	br	d344 <__alt_mem_onchip_memory2_0+0xf800c2b4>
    d5b8:	02400304 	movi	r9,12
    d5bc:	014000c4 	movi	r5,3
    d5c0:	003f6006 	br	d344 <__alt_mem_onchip_memory2_0+0xf800c2b4>
    d5c4:	04000434 	movhi	r16,16
    d5c8:	0009883a 	mov	r4,zero
    d5cc:	843fffc4 	addi	r16,r16,-1
    d5d0:	057fffc4 	movi	r21,-1
    d5d4:	0081ffc4 	movi	r2,2047
    d5d8:	003f9b06 	br	d448 <__alt_mem_onchip_memory2_0+0xf800c3b8>
    d5dc:	00c00044 	movi	r3,1
    d5e0:	1887c83a 	sub	r3,r3,r2
    d5e4:	01000e04 	movi	r4,56
    d5e8:	20c1530e 	bge	r4,r3,db38 <__divdf3+0x86c>
    d5ec:	9900004c 	andi	r4,r19,1
    d5f0:	0005883a 	mov	r2,zero
    d5f4:	0021883a 	mov	r16,zero
    d5f8:	002b883a 	mov	r21,zero
    d5fc:	003f9206 	br	d448 <__alt_mem_onchip_memory2_0+0xf800c3b8>
    d600:	8c012e36 	bltu	r17,r16,dabc <__divdf3+0x7f0>
    d604:	84412c26 	beq	r16,r17,dab8 <__divdf3+0x7ec>
    d608:	a82f883a 	mov	r23,r21
    d60c:	18ffffc4 	addi	r3,r3,-1
    d610:	002b883a 	mov	r21,zero
    d614:	a004d63a 	srli	r2,r20,24
    d618:	8822923a 	slli	r17,r17,8
    d61c:	a028923a 	slli	r20,r20,8
    d620:	8009883a 	mov	r4,r16
    d624:	88acb03a 	or	r22,r17,r2
    d628:	dd000015 	stw	r20,0(sp)
    d62c:	b028d43a 	srli	r20,r22,16
    d630:	d8c00215 	stw	r3,8(sp)
    d634:	b4bfffcc 	andi	r18,r22,65535
    d638:	a00b883a 	mov	r5,r20
    d63c:	000c93c0 	call	c93c <__udivsi3>
    d640:	100b883a 	mov	r5,r2
    d644:	9009883a 	mov	r4,r18
    d648:	1023883a 	mov	r17,r2
    d64c:	000c9f80 	call	c9f8 <__mulsi3>
    d650:	8009883a 	mov	r4,r16
    d654:	a00b883a 	mov	r5,r20
    d658:	1039883a 	mov	fp,r2
    d65c:	000c9a00 	call	c9a0 <__umodsi3>
    d660:	1004943a 	slli	r2,r2,16
    d664:	b808d43a 	srli	r4,r23,16
    d668:	d8c00217 	ldw	r3,8(sp)
    d66c:	2084b03a 	or	r2,r4,r2
    d670:	1700062e 	bgeu	r2,fp,d68c <__divdf3+0x3c0>
    d674:	1585883a 	add	r2,r2,r22
    d678:	893fffc4 	addi	r4,r17,-1
    d67c:	15811d36 	bltu	r2,r22,daf4 <__divdf3+0x828>
    d680:	17011c2e 	bgeu	r2,fp,daf4 <__divdf3+0x828>
    d684:	8c7fff84 	addi	r17,r17,-2
    d688:	1585883a 	add	r2,r2,r22
    d68c:	1739c83a 	sub	fp,r2,fp
    d690:	a00b883a 	mov	r5,r20
    d694:	e009883a 	mov	r4,fp
    d698:	d8c00215 	stw	r3,8(sp)
    d69c:	000c93c0 	call	c93c <__udivsi3>
    d6a0:	100b883a 	mov	r5,r2
    d6a4:	9009883a 	mov	r4,r18
    d6a8:	1021883a 	mov	r16,r2
    d6ac:	000c9f80 	call	c9f8 <__mulsi3>
    d6b0:	a00b883a 	mov	r5,r20
    d6b4:	e009883a 	mov	r4,fp
    d6b8:	d8800415 	stw	r2,16(sp)
    d6bc:	000c9a00 	call	c9a0 <__umodsi3>
    d6c0:	1004943a 	slli	r2,r2,16
    d6c4:	da000417 	ldw	r8,16(sp)
    d6c8:	bdffffcc 	andi	r23,r23,65535
    d6cc:	b884b03a 	or	r2,r23,r2
    d6d0:	d8c00217 	ldw	r3,8(sp)
    d6d4:	1200062e 	bgeu	r2,r8,d6f0 <__divdf3+0x424>
    d6d8:	1585883a 	add	r2,r2,r22
    d6dc:	813fffc4 	addi	r4,r16,-1
    d6e0:	15810236 	bltu	r2,r22,daec <__divdf3+0x820>
    d6e4:	1201012e 	bgeu	r2,r8,daec <__divdf3+0x820>
    d6e8:	843fff84 	addi	r16,r16,-2
    d6ec:	1585883a 	add	r2,r2,r22
    d6f0:	8822943a 	slli	r17,r17,16
    d6f4:	d9800017 	ldw	r6,0(sp)
    d6f8:	1211c83a 	sub	r8,r2,r8
    d6fc:	8c22b03a 	or	r17,r17,r16
    d700:	373fffcc 	andi	fp,r6,65535
    d704:	8abfffcc 	andi	r10,r17,65535
    d708:	8820d43a 	srli	r16,r17,16
    d70c:	5009883a 	mov	r4,r10
    d710:	e00b883a 	mov	r5,fp
    d714:	302ed43a 	srli	r23,r6,16
    d718:	d8c00215 	stw	r3,8(sp)
    d71c:	da000415 	stw	r8,16(sp)
    d720:	da800115 	stw	r10,4(sp)
    d724:	000c9f80 	call	c9f8 <__mulsi3>
    d728:	800b883a 	mov	r5,r16
    d72c:	e009883a 	mov	r4,fp
    d730:	d8800515 	stw	r2,20(sp)
    d734:	000c9f80 	call	c9f8 <__mulsi3>
    d738:	8009883a 	mov	r4,r16
    d73c:	b80b883a 	mov	r5,r23
    d740:	d8800315 	stw	r2,12(sp)
    d744:	000c9f80 	call	c9f8 <__mulsi3>
    d748:	da800117 	ldw	r10,4(sp)
    d74c:	b80b883a 	mov	r5,r23
    d750:	1021883a 	mov	r16,r2
    d754:	5009883a 	mov	r4,r10
    d758:	000c9f80 	call	c9f8 <__mulsi3>
    d75c:	d9c00517 	ldw	r7,20(sp)
    d760:	da400317 	ldw	r9,12(sp)
    d764:	d8c00217 	ldw	r3,8(sp)
    d768:	3808d43a 	srli	r4,r7,16
    d76c:	1245883a 	add	r2,r2,r9
    d770:	da000417 	ldw	r8,16(sp)
    d774:	2085883a 	add	r2,r4,r2
    d778:	1240022e 	bgeu	r2,r9,d784 <__divdf3+0x4b8>
    d77c:	01000074 	movhi	r4,1
    d780:	8121883a 	add	r16,r16,r4
    d784:	1008d43a 	srli	r4,r2,16
    d788:	1004943a 	slli	r2,r2,16
    d78c:	39ffffcc 	andi	r7,r7,65535
    d790:	2409883a 	add	r4,r4,r16
    d794:	11c5883a 	add	r2,r2,r7
    d798:	4100bb36 	bltu	r8,r4,da88 <__divdf3+0x7bc>
    d79c:	4100d726 	beq	r8,r4,dafc <__divdf3+0x830>
    d7a0:	4109c83a 	sub	r4,r8,r4
    d7a4:	a8a1c83a 	sub	r16,r21,r2
    d7a8:	ac2b803a 	cmpltu	r21,r21,r16
    d7ac:	256bc83a 	sub	r21,r4,r21
    d7b0:	b540d926 	beq	r22,r21,db18 <__divdf3+0x84c>
    d7b4:	a00b883a 	mov	r5,r20
    d7b8:	a809883a 	mov	r4,r21
    d7bc:	d8c00215 	stw	r3,8(sp)
    d7c0:	000c93c0 	call	c93c <__udivsi3>
    d7c4:	100b883a 	mov	r5,r2
    d7c8:	9009883a 	mov	r4,r18
    d7cc:	d8800515 	stw	r2,20(sp)
    d7d0:	000c9f80 	call	c9f8 <__mulsi3>
    d7d4:	a809883a 	mov	r4,r21
    d7d8:	a00b883a 	mov	r5,r20
    d7dc:	d8800415 	stw	r2,16(sp)
    d7e0:	000c9a00 	call	c9a0 <__umodsi3>
    d7e4:	1004943a 	slli	r2,r2,16
    d7e8:	8008d43a 	srli	r4,r16,16
    d7ec:	da000417 	ldw	r8,16(sp)
    d7f0:	d8c00217 	ldw	r3,8(sp)
    d7f4:	2084b03a 	or	r2,r4,r2
    d7f8:	d9c00517 	ldw	r7,20(sp)
    d7fc:	1200062e 	bgeu	r2,r8,d818 <__divdf3+0x54c>
    d800:	1585883a 	add	r2,r2,r22
    d804:	393fffc4 	addi	r4,r7,-1
    d808:	1580c536 	bltu	r2,r22,db20 <__divdf3+0x854>
    d80c:	1200c42e 	bgeu	r2,r8,db20 <__divdf3+0x854>
    d810:	39ffff84 	addi	r7,r7,-2
    d814:	1585883a 	add	r2,r2,r22
    d818:	122bc83a 	sub	r21,r2,r8
    d81c:	a00b883a 	mov	r5,r20
    d820:	a809883a 	mov	r4,r21
    d824:	d8c00215 	stw	r3,8(sp)
    d828:	d9c00515 	stw	r7,20(sp)
    d82c:	000c93c0 	call	c93c <__udivsi3>
    d830:	9009883a 	mov	r4,r18
    d834:	100b883a 	mov	r5,r2
    d838:	d8800415 	stw	r2,16(sp)
    d83c:	000c9f80 	call	c9f8 <__mulsi3>
    d840:	a809883a 	mov	r4,r21
    d844:	a00b883a 	mov	r5,r20
    d848:	1025883a 	mov	r18,r2
    d84c:	000c9a00 	call	c9a0 <__umodsi3>
    d850:	1004943a 	slli	r2,r2,16
    d854:	813fffcc 	andi	r4,r16,65535
    d858:	d8c00217 	ldw	r3,8(sp)
    d85c:	20a0b03a 	or	r16,r4,r2
    d860:	d9c00517 	ldw	r7,20(sp)
    d864:	da000417 	ldw	r8,16(sp)
    d868:	8480062e 	bgeu	r16,r18,d884 <__divdf3+0x5b8>
    d86c:	85a1883a 	add	r16,r16,r22
    d870:	40bfffc4 	addi	r2,r8,-1
    d874:	8580ac36 	bltu	r16,r22,db28 <__divdf3+0x85c>
    d878:	8480ab2e 	bgeu	r16,r18,db28 <__divdf3+0x85c>
    d87c:	423fff84 	addi	r8,r8,-2
    d880:	85a1883a 	add	r16,r16,r22
    d884:	3804943a 	slli	r2,r7,16
    d888:	84a1c83a 	sub	r16,r16,r18
    d88c:	e009883a 	mov	r4,fp
    d890:	1228b03a 	or	r20,r2,r8
    d894:	a1ffffcc 	andi	r7,r20,65535
    d898:	a024d43a 	srli	r18,r20,16
    d89c:	380b883a 	mov	r5,r7
    d8a0:	d8c00215 	stw	r3,8(sp)
    d8a4:	d9c00515 	stw	r7,20(sp)
    d8a8:	000c9f80 	call	c9f8 <__mulsi3>
    d8ac:	900b883a 	mov	r5,r18
    d8b0:	e009883a 	mov	r4,fp
    d8b4:	102b883a 	mov	r21,r2
    d8b8:	000c9f80 	call	c9f8 <__mulsi3>
    d8bc:	900b883a 	mov	r5,r18
    d8c0:	b809883a 	mov	r4,r23
    d8c4:	1039883a 	mov	fp,r2
    d8c8:	000c9f80 	call	c9f8 <__mulsi3>
    d8cc:	d9c00517 	ldw	r7,20(sp)
    d8d0:	b80b883a 	mov	r5,r23
    d8d4:	1025883a 	mov	r18,r2
    d8d8:	3809883a 	mov	r4,r7
    d8dc:	000c9f80 	call	c9f8 <__mulsi3>
    d8e0:	a808d43a 	srli	r4,r21,16
    d8e4:	1705883a 	add	r2,r2,fp
    d8e8:	d8c00217 	ldw	r3,8(sp)
    d8ec:	2085883a 	add	r2,r4,r2
    d8f0:	1700022e 	bgeu	r2,fp,d8fc <__divdf3+0x630>
    d8f4:	01000074 	movhi	r4,1
    d8f8:	9125883a 	add	r18,r18,r4
    d8fc:	1008d43a 	srli	r4,r2,16
    d900:	1004943a 	slli	r2,r2,16
    d904:	ad7fffcc 	andi	r21,r21,65535
    d908:	2489883a 	add	r4,r4,r18
    d90c:	1545883a 	add	r2,r2,r21
    d910:	81003836 	bltu	r16,r4,d9f4 <__divdf3+0x728>
    d914:	81003626 	beq	r16,r4,d9f0 <__divdf3+0x724>
    d918:	a5000054 	ori	r20,r20,1
    d91c:	1880ffc4 	addi	r2,r3,1023
    d920:	00bf2e0e 	bge	zero,r2,d5dc <__alt_mem_onchip_memory2_0+0xf800c54c>
    d924:	a10001cc 	andi	r4,r20,7
    d928:	20000726 	beq	r4,zero,d948 <__divdf3+0x67c>
    d92c:	a10003cc 	andi	r4,r20,15
    d930:	01400104 	movi	r5,4
    d934:	21400426 	beq	r4,r5,d948 <__divdf3+0x67c>
    d938:	a149883a 	add	r4,r20,r5
    d93c:	2529803a 	cmpltu	r20,r4,r20
    d940:	8d23883a 	add	r17,r17,r20
    d944:	2029883a 	mov	r20,r4
    d948:	8900402c 	andhi	r4,r17,256
    d94c:	20000426 	beq	r4,zero,d960 <__divdf3+0x694>
    d950:	18810004 	addi	r2,r3,1024
    d954:	00ffc034 	movhi	r3,65280
    d958:	18ffffc4 	addi	r3,r3,-1
    d95c:	88e2703a 	and	r17,r17,r3
    d960:	00c1ff84 	movi	r3,2046
    d964:	18beb416 	blt	r3,r2,d438 <__alt_mem_onchip_memory2_0+0xf800c3a8>
    d968:	a028d0fa 	srli	r20,r20,3
    d96c:	882a977a 	slli	r21,r17,29
    d970:	8820927a 	slli	r16,r17,9
    d974:	1081ffcc 	andi	r2,r2,2047
    d978:	ad2ab03a 	or	r21,r21,r20
    d97c:	8020d33a 	srli	r16,r16,12
    d980:	9900004c 	andi	r4,r19,1
    d984:	003eb006 	br	d448 <__alt_mem_onchip_memory2_0+0xf800c3b8>
    d988:	8080022c 	andhi	r2,r16,8
    d98c:	10001226 	beq	r2,zero,d9d8 <__divdf3+0x70c>
    d990:	8880022c 	andhi	r2,r17,8
    d994:	1000101e 	bne	r2,zero,d9d8 <__divdf3+0x70c>
    d998:	00800434 	movhi	r2,16
    d99c:	8c000234 	orhi	r16,r17,8
    d9a0:	10bfffc4 	addi	r2,r2,-1
    d9a4:	b809883a 	mov	r4,r23
    d9a8:	80a0703a 	and	r16,r16,r2
    d9ac:	a02b883a 	mov	r21,r20
    d9b0:	003f0806 	br	d5d4 <__alt_mem_onchip_memory2_0+0xf800c544>
    d9b4:	008000c4 	movi	r2,3
    d9b8:	3880b126 	beq	r7,r2,dc80 <__divdf3+0x9b4>
    d9bc:	00800044 	movi	r2,1
    d9c0:	38805b1e 	bne	r7,r2,db30 <__divdf3+0x864>
    d9c4:	e009883a 	mov	r4,fp
    d9c8:	0005883a 	mov	r2,zero
    d9cc:	0021883a 	mov	r16,zero
    d9d0:	002b883a 	mov	r21,zero
    d9d4:	003e9c06 	br	d448 <__alt_mem_onchip_memory2_0+0xf800c3b8>
    d9d8:	00800434 	movhi	r2,16
    d9dc:	84000234 	orhi	r16,r16,8
    d9e0:	10bfffc4 	addi	r2,r2,-1
    d9e4:	b009883a 	mov	r4,r22
    d9e8:	80a0703a 	and	r16,r16,r2
    d9ec:	003ef906 	br	d5d4 <__alt_mem_onchip_memory2_0+0xf800c544>
    d9f0:	103fca26 	beq	r2,zero,d91c <__alt_mem_onchip_memory2_0+0xf800c88c>
    d9f4:	b421883a 	add	r16,r22,r16
    d9f8:	a17fffc4 	addi	r5,r20,-1
    d9fc:	8580422e 	bgeu	r16,r22,db08 <__divdf3+0x83c>
    da00:	2829883a 	mov	r20,r5
    da04:	813fc41e 	bne	r16,r4,d918 <__alt_mem_onchip_memory2_0+0xf800c888>
    da08:	d9800017 	ldw	r6,0(sp)
    da0c:	30bfc21e 	bne	r6,r2,d918 <__alt_mem_onchip_memory2_0+0xf800c888>
    da10:	003fc206 	br	d91c <__alt_mem_onchip_memory2_0+0xf800c88c>
    da14:	143ff604 	addi	r16,r2,-40
    da18:	8c20983a 	sll	r16,r17,r16
    da1c:	002b883a 	mov	r21,zero
    da20:	003eb406 	br	d4f4 <__alt_mem_onchip_memory2_0+0xf800c464>
    da24:	d9800215 	stw	r6,8(sp)
    da28:	d9c00515 	stw	r7,20(sp)
    da2c:	da000415 	stw	r8,16(sp)
    da30:	000f2600 	call	f260 <__clzsi2>
    da34:	10800804 	addi	r2,r2,32
    da38:	da000417 	ldw	r8,16(sp)
    da3c:	d9c00517 	ldw	r7,20(sp)
    da40:	d9800217 	ldw	r6,8(sp)
    da44:	003ea106 	br	d4cc <__alt_mem_onchip_memory2_0+0xf800c43c>
    da48:	147ff604 	addi	r17,r2,-40
    da4c:	3462983a 	sll	r17,r6,r17
    da50:	0029883a 	mov	r20,zero
    da54:	003ec906 	br	d57c <__alt_mem_onchip_memory2_0+0xf800c4ec>
    da58:	3009883a 	mov	r4,r6
    da5c:	d9400115 	stw	r5,4(sp)
    da60:	d9800215 	stw	r6,8(sp)
    da64:	da000415 	stw	r8,16(sp)
    da68:	da400315 	stw	r9,12(sp)
    da6c:	000f2600 	call	f260 <__clzsi2>
    da70:	10800804 	addi	r2,r2,32
    da74:	da400317 	ldw	r9,12(sp)
    da78:	da000417 	ldw	r8,16(sp)
    da7c:	d9800217 	ldw	r6,8(sp)
    da80:	d9400117 	ldw	r5,4(sp)
    da84:	003eb306 	br	d554 <__alt_mem_onchip_memory2_0+0xf800c4c4>
    da88:	d9800017 	ldw	r6,0(sp)
    da8c:	a9ab883a 	add	r21,r21,r6
    da90:	a98b803a 	cmpltu	r5,r21,r6
    da94:	2d8b883a 	add	r5,r5,r22
    da98:	2a11883a 	add	r8,r5,r8
    da9c:	897fffc4 	addi	r5,r17,-1
    daa0:	b2000c2e 	bgeu	r22,r8,dad4 <__divdf3+0x808>
    daa4:	41003f36 	bltu	r8,r4,dba4 <__divdf3+0x8d8>
    daa8:	22006c26 	beq	r4,r8,dc5c <__divdf3+0x990>
    daac:	4109c83a 	sub	r4,r8,r4
    dab0:	2823883a 	mov	r17,r5
    dab4:	003f3b06 	br	d7a4 <__alt_mem_onchip_memory2_0+0xf800c714>
    dab8:	ad3ed336 	bltu	r21,r20,d608 <__alt_mem_onchip_memory2_0+0xf800c578>
    dabc:	a804d07a 	srli	r2,r21,1
    dac0:	802e97fa 	slli	r23,r16,31
    dac4:	a82a97fa 	slli	r21,r21,31
    dac8:	8020d07a 	srli	r16,r16,1
    dacc:	b8aeb03a 	or	r23,r23,r2
    dad0:	003ed006 	br	d614 <__alt_mem_onchip_memory2_0+0xf800c584>
    dad4:	b23ff51e 	bne	r22,r8,daac <__alt_mem_onchip_memory2_0+0xf800ca1c>
    dad8:	d9800017 	ldw	r6,0(sp)
    dadc:	a9bff12e 	bgeu	r21,r6,daa4 <__alt_mem_onchip_memory2_0+0xf800ca14>
    dae0:	b109c83a 	sub	r4,r22,r4
    dae4:	2823883a 	mov	r17,r5
    dae8:	003f2e06 	br	d7a4 <__alt_mem_onchip_memory2_0+0xf800c714>
    daec:	2021883a 	mov	r16,r4
    daf0:	003eff06 	br	d6f0 <__alt_mem_onchip_memory2_0+0xf800c660>
    daf4:	2023883a 	mov	r17,r4
    daf8:	003ee406 	br	d68c <__alt_mem_onchip_memory2_0+0xf800c5fc>
    dafc:	a8bfe236 	bltu	r21,r2,da88 <__alt_mem_onchip_memory2_0+0xf800c9f8>
    db00:	0009883a 	mov	r4,zero
    db04:	003f2706 	br	d7a4 <__alt_mem_onchip_memory2_0+0xf800c714>
    db08:	81002d36 	bltu	r16,r4,dbc0 <__divdf3+0x8f4>
    db0c:	24005626 	beq	r4,r16,dc68 <__divdf3+0x99c>
    db10:	2829883a 	mov	r20,r5
    db14:	003f8006 	br	d918 <__alt_mem_onchip_memory2_0+0xf800c888>
    db18:	053fffc4 	movi	r20,-1
    db1c:	003f7f06 	br	d91c <__alt_mem_onchip_memory2_0+0xf800c88c>
    db20:	200f883a 	mov	r7,r4
    db24:	003f3c06 	br	d818 <__alt_mem_onchip_memory2_0+0xf800c788>
    db28:	1011883a 	mov	r8,r2
    db2c:	003f5506 	br	d884 <__alt_mem_onchip_memory2_0+0xf800c7f4>
    db30:	e027883a 	mov	r19,fp
    db34:	003f7906 	br	d91c <__alt_mem_onchip_memory2_0+0xf800c88c>
    db38:	010007c4 	movi	r4,31
    db3c:	20c02816 	blt	r4,r3,dbe0 <__divdf3+0x914>
    db40:	00800804 	movi	r2,32
    db44:	10c5c83a 	sub	r2,r2,r3
    db48:	888a983a 	sll	r5,r17,r2
    db4c:	a0c8d83a 	srl	r4,r20,r3
    db50:	a084983a 	sll	r2,r20,r2
    db54:	88e2d83a 	srl	r17,r17,r3
    db58:	2906b03a 	or	r3,r5,r4
    db5c:	1004c03a 	cmpne	r2,r2,zero
    db60:	1886b03a 	or	r3,r3,r2
    db64:	188001cc 	andi	r2,r3,7
    db68:	10000726 	beq	r2,zero,db88 <__divdf3+0x8bc>
    db6c:	188003cc 	andi	r2,r3,15
    db70:	01000104 	movi	r4,4
    db74:	11000426 	beq	r2,r4,db88 <__divdf3+0x8bc>
    db78:	1805883a 	mov	r2,r3
    db7c:	10c00104 	addi	r3,r2,4
    db80:	1885803a 	cmpltu	r2,r3,r2
    db84:	88a3883a 	add	r17,r17,r2
    db88:	8880202c 	andhi	r2,r17,128
    db8c:	10002926 	beq	r2,zero,dc34 <__divdf3+0x968>
    db90:	9900004c 	andi	r4,r19,1
    db94:	00800044 	movi	r2,1
    db98:	0021883a 	mov	r16,zero
    db9c:	002b883a 	mov	r21,zero
    dba0:	003e2906 	br	d448 <__alt_mem_onchip_memory2_0+0xf800c3b8>
    dba4:	d9800017 	ldw	r6,0(sp)
    dba8:	8c7fff84 	addi	r17,r17,-2
    dbac:	a9ab883a 	add	r21,r21,r6
    dbb0:	a98b803a 	cmpltu	r5,r21,r6
    dbb4:	2d8b883a 	add	r5,r5,r22
    dbb8:	2a11883a 	add	r8,r5,r8
    dbbc:	003ef806 	br	d7a0 <__alt_mem_onchip_memory2_0+0xf800c710>
    dbc0:	d9800017 	ldw	r6,0(sp)
    dbc4:	318f883a 	add	r7,r6,r6
    dbc8:	398b803a 	cmpltu	r5,r7,r6
    dbcc:	2d8d883a 	add	r6,r5,r22
    dbd0:	81a1883a 	add	r16,r16,r6
    dbd4:	a17fff84 	addi	r5,r20,-2
    dbd8:	d9c00015 	stw	r7,0(sp)
    dbdc:	003f8806 	br	da00 <__alt_mem_onchip_memory2_0+0xf800c970>
    dbe0:	013ff844 	movi	r4,-31
    dbe4:	2085c83a 	sub	r2,r4,r2
    dbe8:	8888d83a 	srl	r4,r17,r2
    dbec:	00800804 	movi	r2,32
    dbf0:	18802126 	beq	r3,r2,dc78 <__divdf3+0x9ac>
    dbf4:	04001004 	movi	r16,64
    dbf8:	80c7c83a 	sub	r3,r16,r3
    dbfc:	88e0983a 	sll	r16,r17,r3
    dc00:	8504b03a 	or	r2,r16,r20
    dc04:	1004c03a 	cmpne	r2,r2,zero
    dc08:	2084b03a 	or	r2,r4,r2
    dc0c:	144001cc 	andi	r17,r2,7
    dc10:	88000d1e 	bne	r17,zero,dc48 <__divdf3+0x97c>
    dc14:	0021883a 	mov	r16,zero
    dc18:	102ad0fa 	srli	r21,r2,3
    dc1c:	9900004c 	andi	r4,r19,1
    dc20:	0005883a 	mov	r2,zero
    dc24:	ac6ab03a 	or	r21,r21,r17
    dc28:	003e0706 	br	d448 <__alt_mem_onchip_memory2_0+0xf800c3b8>
    dc2c:	1007883a 	mov	r3,r2
    dc30:	0023883a 	mov	r17,zero
    dc34:	8820927a 	slli	r16,r17,9
    dc38:	1805883a 	mov	r2,r3
    dc3c:	8822977a 	slli	r17,r17,29
    dc40:	8020d33a 	srli	r16,r16,12
    dc44:	003ff406 	br	dc18 <__alt_mem_onchip_memory2_0+0xf800cb88>
    dc48:	10c003cc 	andi	r3,r2,15
    dc4c:	01000104 	movi	r4,4
    dc50:	193ff626 	beq	r3,r4,dc2c <__alt_mem_onchip_memory2_0+0xf800cb9c>
    dc54:	0023883a 	mov	r17,zero
    dc58:	003fc806 	br	db7c <__alt_mem_onchip_memory2_0+0xf800caec>
    dc5c:	a8bfd136 	bltu	r21,r2,dba4 <__alt_mem_onchip_memory2_0+0xf800cb14>
    dc60:	2823883a 	mov	r17,r5
    dc64:	003fa606 	br	db00 <__alt_mem_onchip_memory2_0+0xf800ca70>
    dc68:	d9800017 	ldw	r6,0(sp)
    dc6c:	30bfd436 	bltu	r6,r2,dbc0 <__alt_mem_onchip_memory2_0+0xf800cb30>
    dc70:	2829883a 	mov	r20,r5
    dc74:	003f6406 	br	da08 <__alt_mem_onchip_memory2_0+0xf800c978>
    dc78:	0021883a 	mov	r16,zero
    dc7c:	003fe006 	br	dc00 <__alt_mem_onchip_memory2_0+0xf800cb70>
    dc80:	00800434 	movhi	r2,16
    dc84:	8c000234 	orhi	r16,r17,8
    dc88:	10bfffc4 	addi	r2,r2,-1
    dc8c:	e009883a 	mov	r4,fp
    dc90:	80a0703a 	and	r16,r16,r2
    dc94:	a02b883a 	mov	r21,r20
    dc98:	003e4e06 	br	d5d4 <__alt_mem_onchip_memory2_0+0xf800c544>

0000dc9c <__eqdf2>:
    dc9c:	2804d53a 	srli	r2,r5,20
    dca0:	3806d53a 	srli	r3,r7,20
    dca4:	02000434 	movhi	r8,16
    dca8:	423fffc4 	addi	r8,r8,-1
    dcac:	1081ffcc 	andi	r2,r2,2047
    dcb0:	0281ffc4 	movi	r10,2047
    dcb4:	2a12703a 	and	r9,r5,r8
    dcb8:	18c1ffcc 	andi	r3,r3,2047
    dcbc:	3a10703a 	and	r8,r7,r8
    dcc0:	280ad7fa 	srli	r5,r5,31
    dcc4:	380ed7fa 	srli	r7,r7,31
    dcc8:	12801026 	beq	r2,r10,dd0c <__eqdf2+0x70>
    dccc:	0281ffc4 	movi	r10,2047
    dcd0:	1a800a26 	beq	r3,r10,dcfc <__eqdf2+0x60>
    dcd4:	10c00226 	beq	r2,r3,dce0 <__eqdf2+0x44>
    dcd8:	00800044 	movi	r2,1
    dcdc:	f800283a 	ret
    dce0:	4a3ffd1e 	bne	r9,r8,dcd8 <__alt_mem_onchip_memory2_0+0xf800cc48>
    dce4:	21bffc1e 	bne	r4,r6,dcd8 <__alt_mem_onchip_memory2_0+0xf800cc48>
    dce8:	29c00c26 	beq	r5,r7,dd1c <__eqdf2+0x80>
    dcec:	103ffa1e 	bne	r2,zero,dcd8 <__alt_mem_onchip_memory2_0+0xf800cc48>
    dcf0:	2244b03a 	or	r2,r4,r9
    dcf4:	1004c03a 	cmpne	r2,r2,zero
    dcf8:	f800283a 	ret
    dcfc:	3214b03a 	or	r10,r6,r8
    dd00:	503ff426 	beq	r10,zero,dcd4 <__alt_mem_onchip_memory2_0+0xf800cc44>
    dd04:	00800044 	movi	r2,1
    dd08:	f800283a 	ret
    dd0c:	2254b03a 	or	r10,r4,r9
    dd10:	503fee26 	beq	r10,zero,dccc <__alt_mem_onchip_memory2_0+0xf800cc3c>
    dd14:	00800044 	movi	r2,1
    dd18:	f800283a 	ret
    dd1c:	0005883a 	mov	r2,zero
    dd20:	f800283a 	ret

0000dd24 <__gedf2>:
    dd24:	2804d53a 	srli	r2,r5,20
    dd28:	3806d53a 	srli	r3,r7,20
    dd2c:	02000434 	movhi	r8,16
    dd30:	423fffc4 	addi	r8,r8,-1
    dd34:	1081ffcc 	andi	r2,r2,2047
    dd38:	0241ffc4 	movi	r9,2047
    dd3c:	2a14703a 	and	r10,r5,r8
    dd40:	18c1ffcc 	andi	r3,r3,2047
    dd44:	3a10703a 	and	r8,r7,r8
    dd48:	280ad7fa 	srli	r5,r5,31
    dd4c:	380ed7fa 	srli	r7,r7,31
    dd50:	12401d26 	beq	r2,r9,ddc8 <__gedf2+0xa4>
    dd54:	0241ffc4 	movi	r9,2047
    dd58:	1a401226 	beq	r3,r9,dda4 <__gedf2+0x80>
    dd5c:	1000081e 	bne	r2,zero,dd80 <__gedf2+0x5c>
    dd60:	2296b03a 	or	r11,r4,r10
    dd64:	5813003a 	cmpeq	r9,r11,zero
    dd68:	1800091e 	bne	r3,zero,dd90 <__gedf2+0x6c>
    dd6c:	3218b03a 	or	r12,r6,r8
    dd70:	6000071e 	bne	r12,zero,dd90 <__gedf2+0x6c>
    dd74:	0005883a 	mov	r2,zero
    dd78:	5800101e 	bne	r11,zero,ddbc <__gedf2+0x98>
    dd7c:	f800283a 	ret
    dd80:	18000c1e 	bne	r3,zero,ddb4 <__gedf2+0x90>
    dd84:	3212b03a 	or	r9,r6,r8
    dd88:	48000c26 	beq	r9,zero,ddbc <__gedf2+0x98>
    dd8c:	0013883a 	mov	r9,zero
    dd90:	39c03fcc 	andi	r7,r7,255
    dd94:	48000826 	beq	r9,zero,ddb8 <__gedf2+0x94>
    dd98:	38000926 	beq	r7,zero,ddc0 <__gedf2+0x9c>
    dd9c:	00800044 	movi	r2,1
    dda0:	f800283a 	ret
    dda4:	3212b03a 	or	r9,r6,r8
    dda8:	483fec26 	beq	r9,zero,dd5c <__alt_mem_onchip_memory2_0+0xf800cccc>
    ddac:	00bfff84 	movi	r2,-2
    ddb0:	f800283a 	ret
    ddb4:	39c03fcc 	andi	r7,r7,255
    ddb8:	29c00626 	beq	r5,r7,ddd4 <__gedf2+0xb0>
    ddbc:	283ff726 	beq	r5,zero,dd9c <__alt_mem_onchip_memory2_0+0xf800cd0c>
    ddc0:	00bfffc4 	movi	r2,-1
    ddc4:	f800283a 	ret
    ddc8:	2292b03a 	or	r9,r4,r10
    ddcc:	483fe126 	beq	r9,zero,dd54 <__alt_mem_onchip_memory2_0+0xf800ccc4>
    ddd0:	003ff606 	br	ddac <__alt_mem_onchip_memory2_0+0xf800cd1c>
    ddd4:	18bff916 	blt	r3,r2,ddbc <__alt_mem_onchip_memory2_0+0xf800cd2c>
    ddd8:	10c00316 	blt	r2,r3,dde8 <__gedf2+0xc4>
    dddc:	42bff736 	bltu	r8,r10,ddbc <__alt_mem_onchip_memory2_0+0xf800cd2c>
    dde0:	52000326 	beq	r10,r8,ddf0 <__gedf2+0xcc>
    dde4:	5200042e 	bgeu	r10,r8,ddf8 <__gedf2+0xd4>
    dde8:	283fec1e 	bne	r5,zero,dd9c <__alt_mem_onchip_memory2_0+0xf800cd0c>
    ddec:	003ff406 	br	ddc0 <__alt_mem_onchip_memory2_0+0xf800cd30>
    ddf0:	313ff236 	bltu	r6,r4,ddbc <__alt_mem_onchip_memory2_0+0xf800cd2c>
    ddf4:	21bffc36 	bltu	r4,r6,dde8 <__alt_mem_onchip_memory2_0+0xf800cd58>
    ddf8:	0005883a 	mov	r2,zero
    ddfc:	f800283a 	ret

0000de00 <__ledf2>:
    de00:	2804d53a 	srli	r2,r5,20
    de04:	3810d53a 	srli	r8,r7,20
    de08:	00c00434 	movhi	r3,16
    de0c:	18ffffc4 	addi	r3,r3,-1
    de10:	1081ffcc 	andi	r2,r2,2047
    de14:	0241ffc4 	movi	r9,2047
    de18:	28d4703a 	and	r10,r5,r3
    de1c:	4201ffcc 	andi	r8,r8,2047
    de20:	38c6703a 	and	r3,r7,r3
    de24:	280ad7fa 	srli	r5,r5,31
    de28:	380ed7fa 	srli	r7,r7,31
    de2c:	12401f26 	beq	r2,r9,deac <__ledf2+0xac>
    de30:	0241ffc4 	movi	r9,2047
    de34:	42401426 	beq	r8,r9,de88 <__ledf2+0x88>
    de38:	1000091e 	bne	r2,zero,de60 <__ledf2+0x60>
    de3c:	2296b03a 	or	r11,r4,r10
    de40:	5813003a 	cmpeq	r9,r11,zero
    de44:	29403fcc 	andi	r5,r5,255
    de48:	40000a1e 	bne	r8,zero,de74 <__ledf2+0x74>
    de4c:	30d8b03a 	or	r12,r6,r3
    de50:	6000081e 	bne	r12,zero,de74 <__ledf2+0x74>
    de54:	0005883a 	mov	r2,zero
    de58:	5800111e 	bne	r11,zero,dea0 <__ledf2+0xa0>
    de5c:	f800283a 	ret
    de60:	29403fcc 	andi	r5,r5,255
    de64:	40000c1e 	bne	r8,zero,de98 <__ledf2+0x98>
    de68:	30d2b03a 	or	r9,r6,r3
    de6c:	48000c26 	beq	r9,zero,dea0 <__ledf2+0xa0>
    de70:	0013883a 	mov	r9,zero
    de74:	39c03fcc 	andi	r7,r7,255
    de78:	48000826 	beq	r9,zero,de9c <__ledf2+0x9c>
    de7c:	38001126 	beq	r7,zero,dec4 <__ledf2+0xc4>
    de80:	00800044 	movi	r2,1
    de84:	f800283a 	ret
    de88:	30d2b03a 	or	r9,r6,r3
    de8c:	483fea26 	beq	r9,zero,de38 <__alt_mem_onchip_memory2_0+0xf800cda8>
    de90:	00800084 	movi	r2,2
    de94:	f800283a 	ret
    de98:	39c03fcc 	andi	r7,r7,255
    de9c:	39400726 	beq	r7,r5,debc <__ledf2+0xbc>
    dea0:	2800081e 	bne	r5,zero,dec4 <__ledf2+0xc4>
    dea4:	00800044 	movi	r2,1
    dea8:	f800283a 	ret
    deac:	2292b03a 	or	r9,r4,r10
    deb0:	483fdf26 	beq	r9,zero,de30 <__alt_mem_onchip_memory2_0+0xf800cda0>
    deb4:	00800084 	movi	r2,2
    deb8:	f800283a 	ret
    debc:	4080030e 	bge	r8,r2,decc <__ledf2+0xcc>
    dec0:	383fef26 	beq	r7,zero,de80 <__alt_mem_onchip_memory2_0+0xf800cdf0>
    dec4:	00bfffc4 	movi	r2,-1
    dec8:	f800283a 	ret
    decc:	123feb16 	blt	r2,r8,de7c <__alt_mem_onchip_memory2_0+0xf800cdec>
    ded0:	1abff336 	bltu	r3,r10,dea0 <__alt_mem_onchip_memory2_0+0xf800ce10>
    ded4:	50c00326 	beq	r10,r3,dee4 <__ledf2+0xe4>
    ded8:	50c0042e 	bgeu	r10,r3,deec <__ledf2+0xec>
    dedc:	283fe81e 	bne	r5,zero,de80 <__alt_mem_onchip_memory2_0+0xf800cdf0>
    dee0:	003ff806 	br	dec4 <__alt_mem_onchip_memory2_0+0xf800ce34>
    dee4:	313fee36 	bltu	r6,r4,dea0 <__alt_mem_onchip_memory2_0+0xf800ce10>
    dee8:	21bffc36 	bltu	r4,r6,dedc <__alt_mem_onchip_memory2_0+0xf800ce4c>
    deec:	0005883a 	mov	r2,zero
    def0:	f800283a 	ret

0000def4 <__muldf3>:
    def4:	deffee04 	addi	sp,sp,-72
    def8:	dd000c15 	stw	r20,48(sp)
    defc:	2828d53a 	srli	r20,r5,20
    df00:	ddc00f15 	stw	r23,60(sp)
    df04:	282ed7fa 	srli	r23,r5,31
    df08:	dc000815 	stw	r16,32(sp)
    df0c:	04000434 	movhi	r16,16
    df10:	dcc00b15 	stw	r19,44(sp)
    df14:	843fffc4 	addi	r16,r16,-1
    df18:	dfc01115 	stw	ra,68(sp)
    df1c:	df001015 	stw	fp,64(sp)
    df20:	dd800e15 	stw	r22,56(sp)
    df24:	dd400d15 	stw	r21,52(sp)
    df28:	dc800a15 	stw	r18,40(sp)
    df2c:	dc400915 	stw	r17,36(sp)
    df30:	a501ffcc 	andi	r20,r20,2047
    df34:	2c20703a 	and	r16,r5,r16
    df38:	b827883a 	mov	r19,r23
    df3c:	ba403fcc 	andi	r9,r23,255
    df40:	a0006026 	beq	r20,zero,e0c4 <__muldf3+0x1d0>
    df44:	0081ffc4 	movi	r2,2047
    df48:	202d883a 	mov	r22,r4
    df4c:	a0803626 	beq	r20,r2,e028 <__muldf3+0x134>
    df50:	84000434 	orhi	r16,r16,16
    df54:	200ad77a 	srli	r5,r4,29
    df58:	800490fa 	slli	r2,r16,3
    df5c:	202c90fa 	slli	r22,r4,3
    df60:	a53f0044 	addi	r20,r20,-1023
    df64:	28a0b03a 	or	r16,r5,r2
    df68:	002b883a 	mov	r21,zero
    df6c:	000b883a 	mov	r5,zero
    df70:	3804d53a 	srli	r2,r7,20
    df74:	3838d7fa 	srli	fp,r7,31
    df78:	04400434 	movhi	r17,16
    df7c:	8c7fffc4 	addi	r17,r17,-1
    df80:	1081ffcc 	andi	r2,r2,2047
    df84:	3025883a 	mov	r18,r6
    df88:	3c62703a 	and	r17,r7,r17
    df8c:	e2803fcc 	andi	r10,fp,255
    df90:	10006d26 	beq	r2,zero,e148 <__muldf3+0x254>
    df94:	00c1ffc4 	movi	r3,2047
    df98:	10c06526 	beq	r2,r3,e130 <__muldf3+0x23c>
    df9c:	8c400434 	orhi	r17,r17,16
    dfa0:	300ed77a 	srli	r7,r6,29
    dfa4:	880690fa 	slli	r3,r17,3
    dfa8:	302490fa 	slli	r18,r6,3
    dfac:	10bf0044 	addi	r2,r2,-1023
    dfb0:	38e2b03a 	or	r17,r7,r3
    dfb4:	000f883a 	mov	r7,zero
    dfb8:	a087883a 	add	r3,r20,r2
    dfbc:	010003c4 	movi	r4,15
    dfc0:	3d44b03a 	or	r2,r7,r21
    dfc4:	e5ccf03a 	xor	r6,fp,r23
    dfc8:	1a000044 	addi	r8,r3,1
    dfcc:	20809b36 	bltu	r4,r2,e23c <__muldf3+0x348>
    dfd0:	100490ba 	slli	r2,r2,2
    dfd4:	01000074 	movhi	r4,1
    dfd8:	2137fa04 	addi	r4,r4,-8216
    dfdc:	1105883a 	add	r2,r2,r4
    dfe0:	10800017 	ldw	r2,0(r2)
    dfe4:	1000683a 	jmp	r2
    dfe8:	0000e23c 	xorhi	zero,zero,904
    dfec:	0000e048 	cmpgei	zero,zero,897
    dff0:	0000e048 	cmpgei	zero,zero,897
    dff4:	0000e044 	movi	zero,897
    dff8:	0000e218 	cmpnei	zero,zero,904
    dffc:	0000e218 	cmpnei	zero,zero,904
    e000:	0000e200 	call	e20 <main+0x9c0>
    e004:	0000e044 	movi	zero,897
    e008:	0000e218 	cmpnei	zero,zero,904
    e00c:	0000e200 	call	e20 <main+0x9c0>
    e010:	0000e218 	cmpnei	zero,zero,904
    e014:	0000e044 	movi	zero,897
    e018:	0000e228 	cmpgeui	zero,zero,904
    e01c:	0000e228 	cmpgeui	zero,zero,904
    e020:	0000e228 	cmpgeui	zero,zero,904
    e024:	0000e588 	cmpgei	zero,zero,918
    e028:	2404b03a 	or	r2,r4,r16
    e02c:	1000711e 	bne	r2,zero,e1f4 <__muldf3+0x300>
    e030:	05400204 	movi	r21,8
    e034:	0021883a 	mov	r16,zero
    e038:	002d883a 	mov	r22,zero
    e03c:	01400084 	movi	r5,2
    e040:	003fcb06 	br	df70 <__alt_mem_onchip_memory2_0+0xf800cee0>
    e044:	500d883a 	mov	r6,r10
    e048:	00800084 	movi	r2,2
    e04c:	38805926 	beq	r7,r2,e1b4 <__muldf3+0x2c0>
    e050:	008000c4 	movi	r2,3
    e054:	3881bb26 	beq	r7,r2,e744 <__muldf3+0x850>
    e058:	00800044 	movi	r2,1
    e05c:	3881961e 	bne	r7,r2,e6b8 <__muldf3+0x7c4>
    e060:	3027883a 	mov	r19,r6
    e064:	0005883a 	mov	r2,zero
    e068:	0021883a 	mov	r16,zero
    e06c:	002d883a 	mov	r22,zero
    e070:	1004953a 	slli	r2,r2,20
    e074:	98c03fcc 	andi	r3,r19,255
    e078:	04400434 	movhi	r17,16
    e07c:	8c7fffc4 	addi	r17,r17,-1
    e080:	180697fa 	slli	r3,r3,31
    e084:	8460703a 	and	r16,r16,r17
    e088:	80a0b03a 	or	r16,r16,r2
    e08c:	80c6b03a 	or	r3,r16,r3
    e090:	b005883a 	mov	r2,r22
    e094:	dfc01117 	ldw	ra,68(sp)
    e098:	df001017 	ldw	fp,64(sp)
    e09c:	ddc00f17 	ldw	r23,60(sp)
    e0a0:	dd800e17 	ldw	r22,56(sp)
    e0a4:	dd400d17 	ldw	r21,52(sp)
    e0a8:	dd000c17 	ldw	r20,48(sp)
    e0ac:	dcc00b17 	ldw	r19,44(sp)
    e0b0:	dc800a17 	ldw	r18,40(sp)
    e0b4:	dc400917 	ldw	r17,36(sp)
    e0b8:	dc000817 	ldw	r16,32(sp)
    e0bc:	dec01204 	addi	sp,sp,72
    e0c0:	f800283a 	ret
    e0c4:	2404b03a 	or	r2,r4,r16
    e0c8:	202b883a 	mov	r21,r4
    e0cc:	10004426 	beq	r2,zero,e1e0 <__muldf3+0x2ec>
    e0d0:	80015126 	beq	r16,zero,e618 <__muldf3+0x724>
    e0d4:	8009883a 	mov	r4,r16
    e0d8:	d9800715 	stw	r6,28(sp)
    e0dc:	d9c00215 	stw	r7,8(sp)
    e0e0:	da400415 	stw	r9,16(sp)
    e0e4:	000f2600 	call	f260 <__clzsi2>
    e0e8:	d9800717 	ldw	r6,28(sp)
    e0ec:	d9c00217 	ldw	r7,8(sp)
    e0f0:	da400417 	ldw	r9,16(sp)
    e0f4:	113ffd44 	addi	r4,r2,-11
    e0f8:	00c00704 	movi	r3,28
    e0fc:	19014216 	blt	r3,r4,e608 <__muldf3+0x714>
    e100:	00c00744 	movi	r3,29
    e104:	15bffe04 	addi	r22,r2,-8
    e108:	1907c83a 	sub	r3,r3,r4
    e10c:	85a0983a 	sll	r16,r16,r22
    e110:	a8c6d83a 	srl	r3,r21,r3
    e114:	adac983a 	sll	r22,r21,r22
    e118:	1c20b03a 	or	r16,r3,r16
    e11c:	1080fcc4 	addi	r2,r2,1011
    e120:	00a9c83a 	sub	r20,zero,r2
    e124:	002b883a 	mov	r21,zero
    e128:	000b883a 	mov	r5,zero
    e12c:	003f9006 	br	df70 <__alt_mem_onchip_memory2_0+0xf800cee0>
    e130:	3446b03a 	or	r3,r6,r17
    e134:	1800281e 	bne	r3,zero,e1d8 <__muldf3+0x2e4>
    e138:	0023883a 	mov	r17,zero
    e13c:	0025883a 	mov	r18,zero
    e140:	01c00084 	movi	r7,2
    e144:	003f9c06 	br	dfb8 <__alt_mem_onchip_memory2_0+0xf800cf28>
    e148:	3446b03a 	or	r3,r6,r17
    e14c:	18001e26 	beq	r3,zero,e1c8 <__muldf3+0x2d4>
    e150:	88012126 	beq	r17,zero,e5d8 <__muldf3+0x6e4>
    e154:	8809883a 	mov	r4,r17
    e158:	d9400215 	stw	r5,8(sp)
    e15c:	d9800715 	stw	r6,28(sp)
    e160:	da400415 	stw	r9,16(sp)
    e164:	da800315 	stw	r10,12(sp)
    e168:	000f2600 	call	f260 <__clzsi2>
    e16c:	d9400217 	ldw	r5,8(sp)
    e170:	d9800717 	ldw	r6,28(sp)
    e174:	da400417 	ldw	r9,16(sp)
    e178:	da800317 	ldw	r10,12(sp)
    e17c:	113ffd44 	addi	r4,r2,-11
    e180:	00c00704 	movi	r3,28
    e184:	19011016 	blt	r3,r4,e5c8 <__muldf3+0x6d4>
    e188:	00c00744 	movi	r3,29
    e18c:	14bffe04 	addi	r18,r2,-8
    e190:	1907c83a 	sub	r3,r3,r4
    e194:	8ca2983a 	sll	r17,r17,r18
    e198:	30c6d83a 	srl	r3,r6,r3
    e19c:	34a4983a 	sll	r18,r6,r18
    e1a0:	1c62b03a 	or	r17,r3,r17
    e1a4:	1080fcc4 	addi	r2,r2,1011
    e1a8:	0085c83a 	sub	r2,zero,r2
    e1ac:	000f883a 	mov	r7,zero
    e1b0:	003f8106 	br	dfb8 <__alt_mem_onchip_memory2_0+0xf800cf28>
    e1b4:	3027883a 	mov	r19,r6
    e1b8:	0081ffc4 	movi	r2,2047
    e1bc:	0021883a 	mov	r16,zero
    e1c0:	002d883a 	mov	r22,zero
    e1c4:	003faa06 	br	e070 <__alt_mem_onchip_memory2_0+0xf800cfe0>
    e1c8:	0023883a 	mov	r17,zero
    e1cc:	0025883a 	mov	r18,zero
    e1d0:	01c00044 	movi	r7,1
    e1d4:	003f7806 	br	dfb8 <__alt_mem_onchip_memory2_0+0xf800cf28>
    e1d8:	01c000c4 	movi	r7,3
    e1dc:	003f7606 	br	dfb8 <__alt_mem_onchip_memory2_0+0xf800cf28>
    e1e0:	05400104 	movi	r21,4
    e1e4:	0021883a 	mov	r16,zero
    e1e8:	002d883a 	mov	r22,zero
    e1ec:	01400044 	movi	r5,1
    e1f0:	003f5f06 	br	df70 <__alt_mem_onchip_memory2_0+0xf800cee0>
    e1f4:	05400304 	movi	r21,12
    e1f8:	014000c4 	movi	r5,3
    e1fc:	003f5c06 	br	df70 <__alt_mem_onchip_memory2_0+0xf800cee0>
    e200:	04000434 	movhi	r16,16
    e204:	0027883a 	mov	r19,zero
    e208:	843fffc4 	addi	r16,r16,-1
    e20c:	05bfffc4 	movi	r22,-1
    e210:	0081ffc4 	movi	r2,2047
    e214:	003f9606 	br	e070 <__alt_mem_onchip_memory2_0+0xf800cfe0>
    e218:	8023883a 	mov	r17,r16
    e21c:	b025883a 	mov	r18,r22
    e220:	280f883a 	mov	r7,r5
    e224:	003f8806 	br	e048 <__alt_mem_onchip_memory2_0+0xf800cfb8>
    e228:	8023883a 	mov	r17,r16
    e22c:	b025883a 	mov	r18,r22
    e230:	480d883a 	mov	r6,r9
    e234:	280f883a 	mov	r7,r5
    e238:	003f8306 	br	e048 <__alt_mem_onchip_memory2_0+0xf800cfb8>
    e23c:	b026d43a 	srli	r19,r22,16
    e240:	902ed43a 	srli	r23,r18,16
    e244:	b5bfffcc 	andi	r22,r22,65535
    e248:	94bfffcc 	andi	r18,r18,65535
    e24c:	b00b883a 	mov	r5,r22
    e250:	9009883a 	mov	r4,r18
    e254:	d8c00515 	stw	r3,20(sp)
    e258:	d9800715 	stw	r6,28(sp)
    e25c:	da000615 	stw	r8,24(sp)
    e260:	000c9f80 	call	c9f8 <__mulsi3>
    e264:	980b883a 	mov	r5,r19
    e268:	9009883a 	mov	r4,r18
    e26c:	1029883a 	mov	r20,r2
    e270:	000c9f80 	call	c9f8 <__mulsi3>
    e274:	b80b883a 	mov	r5,r23
    e278:	9809883a 	mov	r4,r19
    e27c:	102b883a 	mov	r21,r2
    e280:	000c9f80 	call	c9f8 <__mulsi3>
    e284:	b809883a 	mov	r4,r23
    e288:	b00b883a 	mov	r5,r22
    e28c:	1039883a 	mov	fp,r2
    e290:	000c9f80 	call	c9f8 <__mulsi3>
    e294:	a008d43a 	srli	r4,r20,16
    e298:	1545883a 	add	r2,r2,r21
    e29c:	d8c00517 	ldw	r3,20(sp)
    e2a0:	2085883a 	add	r2,r4,r2
    e2a4:	d9800717 	ldw	r6,28(sp)
    e2a8:	da000617 	ldw	r8,24(sp)
    e2ac:	1540022e 	bgeu	r2,r21,e2b8 <__muldf3+0x3c4>
    e2b0:	01000074 	movhi	r4,1
    e2b4:	e139883a 	add	fp,fp,r4
    e2b8:	100e943a 	slli	r7,r2,16
    e2bc:	1004d43a 	srli	r2,r2,16
    e2c0:	882ad43a 	srli	r21,r17,16
    e2c4:	a53fffcc 	andi	r20,r20,65535
    e2c8:	8c7fffcc 	andi	r17,r17,65535
    e2cc:	3d29883a 	add	r20,r7,r20
    e2d0:	b00b883a 	mov	r5,r22
    e2d4:	8809883a 	mov	r4,r17
    e2d8:	d8c00515 	stw	r3,20(sp)
    e2dc:	d9800715 	stw	r6,28(sp)
    e2e0:	da000615 	stw	r8,24(sp)
    e2e4:	dd000115 	stw	r20,4(sp)
    e2e8:	d8800015 	stw	r2,0(sp)
    e2ec:	000c9f80 	call	c9f8 <__mulsi3>
    e2f0:	980b883a 	mov	r5,r19
    e2f4:	8809883a 	mov	r4,r17
    e2f8:	d8800215 	stw	r2,8(sp)
    e2fc:	000c9f80 	call	c9f8 <__mulsi3>
    e300:	9809883a 	mov	r4,r19
    e304:	a80b883a 	mov	r5,r21
    e308:	1029883a 	mov	r20,r2
    e30c:	000c9f80 	call	c9f8 <__mulsi3>
    e310:	b00b883a 	mov	r5,r22
    e314:	a809883a 	mov	r4,r21
    e318:	d8800415 	stw	r2,16(sp)
    e31c:	000c9f80 	call	c9f8 <__mulsi3>
    e320:	d9c00217 	ldw	r7,8(sp)
    e324:	1505883a 	add	r2,r2,r20
    e328:	d8c00517 	ldw	r3,20(sp)
    e32c:	3826d43a 	srli	r19,r7,16
    e330:	d9800717 	ldw	r6,28(sp)
    e334:	da000617 	ldw	r8,24(sp)
    e338:	9885883a 	add	r2,r19,r2
    e33c:	da400417 	ldw	r9,16(sp)
    e340:	1500022e 	bgeu	r2,r20,e34c <__muldf3+0x458>
    e344:	01000074 	movhi	r4,1
    e348:	4913883a 	add	r9,r9,r4
    e34c:	1028d43a 	srli	r20,r2,16
    e350:	1004943a 	slli	r2,r2,16
    e354:	802cd43a 	srli	r22,r16,16
    e358:	843fffcc 	andi	r16,r16,65535
    e35c:	3cffffcc 	andi	r19,r7,65535
    e360:	9009883a 	mov	r4,r18
    e364:	800b883a 	mov	r5,r16
    e368:	a269883a 	add	r20,r20,r9
    e36c:	d8c00515 	stw	r3,20(sp)
    e370:	d9800715 	stw	r6,28(sp)
    e374:	da000615 	stw	r8,24(sp)
    e378:	14e7883a 	add	r19,r2,r19
    e37c:	000c9f80 	call	c9f8 <__mulsi3>
    e380:	9009883a 	mov	r4,r18
    e384:	b00b883a 	mov	r5,r22
    e388:	d8800315 	stw	r2,12(sp)
    e38c:	000c9f80 	call	c9f8 <__mulsi3>
    e390:	b809883a 	mov	r4,r23
    e394:	b00b883a 	mov	r5,r22
    e398:	d8800215 	stw	r2,8(sp)
    e39c:	000c9f80 	call	c9f8 <__mulsi3>
    e3a0:	b80b883a 	mov	r5,r23
    e3a4:	8009883a 	mov	r4,r16
    e3a8:	d8800415 	stw	r2,16(sp)
    e3ac:	000c9f80 	call	c9f8 <__mulsi3>
    e3b0:	da800317 	ldw	r10,12(sp)
    e3b4:	d9c00217 	ldw	r7,8(sp)
    e3b8:	d9000017 	ldw	r4,0(sp)
    e3bc:	502ed43a 	srli	r23,r10,16
    e3c0:	11c5883a 	add	r2,r2,r7
    e3c4:	24e5883a 	add	r18,r4,r19
    e3c8:	b885883a 	add	r2,r23,r2
    e3cc:	d8c00517 	ldw	r3,20(sp)
    e3d0:	d9800717 	ldw	r6,28(sp)
    e3d4:	da000617 	ldw	r8,24(sp)
    e3d8:	da400417 	ldw	r9,16(sp)
    e3dc:	11c0022e 	bgeu	r2,r7,e3e8 <__muldf3+0x4f4>
    e3e0:	01000074 	movhi	r4,1
    e3e4:	4913883a 	add	r9,r9,r4
    e3e8:	100ed43a 	srli	r7,r2,16
    e3ec:	1004943a 	slli	r2,r2,16
    e3f0:	55ffffcc 	andi	r23,r10,65535
    e3f4:	3a53883a 	add	r9,r7,r9
    e3f8:	8809883a 	mov	r4,r17
    e3fc:	800b883a 	mov	r5,r16
    e400:	d8c00515 	stw	r3,20(sp)
    e404:	d9800715 	stw	r6,28(sp)
    e408:	da000615 	stw	r8,24(sp)
    e40c:	da400415 	stw	r9,16(sp)
    e410:	15ef883a 	add	r23,r2,r23
    e414:	000c9f80 	call	c9f8 <__mulsi3>
    e418:	8809883a 	mov	r4,r17
    e41c:	b00b883a 	mov	r5,r22
    e420:	d8800215 	stw	r2,8(sp)
    e424:	000c9f80 	call	c9f8 <__mulsi3>
    e428:	b00b883a 	mov	r5,r22
    e42c:	a809883a 	mov	r4,r21
    e430:	d8800315 	stw	r2,12(sp)
    e434:	000c9f80 	call	c9f8 <__mulsi3>
    e438:	8009883a 	mov	r4,r16
    e43c:	a80b883a 	mov	r5,r21
    e440:	1023883a 	mov	r17,r2
    e444:	000c9f80 	call	c9f8 <__mulsi3>
    e448:	d9c00217 	ldw	r7,8(sp)
    e44c:	da800317 	ldw	r10,12(sp)
    e450:	d8c00517 	ldw	r3,20(sp)
    e454:	3808d43a 	srli	r4,r7,16
    e458:	1285883a 	add	r2,r2,r10
    e45c:	d9800717 	ldw	r6,28(sp)
    e460:	2085883a 	add	r2,r4,r2
    e464:	da000617 	ldw	r8,24(sp)
    e468:	da400417 	ldw	r9,16(sp)
    e46c:	1280022e 	bgeu	r2,r10,e478 <__muldf3+0x584>
    e470:	01000074 	movhi	r4,1
    e474:	8923883a 	add	r17,r17,r4
    e478:	1008943a 	slli	r4,r2,16
    e47c:	39ffffcc 	andi	r7,r7,65535
    e480:	e4b9883a 	add	fp,fp,r18
    e484:	21cf883a 	add	r7,r4,r7
    e488:	e4e7803a 	cmpltu	r19,fp,r19
    e48c:	3d0f883a 	add	r7,r7,r20
    e490:	bf39883a 	add	fp,r23,fp
    e494:	99c9883a 	add	r4,r19,r7
    e498:	e5ef803a 	cmpltu	r23,fp,r23
    e49c:	490b883a 	add	r5,r9,r4
    e4a0:	1004d43a 	srli	r2,r2,16
    e4a4:	b965883a 	add	r18,r23,r5
    e4a8:	24c9803a 	cmpltu	r4,r4,r19
    e4ac:	3d29803a 	cmpltu	r20,r7,r20
    e4b0:	a128b03a 	or	r20,r20,r4
    e4b4:	95ef803a 	cmpltu	r23,r18,r23
    e4b8:	2a53803a 	cmpltu	r9,r5,r9
    e4bc:	a0a9883a 	add	r20,r20,r2
    e4c0:	4deeb03a 	or	r23,r9,r23
    e4c4:	a5ef883a 	add	r23,r20,r23
    e4c8:	bc63883a 	add	r17,r23,r17
    e4cc:	e004927a 	slli	r2,fp,9
    e4d0:	d9000117 	ldw	r4,4(sp)
    e4d4:	882e927a 	slli	r23,r17,9
    e4d8:	9022d5fa 	srli	r17,r18,23
    e4dc:	e038d5fa 	srli	fp,fp,23
    e4e0:	1104b03a 	or	r2,r2,r4
    e4e4:	9024927a 	slli	r18,r18,9
    e4e8:	1004c03a 	cmpne	r2,r2,zero
    e4ec:	bc62b03a 	or	r17,r23,r17
    e4f0:	1738b03a 	or	fp,r2,fp
    e4f4:	8880402c 	andhi	r2,r17,256
    e4f8:	e4a4b03a 	or	r18,fp,r18
    e4fc:	10000726 	beq	r2,zero,e51c <__muldf3+0x628>
    e500:	9006d07a 	srli	r3,r18,1
    e504:	880497fa 	slli	r2,r17,31
    e508:	9480004c 	andi	r18,r18,1
    e50c:	8822d07a 	srli	r17,r17,1
    e510:	1ca4b03a 	or	r18,r3,r18
    e514:	14a4b03a 	or	r18,r2,r18
    e518:	4007883a 	mov	r3,r8
    e51c:	1880ffc4 	addi	r2,r3,1023
    e520:	0080460e 	bge	zero,r2,e63c <__muldf3+0x748>
    e524:	910001cc 	andi	r4,r18,7
    e528:	20000726 	beq	r4,zero,e548 <__muldf3+0x654>
    e52c:	910003cc 	andi	r4,r18,15
    e530:	01400104 	movi	r5,4
    e534:	21400426 	beq	r4,r5,e548 <__muldf3+0x654>
    e538:	9149883a 	add	r4,r18,r5
    e53c:	24a5803a 	cmpltu	r18,r4,r18
    e540:	8ca3883a 	add	r17,r17,r18
    e544:	2025883a 	mov	r18,r4
    e548:	8900402c 	andhi	r4,r17,256
    e54c:	20000426 	beq	r4,zero,e560 <__muldf3+0x66c>
    e550:	18810004 	addi	r2,r3,1024
    e554:	00ffc034 	movhi	r3,65280
    e558:	18ffffc4 	addi	r3,r3,-1
    e55c:	88e2703a 	and	r17,r17,r3
    e560:	00c1ff84 	movi	r3,2046
    e564:	18bf1316 	blt	r3,r2,e1b4 <__alt_mem_onchip_memory2_0+0xf800d124>
    e568:	882c977a 	slli	r22,r17,29
    e56c:	9024d0fa 	srli	r18,r18,3
    e570:	8822927a 	slli	r17,r17,9
    e574:	1081ffcc 	andi	r2,r2,2047
    e578:	b4acb03a 	or	r22,r22,r18
    e57c:	8820d33a 	srli	r16,r17,12
    e580:	3027883a 	mov	r19,r6
    e584:	003eba06 	br	e070 <__alt_mem_onchip_memory2_0+0xf800cfe0>
    e588:	8080022c 	andhi	r2,r16,8
    e58c:	10000926 	beq	r2,zero,e5b4 <__muldf3+0x6c0>
    e590:	8880022c 	andhi	r2,r17,8
    e594:	1000071e 	bne	r2,zero,e5b4 <__muldf3+0x6c0>
    e598:	00800434 	movhi	r2,16
    e59c:	8c000234 	orhi	r16,r17,8
    e5a0:	10bfffc4 	addi	r2,r2,-1
    e5a4:	e027883a 	mov	r19,fp
    e5a8:	80a0703a 	and	r16,r16,r2
    e5ac:	902d883a 	mov	r22,r18
    e5b0:	003f1706 	br	e210 <__alt_mem_onchip_memory2_0+0xf800d180>
    e5b4:	00800434 	movhi	r2,16
    e5b8:	84000234 	orhi	r16,r16,8
    e5bc:	10bfffc4 	addi	r2,r2,-1
    e5c0:	80a0703a 	and	r16,r16,r2
    e5c4:	003f1206 	br	e210 <__alt_mem_onchip_memory2_0+0xf800d180>
    e5c8:	147ff604 	addi	r17,r2,-40
    e5cc:	3462983a 	sll	r17,r6,r17
    e5d0:	0025883a 	mov	r18,zero
    e5d4:	003ef306 	br	e1a4 <__alt_mem_onchip_memory2_0+0xf800d114>
    e5d8:	3009883a 	mov	r4,r6
    e5dc:	d9400215 	stw	r5,8(sp)
    e5e0:	d9800715 	stw	r6,28(sp)
    e5e4:	da400415 	stw	r9,16(sp)
    e5e8:	da800315 	stw	r10,12(sp)
    e5ec:	000f2600 	call	f260 <__clzsi2>
    e5f0:	10800804 	addi	r2,r2,32
    e5f4:	da800317 	ldw	r10,12(sp)
    e5f8:	da400417 	ldw	r9,16(sp)
    e5fc:	d9800717 	ldw	r6,28(sp)
    e600:	d9400217 	ldw	r5,8(sp)
    e604:	003edd06 	br	e17c <__alt_mem_onchip_memory2_0+0xf800d0ec>
    e608:	143ff604 	addi	r16,r2,-40
    e60c:	ac20983a 	sll	r16,r21,r16
    e610:	002d883a 	mov	r22,zero
    e614:	003ec106 	br	e11c <__alt_mem_onchip_memory2_0+0xf800d08c>
    e618:	d9800715 	stw	r6,28(sp)
    e61c:	d9c00215 	stw	r7,8(sp)
    e620:	da400415 	stw	r9,16(sp)
    e624:	000f2600 	call	f260 <__clzsi2>
    e628:	10800804 	addi	r2,r2,32
    e62c:	da400417 	ldw	r9,16(sp)
    e630:	d9c00217 	ldw	r7,8(sp)
    e634:	d9800717 	ldw	r6,28(sp)
    e638:	003eae06 	br	e0f4 <__alt_mem_onchip_memory2_0+0xf800d064>
    e63c:	00c00044 	movi	r3,1
    e640:	1887c83a 	sub	r3,r3,r2
    e644:	01000e04 	movi	r4,56
    e648:	20fe8516 	blt	r4,r3,e060 <__alt_mem_onchip_memory2_0+0xf800cfd0>
    e64c:	010007c4 	movi	r4,31
    e650:	20c01b16 	blt	r4,r3,e6c0 <__muldf3+0x7cc>
    e654:	00800804 	movi	r2,32
    e658:	10c5c83a 	sub	r2,r2,r3
    e65c:	888a983a 	sll	r5,r17,r2
    e660:	90c8d83a 	srl	r4,r18,r3
    e664:	9084983a 	sll	r2,r18,r2
    e668:	88e2d83a 	srl	r17,r17,r3
    e66c:	2906b03a 	or	r3,r5,r4
    e670:	1004c03a 	cmpne	r2,r2,zero
    e674:	1886b03a 	or	r3,r3,r2
    e678:	188001cc 	andi	r2,r3,7
    e67c:	10000726 	beq	r2,zero,e69c <__muldf3+0x7a8>
    e680:	188003cc 	andi	r2,r3,15
    e684:	01000104 	movi	r4,4
    e688:	11000426 	beq	r2,r4,e69c <__muldf3+0x7a8>
    e68c:	1805883a 	mov	r2,r3
    e690:	10c00104 	addi	r3,r2,4
    e694:	1885803a 	cmpltu	r2,r3,r2
    e698:	88a3883a 	add	r17,r17,r2
    e69c:	8880202c 	andhi	r2,r17,128
    e6a0:	10001c26 	beq	r2,zero,e714 <__muldf3+0x820>
    e6a4:	3027883a 	mov	r19,r6
    e6a8:	00800044 	movi	r2,1
    e6ac:	0021883a 	mov	r16,zero
    e6b0:	002d883a 	mov	r22,zero
    e6b4:	003e6e06 	br	e070 <__alt_mem_onchip_memory2_0+0xf800cfe0>
    e6b8:	4007883a 	mov	r3,r8
    e6bc:	003f9706 	br	e51c <__alt_mem_onchip_memory2_0+0xf800d48c>
    e6c0:	017ff844 	movi	r5,-31
    e6c4:	2885c83a 	sub	r2,r5,r2
    e6c8:	888ad83a 	srl	r5,r17,r2
    e6cc:	00800804 	movi	r2,32
    e6d0:	18801a26 	beq	r3,r2,e73c <__muldf3+0x848>
    e6d4:	01001004 	movi	r4,64
    e6d8:	20c7c83a 	sub	r3,r4,r3
    e6dc:	88e2983a 	sll	r17,r17,r3
    e6e0:	8ca4b03a 	or	r18,r17,r18
    e6e4:	9004c03a 	cmpne	r2,r18,zero
    e6e8:	2884b03a 	or	r2,r5,r2
    e6ec:	144001cc 	andi	r17,r2,7
    e6f0:	88000d1e 	bne	r17,zero,e728 <__muldf3+0x834>
    e6f4:	0021883a 	mov	r16,zero
    e6f8:	102cd0fa 	srli	r22,r2,3
    e6fc:	3027883a 	mov	r19,r6
    e700:	0005883a 	mov	r2,zero
    e704:	b46cb03a 	or	r22,r22,r17
    e708:	003e5906 	br	e070 <__alt_mem_onchip_memory2_0+0xf800cfe0>
    e70c:	1007883a 	mov	r3,r2
    e710:	0023883a 	mov	r17,zero
    e714:	8820927a 	slli	r16,r17,9
    e718:	1805883a 	mov	r2,r3
    e71c:	8822977a 	slli	r17,r17,29
    e720:	8020d33a 	srli	r16,r16,12
    e724:	003ff406 	br	e6f8 <__alt_mem_onchip_memory2_0+0xf800d668>
    e728:	10c003cc 	andi	r3,r2,15
    e72c:	01000104 	movi	r4,4
    e730:	193ff626 	beq	r3,r4,e70c <__alt_mem_onchip_memory2_0+0xf800d67c>
    e734:	0023883a 	mov	r17,zero
    e738:	003fd506 	br	e690 <__alt_mem_onchip_memory2_0+0xf800d600>
    e73c:	0023883a 	mov	r17,zero
    e740:	003fe706 	br	e6e0 <__alt_mem_onchip_memory2_0+0xf800d650>
    e744:	00800434 	movhi	r2,16
    e748:	8c000234 	orhi	r16,r17,8
    e74c:	10bfffc4 	addi	r2,r2,-1
    e750:	3027883a 	mov	r19,r6
    e754:	80a0703a 	and	r16,r16,r2
    e758:	902d883a 	mov	r22,r18
    e75c:	003eac06 	br	e210 <__alt_mem_onchip_memory2_0+0xf800d180>

0000e760 <__subdf3>:
    e760:	02000434 	movhi	r8,16
    e764:	423fffc4 	addi	r8,r8,-1
    e768:	defffb04 	addi	sp,sp,-20
    e76c:	2a14703a 	and	r10,r5,r8
    e770:	3812d53a 	srli	r9,r7,20
    e774:	3a10703a 	and	r8,r7,r8
    e778:	2006d77a 	srli	r3,r4,29
    e77c:	3004d77a 	srli	r2,r6,29
    e780:	dc000015 	stw	r16,0(sp)
    e784:	501490fa 	slli	r10,r10,3
    e788:	2820d53a 	srli	r16,r5,20
    e78c:	401090fa 	slli	r8,r8,3
    e790:	dc800215 	stw	r18,8(sp)
    e794:	dc400115 	stw	r17,4(sp)
    e798:	dfc00415 	stw	ra,16(sp)
    e79c:	202290fa 	slli	r17,r4,3
    e7a0:	dcc00315 	stw	r19,12(sp)
    e7a4:	4a41ffcc 	andi	r9,r9,2047
    e7a8:	0101ffc4 	movi	r4,2047
    e7ac:	2824d7fa 	srli	r18,r5,31
    e7b0:	8401ffcc 	andi	r16,r16,2047
    e7b4:	50c6b03a 	or	r3,r10,r3
    e7b8:	380ed7fa 	srli	r7,r7,31
    e7bc:	408ab03a 	or	r5,r8,r2
    e7c0:	300c90fa 	slli	r6,r6,3
    e7c4:	49009626 	beq	r9,r4,ea20 <__subdf3+0x2c0>
    e7c8:	39c0005c 	xori	r7,r7,1
    e7cc:	8245c83a 	sub	r2,r16,r9
    e7d0:	3c807426 	beq	r7,r18,e9a4 <__subdf3+0x244>
    e7d4:	0080af0e 	bge	zero,r2,ea94 <__subdf3+0x334>
    e7d8:	48002a1e 	bne	r9,zero,e884 <__subdf3+0x124>
    e7dc:	2988b03a 	or	r4,r5,r6
    e7e0:	20009a1e 	bne	r4,zero,ea4c <__subdf3+0x2ec>
    e7e4:	888001cc 	andi	r2,r17,7
    e7e8:	10000726 	beq	r2,zero,e808 <__subdf3+0xa8>
    e7ec:	888003cc 	andi	r2,r17,15
    e7f0:	01000104 	movi	r4,4
    e7f4:	11000426 	beq	r2,r4,e808 <__subdf3+0xa8>
    e7f8:	890b883a 	add	r5,r17,r4
    e7fc:	2c63803a 	cmpltu	r17,r5,r17
    e800:	1c47883a 	add	r3,r3,r17
    e804:	2823883a 	mov	r17,r5
    e808:	1880202c 	andhi	r2,r3,128
    e80c:	10005926 	beq	r2,zero,e974 <__subdf3+0x214>
    e810:	84000044 	addi	r16,r16,1
    e814:	0081ffc4 	movi	r2,2047
    e818:	8080be26 	beq	r16,r2,eb14 <__subdf3+0x3b4>
    e81c:	017fe034 	movhi	r5,65408
    e820:	297fffc4 	addi	r5,r5,-1
    e824:	1946703a 	and	r3,r3,r5
    e828:	1804977a 	slli	r2,r3,29
    e82c:	1806927a 	slli	r3,r3,9
    e830:	8822d0fa 	srli	r17,r17,3
    e834:	8401ffcc 	andi	r16,r16,2047
    e838:	180ad33a 	srli	r5,r3,12
    e83c:	9100004c 	andi	r4,r18,1
    e840:	1444b03a 	or	r2,r2,r17
    e844:	80c1ffcc 	andi	r3,r16,2047
    e848:	1820953a 	slli	r16,r3,20
    e84c:	20c03fcc 	andi	r3,r4,255
    e850:	180897fa 	slli	r4,r3,31
    e854:	00c00434 	movhi	r3,16
    e858:	18ffffc4 	addi	r3,r3,-1
    e85c:	28c6703a 	and	r3,r5,r3
    e860:	1c06b03a 	or	r3,r3,r16
    e864:	1906b03a 	or	r3,r3,r4
    e868:	dfc00417 	ldw	ra,16(sp)
    e86c:	dcc00317 	ldw	r19,12(sp)
    e870:	dc800217 	ldw	r18,8(sp)
    e874:	dc400117 	ldw	r17,4(sp)
    e878:	dc000017 	ldw	r16,0(sp)
    e87c:	dec00504 	addi	sp,sp,20
    e880:	f800283a 	ret
    e884:	0101ffc4 	movi	r4,2047
    e888:	813fd626 	beq	r16,r4,e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    e88c:	29402034 	orhi	r5,r5,128
    e890:	01000e04 	movi	r4,56
    e894:	2080a316 	blt	r4,r2,eb24 <__subdf3+0x3c4>
    e898:	010007c4 	movi	r4,31
    e89c:	2080c616 	blt	r4,r2,ebb8 <__subdf3+0x458>
    e8a0:	01000804 	movi	r4,32
    e8a4:	2089c83a 	sub	r4,r4,r2
    e8a8:	2910983a 	sll	r8,r5,r4
    e8ac:	308ed83a 	srl	r7,r6,r2
    e8b0:	3108983a 	sll	r4,r6,r4
    e8b4:	2884d83a 	srl	r2,r5,r2
    e8b8:	41ccb03a 	or	r6,r8,r7
    e8bc:	2008c03a 	cmpne	r4,r4,zero
    e8c0:	310cb03a 	or	r6,r6,r4
    e8c4:	898dc83a 	sub	r6,r17,r6
    e8c8:	89a3803a 	cmpltu	r17,r17,r6
    e8cc:	1887c83a 	sub	r3,r3,r2
    e8d0:	1c47c83a 	sub	r3,r3,r17
    e8d4:	3023883a 	mov	r17,r6
    e8d8:	1880202c 	andhi	r2,r3,128
    e8dc:	10002326 	beq	r2,zero,e96c <__subdf3+0x20c>
    e8e0:	04c02034 	movhi	r19,128
    e8e4:	9cffffc4 	addi	r19,r19,-1
    e8e8:	1ce6703a 	and	r19,r3,r19
    e8ec:	98007a26 	beq	r19,zero,ead8 <__subdf3+0x378>
    e8f0:	9809883a 	mov	r4,r19
    e8f4:	000f2600 	call	f260 <__clzsi2>
    e8f8:	113ffe04 	addi	r4,r2,-8
    e8fc:	00c007c4 	movi	r3,31
    e900:	19007b16 	blt	r3,r4,eaf0 <__subdf3+0x390>
    e904:	00800804 	movi	r2,32
    e908:	1105c83a 	sub	r2,r2,r4
    e90c:	8884d83a 	srl	r2,r17,r2
    e910:	9906983a 	sll	r3,r19,r4
    e914:	8922983a 	sll	r17,r17,r4
    e918:	10c4b03a 	or	r2,r2,r3
    e91c:	24007816 	blt	r4,r16,eb00 <__subdf3+0x3a0>
    e920:	2421c83a 	sub	r16,r4,r16
    e924:	80c00044 	addi	r3,r16,1
    e928:	010007c4 	movi	r4,31
    e92c:	20c09516 	blt	r4,r3,eb84 <__subdf3+0x424>
    e930:	01400804 	movi	r5,32
    e934:	28cbc83a 	sub	r5,r5,r3
    e938:	88c8d83a 	srl	r4,r17,r3
    e93c:	8962983a 	sll	r17,r17,r5
    e940:	114a983a 	sll	r5,r2,r5
    e944:	10c6d83a 	srl	r3,r2,r3
    e948:	8804c03a 	cmpne	r2,r17,zero
    e94c:	290ab03a 	or	r5,r5,r4
    e950:	28a2b03a 	or	r17,r5,r2
    e954:	0021883a 	mov	r16,zero
    e958:	003fa206 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    e95c:	2090b03a 	or	r8,r4,r2
    e960:	40018e26 	beq	r8,zero,ef9c <__subdf3+0x83c>
    e964:	1007883a 	mov	r3,r2
    e968:	2023883a 	mov	r17,r4
    e96c:	888001cc 	andi	r2,r17,7
    e970:	103f9e1e 	bne	r2,zero,e7ec <__alt_mem_onchip_memory2_0+0xf800d75c>
    e974:	1804977a 	slli	r2,r3,29
    e978:	8822d0fa 	srli	r17,r17,3
    e97c:	1810d0fa 	srli	r8,r3,3
    e980:	9100004c 	andi	r4,r18,1
    e984:	1444b03a 	or	r2,r2,r17
    e988:	00c1ffc4 	movi	r3,2047
    e98c:	80c02826 	beq	r16,r3,ea30 <__subdf3+0x2d0>
    e990:	01400434 	movhi	r5,16
    e994:	297fffc4 	addi	r5,r5,-1
    e998:	80e0703a 	and	r16,r16,r3
    e99c:	414a703a 	and	r5,r8,r5
    e9a0:	003fa806 	br	e844 <__alt_mem_onchip_memory2_0+0xf800d7b4>
    e9a4:	0080630e 	bge	zero,r2,eb34 <__subdf3+0x3d4>
    e9a8:	48003026 	beq	r9,zero,ea6c <__subdf3+0x30c>
    e9ac:	0101ffc4 	movi	r4,2047
    e9b0:	813f8c26 	beq	r16,r4,e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    e9b4:	29402034 	orhi	r5,r5,128
    e9b8:	01000e04 	movi	r4,56
    e9bc:	2080a90e 	bge	r4,r2,ec64 <__subdf3+0x504>
    e9c0:	298cb03a 	or	r6,r5,r6
    e9c4:	3012c03a 	cmpne	r9,r6,zero
    e9c8:	0005883a 	mov	r2,zero
    e9cc:	4c53883a 	add	r9,r9,r17
    e9d0:	4c63803a 	cmpltu	r17,r9,r17
    e9d4:	10c7883a 	add	r3,r2,r3
    e9d8:	88c7883a 	add	r3,r17,r3
    e9dc:	4823883a 	mov	r17,r9
    e9e0:	1880202c 	andhi	r2,r3,128
    e9e4:	1000d026 	beq	r2,zero,ed28 <__subdf3+0x5c8>
    e9e8:	84000044 	addi	r16,r16,1
    e9ec:	0081ffc4 	movi	r2,2047
    e9f0:	8080fe26 	beq	r16,r2,edec <__subdf3+0x68c>
    e9f4:	00bfe034 	movhi	r2,65408
    e9f8:	10bfffc4 	addi	r2,r2,-1
    e9fc:	1886703a 	and	r3,r3,r2
    ea00:	880ad07a 	srli	r5,r17,1
    ea04:	180497fa 	slli	r2,r3,31
    ea08:	8900004c 	andi	r4,r17,1
    ea0c:	2922b03a 	or	r17,r5,r4
    ea10:	1806d07a 	srli	r3,r3,1
    ea14:	1462b03a 	or	r17,r2,r17
    ea18:	3825883a 	mov	r18,r7
    ea1c:	003f7106 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    ea20:	2984b03a 	or	r2,r5,r6
    ea24:	103f6826 	beq	r2,zero,e7c8 <__alt_mem_onchip_memory2_0+0xf800d738>
    ea28:	39c03fcc 	andi	r7,r7,255
    ea2c:	003f6706 	br	e7cc <__alt_mem_onchip_memory2_0+0xf800d73c>
    ea30:	4086b03a 	or	r3,r8,r2
    ea34:	18015226 	beq	r3,zero,ef80 <__subdf3+0x820>
    ea38:	00c00434 	movhi	r3,16
    ea3c:	41400234 	orhi	r5,r8,8
    ea40:	18ffffc4 	addi	r3,r3,-1
    ea44:	28ca703a 	and	r5,r5,r3
    ea48:	003f7e06 	br	e844 <__alt_mem_onchip_memory2_0+0xf800d7b4>
    ea4c:	10bfffc4 	addi	r2,r2,-1
    ea50:	1000491e 	bne	r2,zero,eb78 <__subdf3+0x418>
    ea54:	898fc83a 	sub	r7,r17,r6
    ea58:	89e3803a 	cmpltu	r17,r17,r7
    ea5c:	1947c83a 	sub	r3,r3,r5
    ea60:	1c47c83a 	sub	r3,r3,r17
    ea64:	3823883a 	mov	r17,r7
    ea68:	003f9b06 	br	e8d8 <__alt_mem_onchip_memory2_0+0xf800d848>
    ea6c:	2988b03a 	or	r4,r5,r6
    ea70:	203f5c26 	beq	r4,zero,e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    ea74:	10bfffc4 	addi	r2,r2,-1
    ea78:	1000931e 	bne	r2,zero,ecc8 <__subdf3+0x568>
    ea7c:	898d883a 	add	r6,r17,r6
    ea80:	3463803a 	cmpltu	r17,r6,r17
    ea84:	1947883a 	add	r3,r3,r5
    ea88:	88c7883a 	add	r3,r17,r3
    ea8c:	3023883a 	mov	r17,r6
    ea90:	003fd306 	br	e9e0 <__alt_mem_onchip_memory2_0+0xf800d950>
    ea94:	1000541e 	bne	r2,zero,ebe8 <__subdf3+0x488>
    ea98:	80800044 	addi	r2,r16,1
    ea9c:	1081ffcc 	andi	r2,r2,2047
    eaa0:	01000044 	movi	r4,1
    eaa4:	2080a20e 	bge	r4,r2,ed30 <__subdf3+0x5d0>
    eaa8:	8989c83a 	sub	r4,r17,r6
    eaac:	8905803a 	cmpltu	r2,r17,r4
    eab0:	1967c83a 	sub	r19,r3,r5
    eab4:	98a7c83a 	sub	r19,r19,r2
    eab8:	9880202c 	andhi	r2,r19,128
    eabc:	10006326 	beq	r2,zero,ec4c <__subdf3+0x4ec>
    eac0:	3463c83a 	sub	r17,r6,r17
    eac4:	28c7c83a 	sub	r3,r5,r3
    eac8:	344d803a 	cmpltu	r6,r6,r17
    eacc:	19a7c83a 	sub	r19,r3,r6
    ead0:	3825883a 	mov	r18,r7
    ead4:	983f861e 	bne	r19,zero,e8f0 <__alt_mem_onchip_memory2_0+0xf800d860>
    ead8:	8809883a 	mov	r4,r17
    eadc:	000f2600 	call	f260 <__clzsi2>
    eae0:	10800804 	addi	r2,r2,32
    eae4:	113ffe04 	addi	r4,r2,-8
    eae8:	00c007c4 	movi	r3,31
    eaec:	193f850e 	bge	r3,r4,e904 <__alt_mem_onchip_memory2_0+0xf800d874>
    eaf0:	10bff604 	addi	r2,r2,-40
    eaf4:	8884983a 	sll	r2,r17,r2
    eaf8:	0023883a 	mov	r17,zero
    eafc:	243f880e 	bge	r4,r16,e920 <__alt_mem_onchip_memory2_0+0xf800d890>
    eb00:	00ffe034 	movhi	r3,65408
    eb04:	18ffffc4 	addi	r3,r3,-1
    eb08:	8121c83a 	sub	r16,r16,r4
    eb0c:	10c6703a 	and	r3,r2,r3
    eb10:	003f3406 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    eb14:	9100004c 	andi	r4,r18,1
    eb18:	000b883a 	mov	r5,zero
    eb1c:	0005883a 	mov	r2,zero
    eb20:	003f4806 	br	e844 <__alt_mem_onchip_memory2_0+0xf800d7b4>
    eb24:	298cb03a 	or	r6,r5,r6
    eb28:	300cc03a 	cmpne	r6,r6,zero
    eb2c:	0005883a 	mov	r2,zero
    eb30:	003f6406 	br	e8c4 <__alt_mem_onchip_memory2_0+0xf800d834>
    eb34:	10009a1e 	bne	r2,zero,eda0 <__subdf3+0x640>
    eb38:	82400044 	addi	r9,r16,1
    eb3c:	4881ffcc 	andi	r2,r9,2047
    eb40:	02800044 	movi	r10,1
    eb44:	5080670e 	bge	r10,r2,ece4 <__subdf3+0x584>
    eb48:	0081ffc4 	movi	r2,2047
    eb4c:	4880af26 	beq	r9,r2,ee0c <__subdf3+0x6ac>
    eb50:	898d883a 	add	r6,r17,r6
    eb54:	1945883a 	add	r2,r3,r5
    eb58:	3447803a 	cmpltu	r3,r6,r17
    eb5c:	1887883a 	add	r3,r3,r2
    eb60:	182297fa 	slli	r17,r3,31
    eb64:	300cd07a 	srli	r6,r6,1
    eb68:	1806d07a 	srli	r3,r3,1
    eb6c:	4821883a 	mov	r16,r9
    eb70:	89a2b03a 	or	r17,r17,r6
    eb74:	003f1b06 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    eb78:	0101ffc4 	movi	r4,2047
    eb7c:	813f441e 	bne	r16,r4,e890 <__alt_mem_onchip_memory2_0+0xf800d800>
    eb80:	003f1806 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    eb84:	843ff844 	addi	r16,r16,-31
    eb88:	01400804 	movi	r5,32
    eb8c:	1408d83a 	srl	r4,r2,r16
    eb90:	19405026 	beq	r3,r5,ecd4 <__subdf3+0x574>
    eb94:	01401004 	movi	r5,64
    eb98:	28c7c83a 	sub	r3,r5,r3
    eb9c:	10c4983a 	sll	r2,r2,r3
    eba0:	88a2b03a 	or	r17,r17,r2
    eba4:	8822c03a 	cmpne	r17,r17,zero
    eba8:	2462b03a 	or	r17,r4,r17
    ebac:	0007883a 	mov	r3,zero
    ebb0:	0021883a 	mov	r16,zero
    ebb4:	003f6d06 	br	e96c <__alt_mem_onchip_memory2_0+0xf800d8dc>
    ebb8:	11fff804 	addi	r7,r2,-32
    ebbc:	01000804 	movi	r4,32
    ebc0:	29ced83a 	srl	r7,r5,r7
    ebc4:	11004526 	beq	r2,r4,ecdc <__subdf3+0x57c>
    ebc8:	01001004 	movi	r4,64
    ebcc:	2089c83a 	sub	r4,r4,r2
    ebd0:	2904983a 	sll	r2,r5,r4
    ebd4:	118cb03a 	or	r6,r2,r6
    ebd8:	300cc03a 	cmpne	r6,r6,zero
    ebdc:	398cb03a 	or	r6,r7,r6
    ebe0:	0005883a 	mov	r2,zero
    ebe4:	003f3706 	br	e8c4 <__alt_mem_onchip_memory2_0+0xf800d834>
    ebe8:	80002a26 	beq	r16,zero,ec94 <__subdf3+0x534>
    ebec:	0101ffc4 	movi	r4,2047
    ebf0:	49006626 	beq	r9,r4,ed8c <__subdf3+0x62c>
    ebf4:	0085c83a 	sub	r2,zero,r2
    ebf8:	18c02034 	orhi	r3,r3,128
    ebfc:	01000e04 	movi	r4,56
    ec00:	20807e16 	blt	r4,r2,edfc <__subdf3+0x69c>
    ec04:	010007c4 	movi	r4,31
    ec08:	2080e716 	blt	r4,r2,efa8 <__subdf3+0x848>
    ec0c:	01000804 	movi	r4,32
    ec10:	2089c83a 	sub	r4,r4,r2
    ec14:	1914983a 	sll	r10,r3,r4
    ec18:	8890d83a 	srl	r8,r17,r2
    ec1c:	8908983a 	sll	r4,r17,r4
    ec20:	1884d83a 	srl	r2,r3,r2
    ec24:	5222b03a 	or	r17,r10,r8
    ec28:	2006c03a 	cmpne	r3,r4,zero
    ec2c:	88e2b03a 	or	r17,r17,r3
    ec30:	3463c83a 	sub	r17,r6,r17
    ec34:	2885c83a 	sub	r2,r5,r2
    ec38:	344d803a 	cmpltu	r6,r6,r17
    ec3c:	1187c83a 	sub	r3,r2,r6
    ec40:	4821883a 	mov	r16,r9
    ec44:	3825883a 	mov	r18,r7
    ec48:	003f2306 	br	e8d8 <__alt_mem_onchip_memory2_0+0xf800d848>
    ec4c:	24d0b03a 	or	r8,r4,r19
    ec50:	40001b1e 	bne	r8,zero,ecc0 <__subdf3+0x560>
    ec54:	0005883a 	mov	r2,zero
    ec58:	0009883a 	mov	r4,zero
    ec5c:	0021883a 	mov	r16,zero
    ec60:	003f4906 	br	e988 <__alt_mem_onchip_memory2_0+0xf800d8f8>
    ec64:	010007c4 	movi	r4,31
    ec68:	20803a16 	blt	r4,r2,ed54 <__subdf3+0x5f4>
    ec6c:	01000804 	movi	r4,32
    ec70:	2089c83a 	sub	r4,r4,r2
    ec74:	2912983a 	sll	r9,r5,r4
    ec78:	3090d83a 	srl	r8,r6,r2
    ec7c:	3108983a 	sll	r4,r6,r4
    ec80:	2884d83a 	srl	r2,r5,r2
    ec84:	4a12b03a 	or	r9,r9,r8
    ec88:	2008c03a 	cmpne	r4,r4,zero
    ec8c:	4912b03a 	or	r9,r9,r4
    ec90:	003f4e06 	br	e9cc <__alt_mem_onchip_memory2_0+0xf800d93c>
    ec94:	1c48b03a 	or	r4,r3,r17
    ec98:	20003c26 	beq	r4,zero,ed8c <__subdf3+0x62c>
    ec9c:	0084303a 	nor	r2,zero,r2
    eca0:	1000381e 	bne	r2,zero,ed84 <__subdf3+0x624>
    eca4:	3463c83a 	sub	r17,r6,r17
    eca8:	28c5c83a 	sub	r2,r5,r3
    ecac:	344d803a 	cmpltu	r6,r6,r17
    ecb0:	1187c83a 	sub	r3,r2,r6
    ecb4:	4821883a 	mov	r16,r9
    ecb8:	3825883a 	mov	r18,r7
    ecbc:	003f0606 	br	e8d8 <__alt_mem_onchip_memory2_0+0xf800d848>
    ecc0:	2023883a 	mov	r17,r4
    ecc4:	003f0906 	br	e8ec <__alt_mem_onchip_memory2_0+0xf800d85c>
    ecc8:	0101ffc4 	movi	r4,2047
    eccc:	813f3a1e 	bne	r16,r4,e9b8 <__alt_mem_onchip_memory2_0+0xf800d928>
    ecd0:	003ec406 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    ecd4:	0005883a 	mov	r2,zero
    ecd8:	003fb106 	br	eba0 <__alt_mem_onchip_memory2_0+0xf800db10>
    ecdc:	0005883a 	mov	r2,zero
    ece0:	003fbc06 	br	ebd4 <__alt_mem_onchip_memory2_0+0xf800db44>
    ece4:	1c44b03a 	or	r2,r3,r17
    ece8:	80008e1e 	bne	r16,zero,ef24 <__subdf3+0x7c4>
    ecec:	1000c826 	beq	r2,zero,f010 <__subdf3+0x8b0>
    ecf0:	2984b03a 	or	r2,r5,r6
    ecf4:	103ebb26 	beq	r2,zero,e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    ecf8:	8989883a 	add	r4,r17,r6
    ecfc:	1945883a 	add	r2,r3,r5
    ed00:	2447803a 	cmpltu	r3,r4,r17
    ed04:	1887883a 	add	r3,r3,r2
    ed08:	1880202c 	andhi	r2,r3,128
    ed0c:	2023883a 	mov	r17,r4
    ed10:	103f1626 	beq	r2,zero,e96c <__alt_mem_onchip_memory2_0+0xf800d8dc>
    ed14:	00bfe034 	movhi	r2,65408
    ed18:	10bfffc4 	addi	r2,r2,-1
    ed1c:	5021883a 	mov	r16,r10
    ed20:	1886703a 	and	r3,r3,r2
    ed24:	003eaf06 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    ed28:	3825883a 	mov	r18,r7
    ed2c:	003f0f06 	br	e96c <__alt_mem_onchip_memory2_0+0xf800d8dc>
    ed30:	1c44b03a 	or	r2,r3,r17
    ed34:	8000251e 	bne	r16,zero,edcc <__subdf3+0x66c>
    ed38:	1000661e 	bne	r2,zero,eed4 <__subdf3+0x774>
    ed3c:	2990b03a 	or	r8,r5,r6
    ed40:	40009626 	beq	r8,zero,ef9c <__subdf3+0x83c>
    ed44:	2807883a 	mov	r3,r5
    ed48:	3023883a 	mov	r17,r6
    ed4c:	3825883a 	mov	r18,r7
    ed50:	003ea406 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    ed54:	127ff804 	addi	r9,r2,-32
    ed58:	01000804 	movi	r4,32
    ed5c:	2a52d83a 	srl	r9,r5,r9
    ed60:	11008c26 	beq	r2,r4,ef94 <__subdf3+0x834>
    ed64:	01001004 	movi	r4,64
    ed68:	2085c83a 	sub	r2,r4,r2
    ed6c:	2884983a 	sll	r2,r5,r2
    ed70:	118cb03a 	or	r6,r2,r6
    ed74:	300cc03a 	cmpne	r6,r6,zero
    ed78:	4992b03a 	or	r9,r9,r6
    ed7c:	0005883a 	mov	r2,zero
    ed80:	003f1206 	br	e9cc <__alt_mem_onchip_memory2_0+0xf800d93c>
    ed84:	0101ffc4 	movi	r4,2047
    ed88:	493f9c1e 	bne	r9,r4,ebfc <__alt_mem_onchip_memory2_0+0xf800db6c>
    ed8c:	2807883a 	mov	r3,r5
    ed90:	3023883a 	mov	r17,r6
    ed94:	4821883a 	mov	r16,r9
    ed98:	3825883a 	mov	r18,r7
    ed9c:	003e9106 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    eda0:	80001f1e 	bne	r16,zero,ee20 <__subdf3+0x6c0>
    eda4:	1c48b03a 	or	r4,r3,r17
    eda8:	20005a26 	beq	r4,zero,ef14 <__subdf3+0x7b4>
    edac:	0084303a 	nor	r2,zero,r2
    edb0:	1000561e 	bne	r2,zero,ef0c <__subdf3+0x7ac>
    edb4:	89a3883a 	add	r17,r17,r6
    edb8:	1945883a 	add	r2,r3,r5
    edbc:	898d803a 	cmpltu	r6,r17,r6
    edc0:	3087883a 	add	r3,r6,r2
    edc4:	4821883a 	mov	r16,r9
    edc8:	003f0506 	br	e9e0 <__alt_mem_onchip_memory2_0+0xf800d950>
    edcc:	10002b1e 	bne	r2,zero,ee7c <__subdf3+0x71c>
    edd0:	2984b03a 	or	r2,r5,r6
    edd4:	10008026 	beq	r2,zero,efd8 <__subdf3+0x878>
    edd8:	2807883a 	mov	r3,r5
    eddc:	3023883a 	mov	r17,r6
    ede0:	3825883a 	mov	r18,r7
    ede4:	0401ffc4 	movi	r16,2047
    ede8:	003e7e06 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    edec:	3809883a 	mov	r4,r7
    edf0:	0011883a 	mov	r8,zero
    edf4:	0005883a 	mov	r2,zero
    edf8:	003ee306 	br	e988 <__alt_mem_onchip_memory2_0+0xf800d8f8>
    edfc:	1c62b03a 	or	r17,r3,r17
    ee00:	8822c03a 	cmpne	r17,r17,zero
    ee04:	0005883a 	mov	r2,zero
    ee08:	003f8906 	br	ec30 <__alt_mem_onchip_memory2_0+0xf800dba0>
    ee0c:	3809883a 	mov	r4,r7
    ee10:	4821883a 	mov	r16,r9
    ee14:	0011883a 	mov	r8,zero
    ee18:	0005883a 	mov	r2,zero
    ee1c:	003eda06 	br	e988 <__alt_mem_onchip_memory2_0+0xf800d8f8>
    ee20:	0101ffc4 	movi	r4,2047
    ee24:	49003b26 	beq	r9,r4,ef14 <__subdf3+0x7b4>
    ee28:	0085c83a 	sub	r2,zero,r2
    ee2c:	18c02034 	orhi	r3,r3,128
    ee30:	01000e04 	movi	r4,56
    ee34:	20806e16 	blt	r4,r2,eff0 <__subdf3+0x890>
    ee38:	010007c4 	movi	r4,31
    ee3c:	20807716 	blt	r4,r2,f01c <__subdf3+0x8bc>
    ee40:	01000804 	movi	r4,32
    ee44:	2089c83a 	sub	r4,r4,r2
    ee48:	1914983a 	sll	r10,r3,r4
    ee4c:	8890d83a 	srl	r8,r17,r2
    ee50:	8908983a 	sll	r4,r17,r4
    ee54:	1884d83a 	srl	r2,r3,r2
    ee58:	5222b03a 	or	r17,r10,r8
    ee5c:	2006c03a 	cmpne	r3,r4,zero
    ee60:	88e2b03a 	or	r17,r17,r3
    ee64:	89a3883a 	add	r17,r17,r6
    ee68:	1145883a 	add	r2,r2,r5
    ee6c:	898d803a 	cmpltu	r6,r17,r6
    ee70:	3087883a 	add	r3,r6,r2
    ee74:	4821883a 	mov	r16,r9
    ee78:	003ed906 	br	e9e0 <__alt_mem_onchip_memory2_0+0xf800d950>
    ee7c:	2984b03a 	or	r2,r5,r6
    ee80:	10004226 	beq	r2,zero,ef8c <__subdf3+0x82c>
    ee84:	1808d0fa 	srli	r4,r3,3
    ee88:	8822d0fa 	srli	r17,r17,3
    ee8c:	1806977a 	slli	r3,r3,29
    ee90:	2080022c 	andhi	r2,r4,8
    ee94:	1c62b03a 	or	r17,r3,r17
    ee98:	10000826 	beq	r2,zero,eebc <__subdf3+0x75c>
    ee9c:	2812d0fa 	srli	r9,r5,3
    eea0:	4880022c 	andhi	r2,r9,8
    eea4:	1000051e 	bne	r2,zero,eebc <__subdf3+0x75c>
    eea8:	300cd0fa 	srli	r6,r6,3
    eeac:	2804977a 	slli	r2,r5,29
    eeb0:	4809883a 	mov	r4,r9
    eeb4:	3825883a 	mov	r18,r7
    eeb8:	11a2b03a 	or	r17,r2,r6
    eebc:	8806d77a 	srli	r3,r17,29
    eec0:	200890fa 	slli	r4,r4,3
    eec4:	882290fa 	slli	r17,r17,3
    eec8:	0401ffc4 	movi	r16,2047
    eecc:	1906b03a 	or	r3,r3,r4
    eed0:	003e4406 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    eed4:	2984b03a 	or	r2,r5,r6
    eed8:	103e4226 	beq	r2,zero,e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    eedc:	8989c83a 	sub	r4,r17,r6
    eee0:	8911803a 	cmpltu	r8,r17,r4
    eee4:	1945c83a 	sub	r2,r3,r5
    eee8:	1205c83a 	sub	r2,r2,r8
    eeec:	1200202c 	andhi	r8,r2,128
    eef0:	403e9a26 	beq	r8,zero,e95c <__alt_mem_onchip_memory2_0+0xf800d8cc>
    eef4:	3463c83a 	sub	r17,r6,r17
    eef8:	28c5c83a 	sub	r2,r5,r3
    eefc:	344d803a 	cmpltu	r6,r6,r17
    ef00:	1187c83a 	sub	r3,r2,r6
    ef04:	3825883a 	mov	r18,r7
    ef08:	003e3606 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    ef0c:	0101ffc4 	movi	r4,2047
    ef10:	493fc71e 	bne	r9,r4,ee30 <__alt_mem_onchip_memory2_0+0xf800dda0>
    ef14:	2807883a 	mov	r3,r5
    ef18:	3023883a 	mov	r17,r6
    ef1c:	4821883a 	mov	r16,r9
    ef20:	003e3006 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    ef24:	10003626 	beq	r2,zero,f000 <__subdf3+0x8a0>
    ef28:	2984b03a 	or	r2,r5,r6
    ef2c:	10001726 	beq	r2,zero,ef8c <__subdf3+0x82c>
    ef30:	1808d0fa 	srli	r4,r3,3
    ef34:	8822d0fa 	srli	r17,r17,3
    ef38:	1806977a 	slli	r3,r3,29
    ef3c:	2080022c 	andhi	r2,r4,8
    ef40:	1c62b03a 	or	r17,r3,r17
    ef44:	10000726 	beq	r2,zero,ef64 <__subdf3+0x804>
    ef48:	2812d0fa 	srli	r9,r5,3
    ef4c:	4880022c 	andhi	r2,r9,8
    ef50:	1000041e 	bne	r2,zero,ef64 <__subdf3+0x804>
    ef54:	300cd0fa 	srli	r6,r6,3
    ef58:	2804977a 	slli	r2,r5,29
    ef5c:	4809883a 	mov	r4,r9
    ef60:	11a2b03a 	or	r17,r2,r6
    ef64:	8806d77a 	srli	r3,r17,29
    ef68:	200890fa 	slli	r4,r4,3
    ef6c:	882290fa 	slli	r17,r17,3
    ef70:	3825883a 	mov	r18,r7
    ef74:	1906b03a 	or	r3,r3,r4
    ef78:	0401ffc4 	movi	r16,2047
    ef7c:	003e1906 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    ef80:	000b883a 	mov	r5,zero
    ef84:	0005883a 	mov	r2,zero
    ef88:	003e2e06 	br	e844 <__alt_mem_onchip_memory2_0+0xf800d7b4>
    ef8c:	0401ffc4 	movi	r16,2047
    ef90:	003e1406 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    ef94:	0005883a 	mov	r2,zero
    ef98:	003f7506 	br	ed70 <__alt_mem_onchip_memory2_0+0xf800dce0>
    ef9c:	0005883a 	mov	r2,zero
    efa0:	0009883a 	mov	r4,zero
    efa4:	003e7806 	br	e988 <__alt_mem_onchip_memory2_0+0xf800d8f8>
    efa8:	123ff804 	addi	r8,r2,-32
    efac:	01000804 	movi	r4,32
    efb0:	1a10d83a 	srl	r8,r3,r8
    efb4:	11002526 	beq	r2,r4,f04c <__subdf3+0x8ec>
    efb8:	01001004 	movi	r4,64
    efbc:	2085c83a 	sub	r2,r4,r2
    efc0:	1884983a 	sll	r2,r3,r2
    efc4:	1444b03a 	or	r2,r2,r17
    efc8:	1004c03a 	cmpne	r2,r2,zero
    efcc:	40a2b03a 	or	r17,r8,r2
    efd0:	0005883a 	mov	r2,zero
    efd4:	003f1606 	br	ec30 <__alt_mem_onchip_memory2_0+0xf800dba0>
    efd8:	02000434 	movhi	r8,16
    efdc:	0009883a 	mov	r4,zero
    efe0:	423fffc4 	addi	r8,r8,-1
    efe4:	00bfffc4 	movi	r2,-1
    efe8:	0401ffc4 	movi	r16,2047
    efec:	003e6606 	br	e988 <__alt_mem_onchip_memory2_0+0xf800d8f8>
    eff0:	1c62b03a 	or	r17,r3,r17
    eff4:	8822c03a 	cmpne	r17,r17,zero
    eff8:	0005883a 	mov	r2,zero
    effc:	003f9906 	br	ee64 <__alt_mem_onchip_memory2_0+0xf800ddd4>
    f000:	2807883a 	mov	r3,r5
    f004:	3023883a 	mov	r17,r6
    f008:	0401ffc4 	movi	r16,2047
    f00c:	003df506 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    f010:	2807883a 	mov	r3,r5
    f014:	3023883a 	mov	r17,r6
    f018:	003df206 	br	e7e4 <__alt_mem_onchip_memory2_0+0xf800d754>
    f01c:	123ff804 	addi	r8,r2,-32
    f020:	01000804 	movi	r4,32
    f024:	1a10d83a 	srl	r8,r3,r8
    f028:	11000a26 	beq	r2,r4,f054 <__subdf3+0x8f4>
    f02c:	01001004 	movi	r4,64
    f030:	2085c83a 	sub	r2,r4,r2
    f034:	1884983a 	sll	r2,r3,r2
    f038:	1444b03a 	or	r2,r2,r17
    f03c:	1004c03a 	cmpne	r2,r2,zero
    f040:	40a2b03a 	or	r17,r8,r2
    f044:	0005883a 	mov	r2,zero
    f048:	003f8606 	br	ee64 <__alt_mem_onchip_memory2_0+0xf800ddd4>
    f04c:	0005883a 	mov	r2,zero
    f050:	003fdc06 	br	efc4 <__alt_mem_onchip_memory2_0+0xf800df34>
    f054:	0005883a 	mov	r2,zero
    f058:	003ff706 	br	f038 <__alt_mem_onchip_memory2_0+0xf800dfa8>

0000f05c <__fixdfsi>:
    f05c:	280cd53a 	srli	r6,r5,20
    f060:	00c00434 	movhi	r3,16
    f064:	18ffffc4 	addi	r3,r3,-1
    f068:	3181ffcc 	andi	r6,r6,2047
    f06c:	01c0ff84 	movi	r7,1022
    f070:	28c6703a 	and	r3,r5,r3
    f074:	280ad7fa 	srli	r5,r5,31
    f078:	3980120e 	bge	r7,r6,f0c4 <__fixdfsi+0x68>
    f07c:	00810744 	movi	r2,1053
    f080:	11800c16 	blt	r2,r6,f0b4 <__fixdfsi+0x58>
    f084:	00810cc4 	movi	r2,1075
    f088:	1185c83a 	sub	r2,r2,r6
    f08c:	01c007c4 	movi	r7,31
    f090:	18c00434 	orhi	r3,r3,16
    f094:	38800d16 	blt	r7,r2,f0cc <__fixdfsi+0x70>
    f098:	31befb44 	addi	r6,r6,-1043
    f09c:	2084d83a 	srl	r2,r4,r2
    f0a0:	1986983a 	sll	r3,r3,r6
    f0a4:	1884b03a 	or	r2,r3,r2
    f0a8:	28000726 	beq	r5,zero,f0c8 <__fixdfsi+0x6c>
    f0ac:	0085c83a 	sub	r2,zero,r2
    f0b0:	f800283a 	ret
    f0b4:	00a00034 	movhi	r2,32768
    f0b8:	10bfffc4 	addi	r2,r2,-1
    f0bc:	2885883a 	add	r2,r5,r2
    f0c0:	f800283a 	ret
    f0c4:	0005883a 	mov	r2,zero
    f0c8:	f800283a 	ret
    f0cc:	008104c4 	movi	r2,1043
    f0d0:	1185c83a 	sub	r2,r2,r6
    f0d4:	1884d83a 	srl	r2,r3,r2
    f0d8:	003ff306 	br	f0a8 <__alt_mem_onchip_memory2_0+0xf800e018>

0000f0dc <__floatsidf>:
    f0dc:	defffd04 	addi	sp,sp,-12
    f0e0:	dfc00215 	stw	ra,8(sp)
    f0e4:	dc400115 	stw	r17,4(sp)
    f0e8:	dc000015 	stw	r16,0(sp)
    f0ec:	20002b26 	beq	r4,zero,f19c <__floatsidf+0xc0>
    f0f0:	2023883a 	mov	r17,r4
    f0f4:	2020d7fa 	srli	r16,r4,31
    f0f8:	20002d16 	blt	r4,zero,f1b0 <__floatsidf+0xd4>
    f0fc:	8809883a 	mov	r4,r17
    f100:	000f2600 	call	f260 <__clzsi2>
    f104:	01410784 	movi	r5,1054
    f108:	288bc83a 	sub	r5,r5,r2
    f10c:	01010cc4 	movi	r4,1075
    f110:	2149c83a 	sub	r4,r4,r5
    f114:	00c007c4 	movi	r3,31
    f118:	1900160e 	bge	r3,r4,f174 <__floatsidf+0x98>
    f11c:	00c104c4 	movi	r3,1043
    f120:	1947c83a 	sub	r3,r3,r5
    f124:	88c6983a 	sll	r3,r17,r3
    f128:	00800434 	movhi	r2,16
    f12c:	10bfffc4 	addi	r2,r2,-1
    f130:	1886703a 	and	r3,r3,r2
    f134:	2941ffcc 	andi	r5,r5,2047
    f138:	800d883a 	mov	r6,r16
    f13c:	0005883a 	mov	r2,zero
    f140:	280a953a 	slli	r5,r5,20
    f144:	31803fcc 	andi	r6,r6,255
    f148:	01000434 	movhi	r4,16
    f14c:	300c97fa 	slli	r6,r6,31
    f150:	213fffc4 	addi	r4,r4,-1
    f154:	1906703a 	and	r3,r3,r4
    f158:	1946b03a 	or	r3,r3,r5
    f15c:	1986b03a 	or	r3,r3,r6
    f160:	dfc00217 	ldw	ra,8(sp)
    f164:	dc400117 	ldw	r17,4(sp)
    f168:	dc000017 	ldw	r16,0(sp)
    f16c:	dec00304 	addi	sp,sp,12
    f170:	f800283a 	ret
    f174:	00c002c4 	movi	r3,11
    f178:	1887c83a 	sub	r3,r3,r2
    f17c:	88c6d83a 	srl	r3,r17,r3
    f180:	8904983a 	sll	r2,r17,r4
    f184:	01000434 	movhi	r4,16
    f188:	213fffc4 	addi	r4,r4,-1
    f18c:	2941ffcc 	andi	r5,r5,2047
    f190:	1906703a 	and	r3,r3,r4
    f194:	800d883a 	mov	r6,r16
    f198:	003fe906 	br	f140 <__alt_mem_onchip_memory2_0+0xf800e0b0>
    f19c:	000d883a 	mov	r6,zero
    f1a0:	000b883a 	mov	r5,zero
    f1a4:	0007883a 	mov	r3,zero
    f1a8:	0005883a 	mov	r2,zero
    f1ac:	003fe406 	br	f140 <__alt_mem_onchip_memory2_0+0xf800e0b0>
    f1b0:	0123c83a 	sub	r17,zero,r4
    f1b4:	003fd106 	br	f0fc <__alt_mem_onchip_memory2_0+0xf800e06c>

0000f1b8 <__floatunsidf>:
    f1b8:	defffe04 	addi	sp,sp,-8
    f1bc:	dc000015 	stw	r16,0(sp)
    f1c0:	dfc00115 	stw	ra,4(sp)
    f1c4:	2021883a 	mov	r16,r4
    f1c8:	20002226 	beq	r4,zero,f254 <__floatunsidf+0x9c>
    f1cc:	000f2600 	call	f260 <__clzsi2>
    f1d0:	01010784 	movi	r4,1054
    f1d4:	2089c83a 	sub	r4,r4,r2
    f1d8:	01810cc4 	movi	r6,1075
    f1dc:	310dc83a 	sub	r6,r6,r4
    f1e0:	00c007c4 	movi	r3,31
    f1e4:	1980120e 	bge	r3,r6,f230 <__floatunsidf+0x78>
    f1e8:	00c104c4 	movi	r3,1043
    f1ec:	1907c83a 	sub	r3,r3,r4
    f1f0:	80ca983a 	sll	r5,r16,r3
    f1f4:	00800434 	movhi	r2,16
    f1f8:	10bfffc4 	addi	r2,r2,-1
    f1fc:	2101ffcc 	andi	r4,r4,2047
    f200:	0021883a 	mov	r16,zero
    f204:	288a703a 	and	r5,r5,r2
    f208:	2008953a 	slli	r4,r4,20
    f20c:	00c00434 	movhi	r3,16
    f210:	18ffffc4 	addi	r3,r3,-1
    f214:	28c6703a 	and	r3,r5,r3
    f218:	8005883a 	mov	r2,r16
    f21c:	1906b03a 	or	r3,r3,r4
    f220:	dfc00117 	ldw	ra,4(sp)
    f224:	dc000017 	ldw	r16,0(sp)
    f228:	dec00204 	addi	sp,sp,8
    f22c:	f800283a 	ret
    f230:	00c002c4 	movi	r3,11
    f234:	188bc83a 	sub	r5,r3,r2
    f238:	814ad83a 	srl	r5,r16,r5
    f23c:	00c00434 	movhi	r3,16
    f240:	18ffffc4 	addi	r3,r3,-1
    f244:	81a0983a 	sll	r16,r16,r6
    f248:	2101ffcc 	andi	r4,r4,2047
    f24c:	28ca703a 	and	r5,r5,r3
    f250:	003fed06 	br	f208 <__alt_mem_onchip_memory2_0+0xf800e178>
    f254:	0009883a 	mov	r4,zero
    f258:	000b883a 	mov	r5,zero
    f25c:	003fea06 	br	f208 <__alt_mem_onchip_memory2_0+0xf800e178>

0000f260 <__clzsi2>:
    f260:	00bfffd4 	movui	r2,65535
    f264:	11000536 	bltu	r2,r4,f27c <__clzsi2+0x1c>
    f268:	00803fc4 	movi	r2,255
    f26c:	11000f36 	bltu	r2,r4,f2ac <__clzsi2+0x4c>
    f270:	00800804 	movi	r2,32
    f274:	0007883a 	mov	r3,zero
    f278:	00000506 	br	f290 <__clzsi2+0x30>
    f27c:	00804034 	movhi	r2,256
    f280:	10bfffc4 	addi	r2,r2,-1
    f284:	11000c2e 	bgeu	r2,r4,f2b8 <__clzsi2+0x58>
    f288:	00800204 	movi	r2,8
    f28c:	00c00604 	movi	r3,24
    f290:	20c8d83a 	srl	r4,r4,r3
    f294:	00c00074 	movhi	r3,1
    f298:	18c91404 	addi	r3,r3,9296
    f29c:	1909883a 	add	r4,r3,r4
    f2a0:	20c00003 	ldbu	r3,0(r4)
    f2a4:	10c5c83a 	sub	r2,r2,r3
    f2a8:	f800283a 	ret
    f2ac:	00800604 	movi	r2,24
    f2b0:	00c00204 	movi	r3,8
    f2b4:	003ff606 	br	f290 <__alt_mem_onchip_memory2_0+0xf800e200>
    f2b8:	00800404 	movi	r2,16
    f2bc:	1007883a 	mov	r3,r2
    f2c0:	003ff306 	br	f290 <__alt_mem_onchip_memory2_0+0xf800e200>

0000f2c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f2c4:	defffe04 	addi	sp,sp,-8
    f2c8:	dfc00115 	stw	ra,4(sp)
    f2cc:	df000015 	stw	fp,0(sp)
    f2d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f2d4:	d0a00b17 	ldw	r2,-32724(gp)
    f2d8:	10000326 	beq	r2,zero,f2e8 <alt_get_errno+0x24>
    f2dc:	d0a00b17 	ldw	r2,-32724(gp)
    f2e0:	103ee83a 	callr	r2
    f2e4:	00000106 	br	f2ec <alt_get_errno+0x28>
    f2e8:	d0a6d204 	addi	r2,gp,-25784
}
    f2ec:	e037883a 	mov	sp,fp
    f2f0:	dfc00117 	ldw	ra,4(sp)
    f2f4:	df000017 	ldw	fp,0(sp)
    f2f8:	dec00204 	addi	sp,sp,8
    f2fc:	f800283a 	ret

0000f300 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f300:	defffb04 	addi	sp,sp,-20
    f304:	dfc00415 	stw	ra,16(sp)
    f308:	df000315 	stw	fp,12(sp)
    f30c:	df000304 	addi	fp,sp,12
    f310:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f314:	e0bfff17 	ldw	r2,-4(fp)
    f318:	10000816 	blt	r2,zero,f33c <close+0x3c>
    f31c:	01400304 	movi	r5,12
    f320:	e13fff17 	ldw	r4,-4(fp)
    f324:	000c9f80 	call	c9f8 <__mulsi3>
    f328:	1007883a 	mov	r3,r2
    f32c:	00800074 	movhi	r2,1
    f330:	108b9404 	addi	r2,r2,11856
    f334:	1885883a 	add	r2,r3,r2
    f338:	00000106 	br	f340 <close+0x40>
    f33c:	0005883a 	mov	r2,zero
    f340:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f344:	e0bffd17 	ldw	r2,-12(fp)
    f348:	10001926 	beq	r2,zero,f3b0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f34c:	e0bffd17 	ldw	r2,-12(fp)
    f350:	10800017 	ldw	r2,0(r2)
    f354:	10800417 	ldw	r2,16(r2)
    f358:	10000626 	beq	r2,zero,f374 <close+0x74>
    f35c:	e0bffd17 	ldw	r2,-12(fp)
    f360:	10800017 	ldw	r2,0(r2)
    f364:	10800417 	ldw	r2,16(r2)
    f368:	e13ffd17 	ldw	r4,-12(fp)
    f36c:	103ee83a 	callr	r2
    f370:	00000106 	br	f378 <close+0x78>
    f374:	0005883a 	mov	r2,zero
    f378:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f37c:	e13fff17 	ldw	r4,-4(fp)
    f380:	000f9e80 	call	f9e8 <alt_release_fd>
    if (rval < 0)
    f384:	e0bffe17 	ldw	r2,-8(fp)
    f388:	1000070e 	bge	r2,zero,f3a8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    f38c:	000f2c40 	call	f2c4 <alt_get_errno>
    f390:	1007883a 	mov	r3,r2
    f394:	e0bffe17 	ldw	r2,-8(fp)
    f398:	0085c83a 	sub	r2,zero,r2
    f39c:	18800015 	stw	r2,0(r3)
      return -1;
    f3a0:	00bfffc4 	movi	r2,-1
    f3a4:	00000706 	br	f3c4 <close+0xc4>
    }
    return 0;
    f3a8:	0005883a 	mov	r2,zero
    f3ac:	00000506 	br	f3c4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f3b0:	000f2c40 	call	f2c4 <alt_get_errno>
    f3b4:	1007883a 	mov	r3,r2
    f3b8:	00801444 	movi	r2,81
    f3bc:	18800015 	stw	r2,0(r3)
    return -1;
    f3c0:	00bfffc4 	movi	r2,-1
  }
}
    f3c4:	e037883a 	mov	sp,fp
    f3c8:	dfc00117 	ldw	ra,4(sp)
    f3cc:	df000017 	ldw	fp,0(sp)
    f3d0:	dec00204 	addi	sp,sp,8
    f3d4:	f800283a 	ret

0000f3d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f3d8:	defffc04 	addi	sp,sp,-16
    f3dc:	df000315 	stw	fp,12(sp)
    f3e0:	df000304 	addi	fp,sp,12
    f3e4:	e13ffd15 	stw	r4,-12(fp)
    f3e8:	e17ffe15 	stw	r5,-8(fp)
    f3ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f3f0:	e0bfff17 	ldw	r2,-4(fp)
}
    f3f4:	e037883a 	mov	sp,fp
    f3f8:	df000017 	ldw	fp,0(sp)
    f3fc:	dec00104 	addi	sp,sp,4
    f400:	f800283a 	ret

0000f404 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f404:	defffe04 	addi	sp,sp,-8
    f408:	dfc00115 	stw	ra,4(sp)
    f40c:	df000015 	stw	fp,0(sp)
    f410:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f414:	d0a00b17 	ldw	r2,-32724(gp)
    f418:	10000326 	beq	r2,zero,f428 <alt_get_errno+0x24>
    f41c:	d0a00b17 	ldw	r2,-32724(gp)
    f420:	103ee83a 	callr	r2
    f424:	00000106 	br	f42c <alt_get_errno+0x28>
    f428:	d0a6d204 	addi	r2,gp,-25784
}
    f42c:	e037883a 	mov	sp,fp
    f430:	dfc00117 	ldw	ra,4(sp)
    f434:	df000017 	ldw	fp,0(sp)
    f438:	dec00204 	addi	sp,sp,8
    f43c:	f800283a 	ret

0000f440 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f440:	defffb04 	addi	sp,sp,-20
    f444:	dfc00415 	stw	ra,16(sp)
    f448:	df000315 	stw	fp,12(sp)
    f44c:	df000304 	addi	fp,sp,12
    f450:	e13ffe15 	stw	r4,-8(fp)
    f454:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f458:	e0bffe17 	ldw	r2,-8(fp)
    f45c:	10000816 	blt	r2,zero,f480 <fstat+0x40>
    f460:	01400304 	movi	r5,12
    f464:	e13ffe17 	ldw	r4,-8(fp)
    f468:	000c9f80 	call	c9f8 <__mulsi3>
    f46c:	1007883a 	mov	r3,r2
    f470:	00800074 	movhi	r2,1
    f474:	108b9404 	addi	r2,r2,11856
    f478:	1885883a 	add	r2,r3,r2
    f47c:	00000106 	br	f484 <fstat+0x44>
    f480:	0005883a 	mov	r2,zero
    f484:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f488:	e0bffd17 	ldw	r2,-12(fp)
    f48c:	10001026 	beq	r2,zero,f4d0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f490:	e0bffd17 	ldw	r2,-12(fp)
    f494:	10800017 	ldw	r2,0(r2)
    f498:	10800817 	ldw	r2,32(r2)
    f49c:	10000726 	beq	r2,zero,f4bc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    f4a0:	e0bffd17 	ldw	r2,-12(fp)
    f4a4:	10800017 	ldw	r2,0(r2)
    f4a8:	10800817 	ldw	r2,32(r2)
    f4ac:	e17fff17 	ldw	r5,-4(fp)
    f4b0:	e13ffd17 	ldw	r4,-12(fp)
    f4b4:	103ee83a 	callr	r2
    f4b8:	00000a06 	br	f4e4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f4bc:	e0bfff17 	ldw	r2,-4(fp)
    f4c0:	00c80004 	movi	r3,8192
    f4c4:	10c00115 	stw	r3,4(r2)
      return 0;
    f4c8:	0005883a 	mov	r2,zero
    f4cc:	00000506 	br	f4e4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f4d0:	000f4040 	call	f404 <alt_get_errno>
    f4d4:	1007883a 	mov	r3,r2
    f4d8:	00801444 	movi	r2,81
    f4dc:	18800015 	stw	r2,0(r3)
    return -1;
    f4e0:	00bfffc4 	movi	r2,-1
  }
}
    f4e4:	e037883a 	mov	sp,fp
    f4e8:	dfc00117 	ldw	ra,4(sp)
    f4ec:	df000017 	ldw	fp,0(sp)
    f4f0:	dec00204 	addi	sp,sp,8
    f4f4:	f800283a 	ret

0000f4f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f4f8:	defffe04 	addi	sp,sp,-8
    f4fc:	dfc00115 	stw	ra,4(sp)
    f500:	df000015 	stw	fp,0(sp)
    f504:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f508:	d0a00b17 	ldw	r2,-32724(gp)
    f50c:	10000326 	beq	r2,zero,f51c <alt_get_errno+0x24>
    f510:	d0a00b17 	ldw	r2,-32724(gp)
    f514:	103ee83a 	callr	r2
    f518:	00000106 	br	f520 <alt_get_errno+0x28>
    f51c:	d0a6d204 	addi	r2,gp,-25784
}
    f520:	e037883a 	mov	sp,fp
    f524:	dfc00117 	ldw	ra,4(sp)
    f528:	df000017 	ldw	fp,0(sp)
    f52c:	dec00204 	addi	sp,sp,8
    f530:	f800283a 	ret

0000f534 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f534:	deffed04 	addi	sp,sp,-76
    f538:	dfc01215 	stw	ra,72(sp)
    f53c:	df001115 	stw	fp,68(sp)
    f540:	df001104 	addi	fp,sp,68
    f544:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f548:	e0bfff17 	ldw	r2,-4(fp)
    f54c:	10000816 	blt	r2,zero,f570 <isatty+0x3c>
    f550:	01400304 	movi	r5,12
    f554:	e13fff17 	ldw	r4,-4(fp)
    f558:	000c9f80 	call	c9f8 <__mulsi3>
    f55c:	1007883a 	mov	r3,r2
    f560:	00800074 	movhi	r2,1
    f564:	108b9404 	addi	r2,r2,11856
    f568:	1885883a 	add	r2,r3,r2
    f56c:	00000106 	br	f574 <isatty+0x40>
    f570:	0005883a 	mov	r2,zero
    f574:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f578:	e0bfef17 	ldw	r2,-68(fp)
    f57c:	10000e26 	beq	r2,zero,f5b8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f580:	e0bfef17 	ldw	r2,-68(fp)
    f584:	10800017 	ldw	r2,0(r2)
    f588:	10800817 	ldw	r2,32(r2)
    f58c:	1000021e 	bne	r2,zero,f598 <isatty+0x64>
    {
      return 1;
    f590:	00800044 	movi	r2,1
    f594:	00000d06 	br	f5cc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f598:	e0bff004 	addi	r2,fp,-64
    f59c:	100b883a 	mov	r5,r2
    f5a0:	e13fff17 	ldw	r4,-4(fp)
    f5a4:	000f4400 	call	f440 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f5a8:	e0bff117 	ldw	r2,-60(fp)
    f5ac:	10880020 	cmpeqi	r2,r2,8192
    f5b0:	10803fcc 	andi	r2,r2,255
    f5b4:	00000506 	br	f5cc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f5b8:	000f4f80 	call	f4f8 <alt_get_errno>
    f5bc:	1007883a 	mov	r3,r2
    f5c0:	00801444 	movi	r2,81
    f5c4:	18800015 	stw	r2,0(r3)
    return 0;
    f5c8:	0005883a 	mov	r2,zero
  }
}
    f5cc:	e037883a 	mov	sp,fp
    f5d0:	dfc00117 	ldw	ra,4(sp)
    f5d4:	df000017 	ldw	fp,0(sp)
    f5d8:	dec00204 	addi	sp,sp,8
    f5dc:	f800283a 	ret

0000f5e0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f5e0:	defffc04 	addi	sp,sp,-16
    f5e4:	df000315 	stw	fp,12(sp)
    f5e8:	df000304 	addi	fp,sp,12
    f5ec:	e13ffd15 	stw	r4,-12(fp)
    f5f0:	e17ffe15 	stw	r5,-8(fp)
    f5f4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f5f8:	e0fffe17 	ldw	r3,-8(fp)
    f5fc:	e0bffd17 	ldw	r2,-12(fp)
    f600:	18800c26 	beq	r3,r2,f634 <alt_load_section+0x54>
  {
    while( to != end )
    f604:	00000806 	br	f628 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f608:	e0bffe17 	ldw	r2,-8(fp)
    f60c:	10c00104 	addi	r3,r2,4
    f610:	e0fffe15 	stw	r3,-8(fp)
    f614:	e0fffd17 	ldw	r3,-12(fp)
    f618:	19000104 	addi	r4,r3,4
    f61c:	e13ffd15 	stw	r4,-12(fp)
    f620:	18c00017 	ldw	r3,0(r3)
    f624:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f628:	e0fffe17 	ldw	r3,-8(fp)
    f62c:	e0bfff17 	ldw	r2,-4(fp)
    f630:	18bff51e 	bne	r3,r2,f608 <__alt_mem_onchip_memory2_0+0xf800e578>
    {
      *to++ = *from++;
    }
  }
}
    f634:	0001883a 	nop
    f638:	e037883a 	mov	sp,fp
    f63c:	df000017 	ldw	fp,0(sp)
    f640:	dec00104 	addi	sp,sp,4
    f644:	f800283a 	ret

0000f648 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f648:	defffe04 	addi	sp,sp,-8
    f64c:	dfc00115 	stw	ra,4(sp)
    f650:	df000015 	stw	fp,0(sp)
    f654:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f658:	01800074 	movhi	r6,1
    f65c:	31901c04 	addi	r6,r6,16496
    f660:	01400074 	movhi	r5,1
    f664:	29496104 	addi	r5,r5,9604
    f668:	01000074 	movhi	r4,1
    f66c:	21101c04 	addi	r4,r4,16496
    f670:	000f5e00 	call	f5e0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f674:	01800034 	movhi	r6,0
    f678:	31808c04 	addi	r6,r6,560
    f67c:	01400034 	movhi	r5,0
    f680:	29400804 	addi	r5,r5,32
    f684:	01000034 	movhi	r4,0
    f688:	21000804 	addi	r4,r4,32
    f68c:	000f5e00 	call	f5e0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f690:	01800074 	movhi	r6,1
    f694:	31896104 	addi	r6,r6,9604
    f698:	01400074 	movhi	r5,1
    f69c:	2946b904 	addi	r5,r5,6884
    f6a0:	01000074 	movhi	r4,1
    f6a4:	2106b904 	addi	r4,r4,6884
    f6a8:	000f5e00 	call	f5e0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f6ac:	0010a2c0 	call	10a2c <alt_dcache_flush_all>
  alt_icache_flush_all();
    f6b0:	0010bec0 	call	10bec <alt_icache_flush_all>
}
    f6b4:	0001883a 	nop
    f6b8:	e037883a 	mov	sp,fp
    f6bc:	dfc00117 	ldw	ra,4(sp)
    f6c0:	df000017 	ldw	fp,0(sp)
    f6c4:	dec00204 	addi	sp,sp,8
    f6c8:	f800283a 	ret

0000f6cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f6cc:	defffe04 	addi	sp,sp,-8
    f6d0:	dfc00115 	stw	ra,4(sp)
    f6d4:	df000015 	stw	fp,0(sp)
    f6d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f6dc:	d0a00b17 	ldw	r2,-32724(gp)
    f6e0:	10000326 	beq	r2,zero,f6f0 <alt_get_errno+0x24>
    f6e4:	d0a00b17 	ldw	r2,-32724(gp)
    f6e8:	103ee83a 	callr	r2
    f6ec:	00000106 	br	f6f4 <alt_get_errno+0x28>
    f6f0:	d0a6d204 	addi	r2,gp,-25784
}
    f6f4:	e037883a 	mov	sp,fp
    f6f8:	dfc00117 	ldw	ra,4(sp)
    f6fc:	df000017 	ldw	fp,0(sp)
    f700:	dec00204 	addi	sp,sp,8
    f704:	f800283a 	ret

0000f708 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f708:	defff904 	addi	sp,sp,-28
    f70c:	dfc00615 	stw	ra,24(sp)
    f710:	df000515 	stw	fp,20(sp)
    f714:	df000504 	addi	fp,sp,20
    f718:	e13ffd15 	stw	r4,-12(fp)
    f71c:	e17ffe15 	stw	r5,-8(fp)
    f720:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f724:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f728:	e0bffd17 	ldw	r2,-12(fp)
    f72c:	10000816 	blt	r2,zero,f750 <lseek+0x48>
    f730:	01400304 	movi	r5,12
    f734:	e13ffd17 	ldw	r4,-12(fp)
    f738:	000c9f80 	call	c9f8 <__mulsi3>
    f73c:	1007883a 	mov	r3,r2
    f740:	00800074 	movhi	r2,1
    f744:	108b9404 	addi	r2,r2,11856
    f748:	1885883a 	add	r2,r3,r2
    f74c:	00000106 	br	f754 <lseek+0x4c>
    f750:	0005883a 	mov	r2,zero
    f754:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f758:	e0bffc17 	ldw	r2,-16(fp)
    f75c:	10001026 	beq	r2,zero,f7a0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f760:	e0bffc17 	ldw	r2,-16(fp)
    f764:	10800017 	ldw	r2,0(r2)
    f768:	10800717 	ldw	r2,28(r2)
    f76c:	10000926 	beq	r2,zero,f794 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f770:	e0bffc17 	ldw	r2,-16(fp)
    f774:	10800017 	ldw	r2,0(r2)
    f778:	10800717 	ldw	r2,28(r2)
    f77c:	e1bfff17 	ldw	r6,-4(fp)
    f780:	e17ffe17 	ldw	r5,-8(fp)
    f784:	e13ffc17 	ldw	r4,-16(fp)
    f788:	103ee83a 	callr	r2
    f78c:	e0bffb15 	stw	r2,-20(fp)
    f790:	00000506 	br	f7a8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f794:	00bfde84 	movi	r2,-134
    f798:	e0bffb15 	stw	r2,-20(fp)
    f79c:	00000206 	br	f7a8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    f7a0:	00bfebc4 	movi	r2,-81
    f7a4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f7a8:	e0bffb17 	ldw	r2,-20(fp)
    f7ac:	1000070e 	bge	r2,zero,f7cc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    f7b0:	000f6cc0 	call	f6cc <alt_get_errno>
    f7b4:	1007883a 	mov	r3,r2
    f7b8:	e0bffb17 	ldw	r2,-20(fp)
    f7bc:	0085c83a 	sub	r2,zero,r2
    f7c0:	18800015 	stw	r2,0(r3)
    rc = -1;
    f7c4:	00bfffc4 	movi	r2,-1
    f7c8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f7cc:	e0bffb17 	ldw	r2,-20(fp)
}
    f7d0:	e037883a 	mov	sp,fp
    f7d4:	dfc00117 	ldw	ra,4(sp)
    f7d8:	df000017 	ldw	fp,0(sp)
    f7dc:	dec00204 	addi	sp,sp,8
    f7e0:	f800283a 	ret

0000f7e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f7e4:	defffd04 	addi	sp,sp,-12
    f7e8:	dfc00215 	stw	ra,8(sp)
    f7ec:	df000115 	stw	fp,4(sp)
    f7f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f7f4:	0009883a 	mov	r4,zero
    f7f8:	000fcbc0 	call	fcbc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f7fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f800:	000fcf40 	call	fcf4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f804:	01800074 	movhi	r6,1
    f808:	31895704 	addi	r6,r6,9564
    f80c:	01400074 	movhi	r5,1
    f810:	29495704 	addi	r5,r5,9564
    f814:	01000074 	movhi	r4,1
    f818:	21095704 	addi	r4,r4,9564
    f81c:	0010f900 	call	10f90 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f820:	0010b2c0 	call	10b2c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f824:	01000074 	movhi	r4,1
    f828:	2102e304 	addi	r4,r4,2956
    f82c:	00117500 	call	11750 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f830:	d0a6d317 	ldw	r2,-25780(gp)
    f834:	d0e6d417 	ldw	r3,-25776(gp)
    f838:	d126d517 	ldw	r4,-25772(gp)
    f83c:	200d883a 	mov	r6,r4
    f840:	180b883a 	mov	r5,r3
    f844:	1009883a 	mov	r4,r2
    f848:	00004600 	call	460 <main>
    f84c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f850:	01000044 	movi	r4,1
    f854:	000f3000 	call	f300 <close>
  exit (result);
    f858:	e13fff17 	ldw	r4,-4(fp)
    f85c:	00117640 	call	11764 <exit>

0000f860 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f860:	defffe04 	addi	sp,sp,-8
    f864:	df000115 	stw	fp,4(sp)
    f868:	df000104 	addi	fp,sp,4
    f86c:	e13fff15 	stw	r4,-4(fp)
}
    f870:	0001883a 	nop
    f874:	e037883a 	mov	sp,fp
    f878:	df000017 	ldw	fp,0(sp)
    f87c:	dec00104 	addi	sp,sp,4
    f880:	f800283a 	ret

0000f884 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f884:	defffe04 	addi	sp,sp,-8
    f888:	df000115 	stw	fp,4(sp)
    f88c:	df000104 	addi	fp,sp,4
    f890:	e13fff15 	stw	r4,-4(fp)
}
    f894:	0001883a 	nop
    f898:	e037883a 	mov	sp,fp
    f89c:	df000017 	ldw	fp,0(sp)
    f8a0:	dec00104 	addi	sp,sp,4
    f8a4:	f800283a 	ret

0000f8a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f8a8:	defffe04 	addi	sp,sp,-8
    f8ac:	dfc00115 	stw	ra,4(sp)
    f8b0:	df000015 	stw	fp,0(sp)
    f8b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f8b8:	d0a00b17 	ldw	r2,-32724(gp)
    f8bc:	10000326 	beq	r2,zero,f8cc <alt_get_errno+0x24>
    f8c0:	d0a00b17 	ldw	r2,-32724(gp)
    f8c4:	103ee83a 	callr	r2
    f8c8:	00000106 	br	f8d0 <alt_get_errno+0x28>
    f8cc:	d0a6d204 	addi	r2,gp,-25784
}
    f8d0:	e037883a 	mov	sp,fp
    f8d4:	dfc00117 	ldw	ra,4(sp)
    f8d8:	df000017 	ldw	fp,0(sp)
    f8dc:	dec00204 	addi	sp,sp,8
    f8e0:	f800283a 	ret

0000f8e4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f8e4:	defff904 	addi	sp,sp,-28
    f8e8:	dfc00615 	stw	ra,24(sp)
    f8ec:	df000515 	stw	fp,20(sp)
    f8f0:	df000504 	addi	fp,sp,20
    f8f4:	e13ffd15 	stw	r4,-12(fp)
    f8f8:	e17ffe15 	stw	r5,-8(fp)
    f8fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f900:	e0bffd17 	ldw	r2,-12(fp)
    f904:	10000816 	blt	r2,zero,f928 <read+0x44>
    f908:	01400304 	movi	r5,12
    f90c:	e13ffd17 	ldw	r4,-12(fp)
    f910:	000c9f80 	call	c9f8 <__mulsi3>
    f914:	1007883a 	mov	r3,r2
    f918:	00800074 	movhi	r2,1
    f91c:	108b9404 	addi	r2,r2,11856
    f920:	1885883a 	add	r2,r3,r2
    f924:	00000106 	br	f92c <read+0x48>
    f928:	0005883a 	mov	r2,zero
    f92c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f930:	e0bffb17 	ldw	r2,-20(fp)
    f934:	10002226 	beq	r2,zero,f9c0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f938:	e0bffb17 	ldw	r2,-20(fp)
    f93c:	10800217 	ldw	r2,8(r2)
    f940:	108000cc 	andi	r2,r2,3
    f944:	10800060 	cmpeqi	r2,r2,1
    f948:	1000181e 	bne	r2,zero,f9ac <read+0xc8>
        (fd->dev->read))
    f94c:	e0bffb17 	ldw	r2,-20(fp)
    f950:	10800017 	ldw	r2,0(r2)
    f954:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f958:	10001426 	beq	r2,zero,f9ac <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f95c:	e0bffb17 	ldw	r2,-20(fp)
    f960:	10800017 	ldw	r2,0(r2)
    f964:	10800517 	ldw	r2,20(r2)
    f968:	e0ffff17 	ldw	r3,-4(fp)
    f96c:	180d883a 	mov	r6,r3
    f970:	e17ffe17 	ldw	r5,-8(fp)
    f974:	e13ffb17 	ldw	r4,-20(fp)
    f978:	103ee83a 	callr	r2
    f97c:	e0bffc15 	stw	r2,-16(fp)
    f980:	e0bffc17 	ldw	r2,-16(fp)
    f984:	1000070e 	bge	r2,zero,f9a4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    f988:	000f8a80 	call	f8a8 <alt_get_errno>
    f98c:	1007883a 	mov	r3,r2
    f990:	e0bffc17 	ldw	r2,-16(fp)
    f994:	0085c83a 	sub	r2,zero,r2
    f998:	18800015 	stw	r2,0(r3)
          return -1;
    f99c:	00bfffc4 	movi	r2,-1
    f9a0:	00000c06 	br	f9d4 <read+0xf0>
        }
        return rval;
    f9a4:	e0bffc17 	ldw	r2,-16(fp)
    f9a8:	00000a06 	br	f9d4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f9ac:	000f8a80 	call	f8a8 <alt_get_errno>
    f9b0:	1007883a 	mov	r3,r2
    f9b4:	00800344 	movi	r2,13
    f9b8:	18800015 	stw	r2,0(r3)
    f9bc:	00000406 	br	f9d0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f9c0:	000f8a80 	call	f8a8 <alt_get_errno>
    f9c4:	1007883a 	mov	r3,r2
    f9c8:	00801444 	movi	r2,81
    f9cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f9d0:	00bfffc4 	movi	r2,-1
}
    f9d4:	e037883a 	mov	sp,fp
    f9d8:	dfc00117 	ldw	ra,4(sp)
    f9dc:	df000017 	ldw	fp,0(sp)
    f9e0:	dec00204 	addi	sp,sp,8
    f9e4:	f800283a 	ret

0000f9e8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f9e8:	defffc04 	addi	sp,sp,-16
    f9ec:	dfc00315 	stw	ra,12(sp)
    f9f0:	df000215 	stw	fp,8(sp)
    f9f4:	dc000115 	stw	r16,4(sp)
    f9f8:	df000204 	addi	fp,sp,8
    f9fc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    fa00:	e0bffe17 	ldw	r2,-8(fp)
    fa04:	108000d0 	cmplti	r2,r2,3
    fa08:	1000111e 	bne	r2,zero,fa50 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    fa0c:	04000074 	movhi	r16,1
    fa10:	840b9404 	addi	r16,r16,11856
    fa14:	e0bffe17 	ldw	r2,-8(fp)
    fa18:	01400304 	movi	r5,12
    fa1c:	1009883a 	mov	r4,r2
    fa20:	000c9f80 	call	c9f8 <__mulsi3>
    fa24:	8085883a 	add	r2,r16,r2
    fa28:	10800204 	addi	r2,r2,8
    fa2c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fa30:	04000074 	movhi	r16,1
    fa34:	840b9404 	addi	r16,r16,11856
    fa38:	e0bffe17 	ldw	r2,-8(fp)
    fa3c:	01400304 	movi	r5,12
    fa40:	1009883a 	mov	r4,r2
    fa44:	000c9f80 	call	c9f8 <__mulsi3>
    fa48:	8085883a 	add	r2,r16,r2
    fa4c:	10000015 	stw	zero,0(r2)
  }
}
    fa50:	0001883a 	nop
    fa54:	e6ffff04 	addi	sp,fp,-4
    fa58:	dfc00217 	ldw	ra,8(sp)
    fa5c:	df000117 	ldw	fp,4(sp)
    fa60:	dc000017 	ldw	r16,0(sp)
    fa64:	dec00304 	addi	sp,sp,12
    fa68:	f800283a 	ret

0000fa6c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fa6c:	defff904 	addi	sp,sp,-28
    fa70:	df000615 	stw	fp,24(sp)
    fa74:	df000604 	addi	fp,sp,24
    fa78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa7c:	0005303a 	rdctl	r2,status
    fa80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa84:	e0fffe17 	ldw	r3,-8(fp)
    fa88:	00bfff84 	movi	r2,-2
    fa8c:	1884703a 	and	r2,r3,r2
    fa90:	1001703a 	wrctl	status,r2
  
  return context;
    fa94:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fa98:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fa9c:	d0a00c17 	ldw	r2,-32720(gp)
    faa0:	10c000c4 	addi	r3,r2,3
    faa4:	00bfff04 	movi	r2,-4
    faa8:	1884703a 	and	r2,r3,r2
    faac:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fab0:	d0e00c17 	ldw	r3,-32720(gp)
    fab4:	e0bfff17 	ldw	r2,-4(fp)
    fab8:	1887883a 	add	r3,r3,r2
    fabc:	00820034 	movhi	r2,2048
    fac0:	10800004 	addi	r2,r2,0
    fac4:	10c0062e 	bgeu	r2,r3,fae0 <sbrk+0x74>
    fac8:	e0bffb17 	ldw	r2,-20(fp)
    facc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fad0:	e0bffa17 	ldw	r2,-24(fp)
    fad4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fad8:	00bfffc4 	movi	r2,-1
    fadc:	00000b06 	br	fb0c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fae0:	d0a00c17 	ldw	r2,-32720(gp)
    fae4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    fae8:	d0e00c17 	ldw	r3,-32720(gp)
    faec:	e0bfff17 	ldw	r2,-4(fp)
    faf0:	1885883a 	add	r2,r3,r2
    faf4:	d0a00c15 	stw	r2,-32720(gp)
    faf8:	e0bffb17 	ldw	r2,-20(fp)
    fafc:	e0bffc15 	stw	r2,-16(fp)
    fb00:	e0bffc17 	ldw	r2,-16(fp)
    fb04:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fb08:	e0bffd17 	ldw	r2,-12(fp)
} 
    fb0c:	e037883a 	mov	sp,fp
    fb10:	df000017 	ldw	fp,0(sp)
    fb14:	dec00104 	addi	sp,sp,4
    fb18:	f800283a 	ret

0000fb1c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    fb1c:	defffd04 	addi	sp,sp,-12
    fb20:	dfc00215 	stw	ra,8(sp)
    fb24:	df000115 	stw	fp,4(sp)
    fb28:	df000104 	addi	fp,sp,4
    fb2c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    fb30:	e13fff17 	ldw	r4,-4(fp)
    fb34:	00108d40 	call	108d4 <alt_busy_sleep>
}
    fb38:	e037883a 	mov	sp,fp
    fb3c:	dfc00117 	ldw	ra,4(sp)
    fb40:	df000017 	ldw	fp,0(sp)
    fb44:	dec00204 	addi	sp,sp,8
    fb48:	f800283a 	ret

0000fb4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fb4c:	defffe04 	addi	sp,sp,-8
    fb50:	dfc00115 	stw	ra,4(sp)
    fb54:	df000015 	stw	fp,0(sp)
    fb58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fb5c:	d0a00b17 	ldw	r2,-32724(gp)
    fb60:	10000326 	beq	r2,zero,fb70 <alt_get_errno+0x24>
    fb64:	d0a00b17 	ldw	r2,-32724(gp)
    fb68:	103ee83a 	callr	r2
    fb6c:	00000106 	br	fb74 <alt_get_errno+0x28>
    fb70:	d0a6d204 	addi	r2,gp,-25784
}
    fb74:	e037883a 	mov	sp,fp
    fb78:	dfc00117 	ldw	ra,4(sp)
    fb7c:	df000017 	ldw	fp,0(sp)
    fb80:	dec00204 	addi	sp,sp,8
    fb84:	f800283a 	ret

0000fb88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fb88:	defff904 	addi	sp,sp,-28
    fb8c:	dfc00615 	stw	ra,24(sp)
    fb90:	df000515 	stw	fp,20(sp)
    fb94:	df000504 	addi	fp,sp,20
    fb98:	e13ffd15 	stw	r4,-12(fp)
    fb9c:	e17ffe15 	stw	r5,-8(fp)
    fba0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fba4:	e0bffd17 	ldw	r2,-12(fp)
    fba8:	10000816 	blt	r2,zero,fbcc <write+0x44>
    fbac:	01400304 	movi	r5,12
    fbb0:	e13ffd17 	ldw	r4,-12(fp)
    fbb4:	000c9f80 	call	c9f8 <__mulsi3>
    fbb8:	1007883a 	mov	r3,r2
    fbbc:	00800074 	movhi	r2,1
    fbc0:	108b9404 	addi	r2,r2,11856
    fbc4:	1885883a 	add	r2,r3,r2
    fbc8:	00000106 	br	fbd0 <write+0x48>
    fbcc:	0005883a 	mov	r2,zero
    fbd0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fbd4:	e0bffb17 	ldw	r2,-20(fp)
    fbd8:	10002126 	beq	r2,zero,fc60 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fbdc:	e0bffb17 	ldw	r2,-20(fp)
    fbe0:	10800217 	ldw	r2,8(r2)
    fbe4:	108000cc 	andi	r2,r2,3
    fbe8:	10001826 	beq	r2,zero,fc4c <write+0xc4>
    fbec:	e0bffb17 	ldw	r2,-20(fp)
    fbf0:	10800017 	ldw	r2,0(r2)
    fbf4:	10800617 	ldw	r2,24(r2)
    fbf8:	10001426 	beq	r2,zero,fc4c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fbfc:	e0bffb17 	ldw	r2,-20(fp)
    fc00:	10800017 	ldw	r2,0(r2)
    fc04:	10800617 	ldw	r2,24(r2)
    fc08:	e0ffff17 	ldw	r3,-4(fp)
    fc0c:	180d883a 	mov	r6,r3
    fc10:	e17ffe17 	ldw	r5,-8(fp)
    fc14:	e13ffb17 	ldw	r4,-20(fp)
    fc18:	103ee83a 	callr	r2
    fc1c:	e0bffc15 	stw	r2,-16(fp)
    fc20:	e0bffc17 	ldw	r2,-16(fp)
    fc24:	1000070e 	bge	r2,zero,fc44 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    fc28:	000fb4c0 	call	fb4c <alt_get_errno>
    fc2c:	1007883a 	mov	r3,r2
    fc30:	e0bffc17 	ldw	r2,-16(fp)
    fc34:	0085c83a 	sub	r2,zero,r2
    fc38:	18800015 	stw	r2,0(r3)
        return -1;
    fc3c:	00bfffc4 	movi	r2,-1
    fc40:	00000c06 	br	fc74 <write+0xec>
      }
      return rval;
    fc44:	e0bffc17 	ldw	r2,-16(fp)
    fc48:	00000a06 	br	fc74 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fc4c:	000fb4c0 	call	fb4c <alt_get_errno>
    fc50:	1007883a 	mov	r3,r2
    fc54:	00800344 	movi	r2,13
    fc58:	18800015 	stw	r2,0(r3)
    fc5c:	00000406 	br	fc70 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fc60:	000fb4c0 	call	fb4c <alt_get_errno>
    fc64:	1007883a 	mov	r3,r2
    fc68:	00801444 	movi	r2,81
    fc6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fc70:	00bfffc4 	movi	r2,-1
}
    fc74:	e037883a 	mov	sp,fp
    fc78:	dfc00117 	ldw	ra,4(sp)
    fc7c:	df000017 	ldw	fp,0(sp)
    fc80:	dec00204 	addi	sp,sp,8
    fc84:	f800283a 	ret

0000fc88 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    fc88:	defffd04 	addi	sp,sp,-12
    fc8c:	dfc00215 	stw	ra,8(sp)
    fc90:	df000115 	stw	fp,4(sp)
    fc94:	df000104 	addi	fp,sp,4
    fc98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fc9c:	d1600804 	addi	r5,gp,-32736
    fca0:	e13fff17 	ldw	r4,-4(fp)
    fca4:	0010a880 	call	10a88 <alt_dev_llist_insert>
}
    fca8:	e037883a 	mov	sp,fp
    fcac:	dfc00117 	ldw	ra,4(sp)
    fcb0:	df000017 	ldw	fp,0(sp)
    fcb4:	dec00204 	addi	sp,sp,8
    fcb8:	f800283a 	ret

0000fcbc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fcbc:	defffd04 	addi	sp,sp,-12
    fcc0:	dfc00215 	stw	ra,8(sp)
    fcc4:	df000115 	stw	fp,4(sp)
    fcc8:	df000104 	addi	fp,sp,4
    fccc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    fcd0:	00114340 	call	11434 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fcd4:	00800044 	movi	r2,1
    fcd8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fcdc:	0001883a 	nop
    fce0:	e037883a 	mov	sp,fp
    fce4:	dfc00117 	ldw	ra,4(sp)
    fce8:	df000017 	ldw	fp,0(sp)
    fcec:	dec00204 	addi	sp,sp,8
    fcf0:	f800283a 	ret

0000fcf4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fcf4:	defffe04 	addi	sp,sp,-8
    fcf8:	dfc00115 	stw	ra,4(sp)
    fcfc:	df000015 	stw	fp,0(sp)
    fd00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    fd04:	01800144 	movi	r6,5
    fd08:	000b883a 	mov	r5,zero
    fd0c:	01000074 	movhi	r4,1
    fd10:	210bfe04 	addi	r4,r4,12280
    fd14:	000fea40 	call	fea4 <altera_avalon_jtag_uart_init>
    fd18:	01000074 	movhi	r4,1
    fd1c:	210bf404 	addi	r4,r4,12240
    fd20:	000fc880 	call	fc88 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    fd24:	0001883a 	nop
}
    fd28:	0001883a 	nop
    fd2c:	e037883a 	mov	sp,fp
    fd30:	dfc00117 	ldw	ra,4(sp)
    fd34:	df000017 	ldw	fp,0(sp)
    fd38:	dec00204 	addi	sp,sp,8
    fd3c:	f800283a 	ret

0000fd40 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    fd40:	defffa04 	addi	sp,sp,-24
    fd44:	dfc00515 	stw	ra,20(sp)
    fd48:	df000415 	stw	fp,16(sp)
    fd4c:	df000404 	addi	fp,sp,16
    fd50:	e13ffd15 	stw	r4,-12(fp)
    fd54:	e17ffe15 	stw	r5,-8(fp)
    fd58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fd5c:	e0bffd17 	ldw	r2,-12(fp)
    fd60:	10800017 	ldw	r2,0(r2)
    fd64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    fd68:	e0bffc17 	ldw	r2,-16(fp)
    fd6c:	10c00a04 	addi	r3,r2,40
    fd70:	e0bffd17 	ldw	r2,-12(fp)
    fd74:	10800217 	ldw	r2,8(r2)
    fd78:	100f883a 	mov	r7,r2
    fd7c:	e1bfff17 	ldw	r6,-4(fp)
    fd80:	e17ffe17 	ldw	r5,-8(fp)
    fd84:	1809883a 	mov	r4,r3
    fd88:	00103680 	call	10368 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    fd8c:	e037883a 	mov	sp,fp
    fd90:	dfc00117 	ldw	ra,4(sp)
    fd94:	df000017 	ldw	fp,0(sp)
    fd98:	dec00204 	addi	sp,sp,8
    fd9c:	f800283a 	ret

0000fda0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    fda0:	defffa04 	addi	sp,sp,-24
    fda4:	dfc00515 	stw	ra,20(sp)
    fda8:	df000415 	stw	fp,16(sp)
    fdac:	df000404 	addi	fp,sp,16
    fdb0:	e13ffd15 	stw	r4,-12(fp)
    fdb4:	e17ffe15 	stw	r5,-8(fp)
    fdb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fdbc:	e0bffd17 	ldw	r2,-12(fp)
    fdc0:	10800017 	ldw	r2,0(r2)
    fdc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    fdc8:	e0bffc17 	ldw	r2,-16(fp)
    fdcc:	10c00a04 	addi	r3,r2,40
    fdd0:	e0bffd17 	ldw	r2,-12(fp)
    fdd4:	10800217 	ldw	r2,8(r2)
    fdd8:	100f883a 	mov	r7,r2
    fddc:	e1bfff17 	ldw	r6,-4(fp)
    fde0:	e17ffe17 	ldw	r5,-8(fp)
    fde4:	1809883a 	mov	r4,r3
    fde8:	00105840 	call	10584 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    fdec:	e037883a 	mov	sp,fp
    fdf0:	dfc00117 	ldw	ra,4(sp)
    fdf4:	df000017 	ldw	fp,0(sp)
    fdf8:	dec00204 	addi	sp,sp,8
    fdfc:	f800283a 	ret

0000fe00 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    fe00:	defffc04 	addi	sp,sp,-16
    fe04:	dfc00315 	stw	ra,12(sp)
    fe08:	df000215 	stw	fp,8(sp)
    fe0c:	df000204 	addi	fp,sp,8
    fe10:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fe14:	e0bfff17 	ldw	r2,-4(fp)
    fe18:	10800017 	ldw	r2,0(r2)
    fe1c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    fe20:	e0bffe17 	ldw	r2,-8(fp)
    fe24:	10c00a04 	addi	r3,r2,40
    fe28:	e0bfff17 	ldw	r2,-4(fp)
    fe2c:	10800217 	ldw	r2,8(r2)
    fe30:	100b883a 	mov	r5,r2
    fe34:	1809883a 	mov	r4,r3
    fe38:	00102100 	call	10210 <altera_avalon_jtag_uart_close>
}
    fe3c:	e037883a 	mov	sp,fp
    fe40:	dfc00117 	ldw	ra,4(sp)
    fe44:	df000017 	ldw	fp,0(sp)
    fe48:	dec00204 	addi	sp,sp,8
    fe4c:	f800283a 	ret

0000fe50 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    fe50:	defffa04 	addi	sp,sp,-24
    fe54:	dfc00515 	stw	ra,20(sp)
    fe58:	df000415 	stw	fp,16(sp)
    fe5c:	df000404 	addi	fp,sp,16
    fe60:	e13ffd15 	stw	r4,-12(fp)
    fe64:	e17ffe15 	stw	r5,-8(fp)
    fe68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    fe6c:	e0bffd17 	ldw	r2,-12(fp)
    fe70:	10800017 	ldw	r2,0(r2)
    fe74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    fe78:	e0bffc17 	ldw	r2,-16(fp)
    fe7c:	10800a04 	addi	r2,r2,40
    fe80:	e1bfff17 	ldw	r6,-4(fp)
    fe84:	e17ffe17 	ldw	r5,-8(fp)
    fe88:	1009883a 	mov	r4,r2
    fe8c:	00102780 	call	10278 <altera_avalon_jtag_uart_ioctl>
}
    fe90:	e037883a 	mov	sp,fp
    fe94:	dfc00117 	ldw	ra,4(sp)
    fe98:	df000017 	ldw	fp,0(sp)
    fe9c:	dec00204 	addi	sp,sp,8
    fea0:	f800283a 	ret

0000fea4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    fea4:	defffa04 	addi	sp,sp,-24
    fea8:	dfc00515 	stw	ra,20(sp)
    feac:	df000415 	stw	fp,16(sp)
    feb0:	df000404 	addi	fp,sp,16
    feb4:	e13ffd15 	stw	r4,-12(fp)
    feb8:	e17ffe15 	stw	r5,-8(fp)
    febc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fec0:	e0bffd17 	ldw	r2,-12(fp)
    fec4:	00c00044 	movi	r3,1
    fec8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    fecc:	e0bffd17 	ldw	r2,-12(fp)
    fed0:	10800017 	ldw	r2,0(r2)
    fed4:	10800104 	addi	r2,r2,4
    fed8:	1007883a 	mov	r3,r2
    fedc:	e0bffd17 	ldw	r2,-12(fp)
    fee0:	10800817 	ldw	r2,32(r2)
    fee4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    fee8:	e0bffe17 	ldw	r2,-8(fp)
    feec:	e0ffff17 	ldw	r3,-4(fp)
    fef0:	d8000015 	stw	zero,0(sp)
    fef4:	e1fffd17 	ldw	r7,-12(fp)
    fef8:	01800074 	movhi	r6,1
    fefc:	31bfd904 	addi	r6,r6,-156
    ff00:	180b883a 	mov	r5,r3
    ff04:	1009883a 	mov	r4,r2
    ff08:	0010c0c0 	call	10c0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ff0c:	e0bffd17 	ldw	r2,-12(fp)
    ff10:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ff14:	e0bffd17 	ldw	r2,-12(fp)
    ff18:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ff1c:	d0e6d717 	ldw	r3,-25764(gp)
    ff20:	e1fffd17 	ldw	r7,-12(fp)
    ff24:	01800074 	movhi	r6,1
    ff28:	31805c04 	addi	r6,r6,368
    ff2c:	180b883a 	mov	r5,r3
    ff30:	1009883a 	mov	r4,r2
    ff34:	00107a80 	call	107a8 <alt_alarm_start>
    ff38:	1000040e 	bge	r2,zero,ff4c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ff3c:	e0fffd17 	ldw	r3,-12(fp)
    ff40:	00a00034 	movhi	r2,32768
    ff44:	10bfffc4 	addi	r2,r2,-1
    ff48:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ff4c:	0001883a 	nop
    ff50:	e037883a 	mov	sp,fp
    ff54:	dfc00117 	ldw	ra,4(sp)
    ff58:	df000017 	ldw	fp,0(sp)
    ff5c:	dec00204 	addi	sp,sp,8
    ff60:	f800283a 	ret

0000ff64 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    ff64:	defff804 	addi	sp,sp,-32
    ff68:	df000715 	stw	fp,28(sp)
    ff6c:	df000704 	addi	fp,sp,28
    ff70:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    ff74:	e0bfff17 	ldw	r2,-4(fp)
    ff78:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    ff7c:	e0bffb17 	ldw	r2,-20(fp)
    ff80:	10800017 	ldw	r2,0(r2)
    ff84:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ff88:	e0bffc17 	ldw	r2,-16(fp)
    ff8c:	10800104 	addi	r2,r2,4
    ff90:	10800037 	ldwio	r2,0(r2)
    ff94:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ff98:	e0bffd17 	ldw	r2,-12(fp)
    ff9c:	1080c00c 	andi	r2,r2,768
    ffa0:	10006d26 	beq	r2,zero,10158 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ffa4:	e0bffd17 	ldw	r2,-12(fp)
    ffa8:	1080400c 	andi	r2,r2,256
    ffac:	10003526 	beq	r2,zero,10084 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ffb0:	00800074 	movhi	r2,1
    ffb4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ffb8:	e0bffb17 	ldw	r2,-20(fp)
    ffbc:	10800a17 	ldw	r2,40(r2)
    ffc0:	10800044 	addi	r2,r2,1
    ffc4:	1081ffcc 	andi	r2,r2,2047
    ffc8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    ffcc:	e0bffb17 	ldw	r2,-20(fp)
    ffd0:	10c00b17 	ldw	r3,44(r2)
    ffd4:	e0bffe17 	ldw	r2,-8(fp)
    ffd8:	18801526 	beq	r3,r2,10030 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ffdc:	e0bffc17 	ldw	r2,-16(fp)
    ffe0:	10800037 	ldwio	r2,0(r2)
    ffe4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ffe8:	e0bff917 	ldw	r2,-28(fp)
    ffec:	10a0000c 	andi	r2,r2,32768
    fff0:	10001126 	beq	r2,zero,10038 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    fff4:	e0bffb17 	ldw	r2,-20(fp)
    fff8:	10800a17 	ldw	r2,40(r2)
    fffc:	e0fff917 	ldw	r3,-28(fp)
   10000:	1809883a 	mov	r4,r3
   10004:	e0fffb17 	ldw	r3,-20(fp)
   10008:	1885883a 	add	r2,r3,r2
   1000c:	10800e04 	addi	r2,r2,56
   10010:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10014:	e0bffb17 	ldw	r2,-20(fp)
   10018:	10800a17 	ldw	r2,40(r2)
   1001c:	10800044 	addi	r2,r2,1
   10020:	10c1ffcc 	andi	r3,r2,2047
   10024:	e0bffb17 	ldw	r2,-20(fp)
   10028:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1002c:	003fe206 	br	ffb8 <__alt_mem_onchip_memory2_0+0xf800ef28>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10030:	0001883a 	nop
   10034:	00000106 	br	1003c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10038:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1003c:	e0bff917 	ldw	r2,-28(fp)
   10040:	10bfffec 	andhi	r2,r2,65535
   10044:	10000f26 	beq	r2,zero,10084 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10048:	e0bffb17 	ldw	r2,-20(fp)
   1004c:	10c00817 	ldw	r3,32(r2)
   10050:	00bfff84 	movi	r2,-2
   10054:	1886703a 	and	r3,r3,r2
   10058:	e0bffb17 	ldw	r2,-20(fp)
   1005c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10060:	e0bffc17 	ldw	r2,-16(fp)
   10064:	10800104 	addi	r2,r2,4
   10068:	1007883a 	mov	r3,r2
   1006c:	e0bffb17 	ldw	r2,-20(fp)
   10070:	10800817 	ldw	r2,32(r2)
   10074:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10078:	e0bffc17 	ldw	r2,-16(fp)
   1007c:	10800104 	addi	r2,r2,4
   10080:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10084:	e0bffd17 	ldw	r2,-12(fp)
   10088:	1080800c 	andi	r2,r2,512
   1008c:	103fbe26 	beq	r2,zero,ff88 <__alt_mem_onchip_memory2_0+0xf800eef8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10090:	e0bffd17 	ldw	r2,-12(fp)
   10094:	1004d43a 	srli	r2,r2,16
   10098:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1009c:	00001406 	br	100f0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   100a0:	e0bffc17 	ldw	r2,-16(fp)
   100a4:	e0fffb17 	ldw	r3,-20(fp)
   100a8:	18c00d17 	ldw	r3,52(r3)
   100ac:	e13ffb17 	ldw	r4,-20(fp)
   100b0:	20c7883a 	add	r3,r4,r3
   100b4:	18c20e04 	addi	r3,r3,2104
   100b8:	18c00003 	ldbu	r3,0(r3)
   100bc:	18c03fcc 	andi	r3,r3,255
   100c0:	18c0201c 	xori	r3,r3,128
   100c4:	18ffe004 	addi	r3,r3,-128
   100c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   100cc:	e0bffb17 	ldw	r2,-20(fp)
   100d0:	10800d17 	ldw	r2,52(r2)
   100d4:	10800044 	addi	r2,r2,1
   100d8:	10c1ffcc 	andi	r3,r2,2047
   100dc:	e0bffb17 	ldw	r2,-20(fp)
   100e0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   100e4:	e0bffa17 	ldw	r2,-24(fp)
   100e8:	10bfffc4 	addi	r2,r2,-1
   100ec:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   100f0:	e0bffa17 	ldw	r2,-24(fp)
   100f4:	10000526 	beq	r2,zero,1010c <altera_avalon_jtag_uart_irq+0x1a8>
   100f8:	e0bffb17 	ldw	r2,-20(fp)
   100fc:	10c00d17 	ldw	r3,52(r2)
   10100:	e0bffb17 	ldw	r2,-20(fp)
   10104:	10800c17 	ldw	r2,48(r2)
   10108:	18bfe51e 	bne	r3,r2,100a0 <__alt_mem_onchip_memory2_0+0xf800f010>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1010c:	e0bffa17 	ldw	r2,-24(fp)
   10110:	103f9d26 	beq	r2,zero,ff88 <__alt_mem_onchip_memory2_0+0xf800eef8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10114:	e0bffb17 	ldw	r2,-20(fp)
   10118:	10c00817 	ldw	r3,32(r2)
   1011c:	00bfff44 	movi	r2,-3
   10120:	1886703a 	and	r3,r3,r2
   10124:	e0bffb17 	ldw	r2,-20(fp)
   10128:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1012c:	e0bffb17 	ldw	r2,-20(fp)
   10130:	10800017 	ldw	r2,0(r2)
   10134:	10800104 	addi	r2,r2,4
   10138:	1007883a 	mov	r3,r2
   1013c:	e0bffb17 	ldw	r2,-20(fp)
   10140:	10800817 	ldw	r2,32(r2)
   10144:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10148:	e0bffc17 	ldw	r2,-16(fp)
   1014c:	10800104 	addi	r2,r2,4
   10150:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10154:	003f8c06 	br	ff88 <__alt_mem_onchip_memory2_0+0xf800eef8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10158:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1015c:	0001883a 	nop
   10160:	e037883a 	mov	sp,fp
   10164:	df000017 	ldw	fp,0(sp)
   10168:	dec00104 	addi	sp,sp,4
   1016c:	f800283a 	ret

00010170 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10170:	defff804 	addi	sp,sp,-32
   10174:	df000715 	stw	fp,28(sp)
   10178:	df000704 	addi	fp,sp,28
   1017c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10180:	e0bffb17 	ldw	r2,-20(fp)
   10184:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10188:	e0bff917 	ldw	r2,-28(fp)
   1018c:	10800017 	ldw	r2,0(r2)
   10190:	10800104 	addi	r2,r2,4
   10194:	10800037 	ldwio	r2,0(r2)
   10198:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1019c:	e0bffa17 	ldw	r2,-24(fp)
   101a0:	1081000c 	andi	r2,r2,1024
   101a4:	10000b26 	beq	r2,zero,101d4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   101a8:	e0bff917 	ldw	r2,-28(fp)
   101ac:	10800017 	ldw	r2,0(r2)
   101b0:	10800104 	addi	r2,r2,4
   101b4:	1007883a 	mov	r3,r2
   101b8:	e0bff917 	ldw	r2,-28(fp)
   101bc:	10800817 	ldw	r2,32(r2)
   101c0:	10810014 	ori	r2,r2,1024
   101c4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   101c8:	e0bff917 	ldw	r2,-28(fp)
   101cc:	10000915 	stw	zero,36(r2)
   101d0:	00000a06 	br	101fc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   101d4:	e0bff917 	ldw	r2,-28(fp)
   101d8:	10c00917 	ldw	r3,36(r2)
   101dc:	00a00034 	movhi	r2,32768
   101e0:	10bfff04 	addi	r2,r2,-4
   101e4:	10c00536 	bltu	r2,r3,101fc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   101e8:	e0bff917 	ldw	r2,-28(fp)
   101ec:	10800917 	ldw	r2,36(r2)
   101f0:	10c00044 	addi	r3,r2,1
   101f4:	e0bff917 	ldw	r2,-28(fp)
   101f8:	10c00915 	stw	r3,36(r2)
   101fc:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10200:	e037883a 	mov	sp,fp
   10204:	df000017 	ldw	fp,0(sp)
   10208:	dec00104 	addi	sp,sp,4
   1020c:	f800283a 	ret

00010210 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10210:	defffd04 	addi	sp,sp,-12
   10214:	df000215 	stw	fp,8(sp)
   10218:	df000204 	addi	fp,sp,8
   1021c:	e13ffe15 	stw	r4,-8(fp)
   10220:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10224:	00000506 	br	1023c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10228:	e0bfff17 	ldw	r2,-4(fp)
   1022c:	1090000c 	andi	r2,r2,16384
   10230:	10000226 	beq	r2,zero,1023c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10234:	00bffd44 	movi	r2,-11
   10238:	00000b06 	br	10268 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1023c:	e0bffe17 	ldw	r2,-8(fp)
   10240:	10c00d17 	ldw	r3,52(r2)
   10244:	e0bffe17 	ldw	r2,-8(fp)
   10248:	10800c17 	ldw	r2,48(r2)
   1024c:	18800526 	beq	r3,r2,10264 <altera_avalon_jtag_uart_close+0x54>
   10250:	e0bffe17 	ldw	r2,-8(fp)
   10254:	10c00917 	ldw	r3,36(r2)
   10258:	e0bffe17 	ldw	r2,-8(fp)
   1025c:	10800117 	ldw	r2,4(r2)
   10260:	18bff136 	bltu	r3,r2,10228 <__alt_mem_onchip_memory2_0+0xf800f198>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10264:	0005883a 	mov	r2,zero
}
   10268:	e037883a 	mov	sp,fp
   1026c:	df000017 	ldw	fp,0(sp)
   10270:	dec00104 	addi	sp,sp,4
   10274:	f800283a 	ret

00010278 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10278:	defffa04 	addi	sp,sp,-24
   1027c:	df000515 	stw	fp,20(sp)
   10280:	df000504 	addi	fp,sp,20
   10284:	e13ffd15 	stw	r4,-12(fp)
   10288:	e17ffe15 	stw	r5,-8(fp)
   1028c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10290:	00bff9c4 	movi	r2,-25
   10294:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10298:	e0bffe17 	ldw	r2,-8(fp)
   1029c:	10da8060 	cmpeqi	r3,r2,27137
   102a0:	1800031e 	bne	r3,zero,102b0 <altera_avalon_jtag_uart_ioctl+0x38>
   102a4:	109a80a0 	cmpeqi	r2,r2,27138
   102a8:	1000181e 	bne	r2,zero,1030c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   102ac:	00002906 	br	10354 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   102b0:	e0bffd17 	ldw	r2,-12(fp)
   102b4:	10c00117 	ldw	r3,4(r2)
   102b8:	00a00034 	movhi	r2,32768
   102bc:	10bfffc4 	addi	r2,r2,-1
   102c0:	18802126 	beq	r3,r2,10348 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   102c4:	e0bfff17 	ldw	r2,-4(fp)
   102c8:	10800017 	ldw	r2,0(r2)
   102cc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   102d0:	e0bffc17 	ldw	r2,-16(fp)
   102d4:	10800090 	cmplti	r2,r2,2
   102d8:	1000061e 	bne	r2,zero,102f4 <altera_avalon_jtag_uart_ioctl+0x7c>
   102dc:	e0fffc17 	ldw	r3,-16(fp)
   102e0:	00a00034 	movhi	r2,32768
   102e4:	10bfffc4 	addi	r2,r2,-1
   102e8:	18800226 	beq	r3,r2,102f4 <altera_avalon_jtag_uart_ioctl+0x7c>
   102ec:	e0bffc17 	ldw	r2,-16(fp)
   102f0:	00000206 	br	102fc <altera_avalon_jtag_uart_ioctl+0x84>
   102f4:	00a00034 	movhi	r2,32768
   102f8:	10bfff84 	addi	r2,r2,-2
   102fc:	e0fffd17 	ldw	r3,-12(fp)
   10300:	18800115 	stw	r2,4(r3)
      rc = 0;
   10304:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10308:	00000f06 	br	10348 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1030c:	e0bffd17 	ldw	r2,-12(fp)
   10310:	10c00117 	ldw	r3,4(r2)
   10314:	00a00034 	movhi	r2,32768
   10318:	10bfffc4 	addi	r2,r2,-1
   1031c:	18800c26 	beq	r3,r2,10350 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10320:	e0bffd17 	ldw	r2,-12(fp)
   10324:	10c00917 	ldw	r3,36(r2)
   10328:	e0bffd17 	ldw	r2,-12(fp)
   1032c:	10800117 	ldw	r2,4(r2)
   10330:	1885803a 	cmpltu	r2,r3,r2
   10334:	10c03fcc 	andi	r3,r2,255
   10338:	e0bfff17 	ldw	r2,-4(fp)
   1033c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10340:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10344:	00000206 	br	10350 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10348:	0001883a 	nop
   1034c:	00000106 	br	10354 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10350:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10354:	e0bffb17 	ldw	r2,-20(fp)
}
   10358:	e037883a 	mov	sp,fp
   1035c:	df000017 	ldw	fp,0(sp)
   10360:	dec00104 	addi	sp,sp,4
   10364:	f800283a 	ret

00010368 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10368:	defff304 	addi	sp,sp,-52
   1036c:	dfc00c15 	stw	ra,48(sp)
   10370:	df000b15 	stw	fp,44(sp)
   10374:	df000b04 	addi	fp,sp,44
   10378:	e13ffc15 	stw	r4,-16(fp)
   1037c:	e17ffd15 	stw	r5,-12(fp)
   10380:	e1bffe15 	stw	r6,-8(fp)
   10384:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10388:	e0bffd17 	ldw	r2,-12(fp)
   1038c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10390:	00004706 	br	104b0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10394:	e0bffc17 	ldw	r2,-16(fp)
   10398:	10800a17 	ldw	r2,40(r2)
   1039c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   103a0:	e0bffc17 	ldw	r2,-16(fp)
   103a4:	10800b17 	ldw	r2,44(r2)
   103a8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   103ac:	e0fff717 	ldw	r3,-36(fp)
   103b0:	e0bff817 	ldw	r2,-32(fp)
   103b4:	18800536 	bltu	r3,r2,103cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   103b8:	e0fff717 	ldw	r3,-36(fp)
   103bc:	e0bff817 	ldw	r2,-32(fp)
   103c0:	1885c83a 	sub	r2,r3,r2
   103c4:	e0bff615 	stw	r2,-40(fp)
   103c8:	00000406 	br	103dc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   103cc:	00c20004 	movi	r3,2048
   103d0:	e0bff817 	ldw	r2,-32(fp)
   103d4:	1885c83a 	sub	r2,r3,r2
   103d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   103dc:	e0bff617 	ldw	r2,-40(fp)
   103e0:	10001e26 	beq	r2,zero,1045c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   103e4:	e0fffe17 	ldw	r3,-8(fp)
   103e8:	e0bff617 	ldw	r2,-40(fp)
   103ec:	1880022e 	bgeu	r3,r2,103f8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   103f0:	e0bffe17 	ldw	r2,-8(fp)
   103f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   103f8:	e0bffc17 	ldw	r2,-16(fp)
   103fc:	10c00e04 	addi	r3,r2,56
   10400:	e0bff817 	ldw	r2,-32(fp)
   10404:	1885883a 	add	r2,r3,r2
   10408:	e1bff617 	ldw	r6,-40(fp)
   1040c:	100b883a 	mov	r5,r2
   10410:	e13ff517 	ldw	r4,-44(fp)
   10414:	0007f780 	call	7f78 <memcpy>
      ptr   += n;
   10418:	e0fff517 	ldw	r3,-44(fp)
   1041c:	e0bff617 	ldw	r2,-40(fp)
   10420:	1885883a 	add	r2,r3,r2
   10424:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10428:	e0fffe17 	ldw	r3,-8(fp)
   1042c:	e0bff617 	ldw	r2,-40(fp)
   10430:	1885c83a 	sub	r2,r3,r2
   10434:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10438:	e0fff817 	ldw	r3,-32(fp)
   1043c:	e0bff617 	ldw	r2,-40(fp)
   10440:	1885883a 	add	r2,r3,r2
   10444:	10c1ffcc 	andi	r3,r2,2047
   10448:	e0bffc17 	ldw	r2,-16(fp)
   1044c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10450:	e0bffe17 	ldw	r2,-8(fp)
   10454:	00bfcf16 	blt	zero,r2,10394 <__alt_mem_onchip_memory2_0+0xf800f304>
   10458:	00000106 	br	10460 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1045c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10460:	e0fff517 	ldw	r3,-44(fp)
   10464:	e0bffd17 	ldw	r2,-12(fp)
   10468:	1880141e 	bne	r3,r2,104bc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1046c:	e0bfff17 	ldw	r2,-4(fp)
   10470:	1090000c 	andi	r2,r2,16384
   10474:	1000131e 	bne	r2,zero,104c4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10478:	0001883a 	nop
   1047c:	e0bffc17 	ldw	r2,-16(fp)
   10480:	10c00a17 	ldw	r3,40(r2)
   10484:	e0bff717 	ldw	r2,-36(fp)
   10488:	1880051e 	bne	r3,r2,104a0 <altera_avalon_jtag_uart_read+0x138>
   1048c:	e0bffc17 	ldw	r2,-16(fp)
   10490:	10c00917 	ldw	r3,36(r2)
   10494:	e0bffc17 	ldw	r2,-16(fp)
   10498:	10800117 	ldw	r2,4(r2)
   1049c:	18bff736 	bltu	r3,r2,1047c <__alt_mem_onchip_memory2_0+0xf800f3ec>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   104a0:	e0bffc17 	ldw	r2,-16(fp)
   104a4:	10c00a17 	ldw	r3,40(r2)
   104a8:	e0bff717 	ldw	r2,-36(fp)
   104ac:	18800726 	beq	r3,r2,104cc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   104b0:	e0bffe17 	ldw	r2,-8(fp)
   104b4:	00bfb716 	blt	zero,r2,10394 <__alt_mem_onchip_memory2_0+0xf800f304>
   104b8:	00000506 	br	104d0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   104bc:	0001883a 	nop
   104c0:	00000306 	br	104d0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   104c4:	0001883a 	nop
   104c8:	00000106 	br	104d0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   104cc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   104d0:	e0fff517 	ldw	r3,-44(fp)
   104d4:	e0bffd17 	ldw	r2,-12(fp)
   104d8:	18801826 	beq	r3,r2,1053c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   104dc:	0005303a 	rdctl	r2,status
   104e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   104e4:	e0fffb17 	ldw	r3,-20(fp)
   104e8:	00bfff84 	movi	r2,-2
   104ec:	1884703a 	and	r2,r3,r2
   104f0:	1001703a 	wrctl	status,r2
  
  return context;
   104f4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   104f8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   104fc:	e0bffc17 	ldw	r2,-16(fp)
   10500:	10800817 	ldw	r2,32(r2)
   10504:	10c00054 	ori	r3,r2,1
   10508:	e0bffc17 	ldw	r2,-16(fp)
   1050c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10510:	e0bffc17 	ldw	r2,-16(fp)
   10514:	10800017 	ldw	r2,0(r2)
   10518:	10800104 	addi	r2,r2,4
   1051c:	1007883a 	mov	r3,r2
   10520:	e0bffc17 	ldw	r2,-16(fp)
   10524:	10800817 	ldw	r2,32(r2)
   10528:	18800035 	stwio	r2,0(r3)
   1052c:	e0bffa17 	ldw	r2,-24(fp)
   10530:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10534:	e0bff917 	ldw	r2,-28(fp)
   10538:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1053c:	e0fff517 	ldw	r3,-44(fp)
   10540:	e0bffd17 	ldw	r2,-12(fp)
   10544:	18800426 	beq	r3,r2,10558 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10548:	e0fff517 	ldw	r3,-44(fp)
   1054c:	e0bffd17 	ldw	r2,-12(fp)
   10550:	1885c83a 	sub	r2,r3,r2
   10554:	00000606 	br	10570 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10558:	e0bfff17 	ldw	r2,-4(fp)
   1055c:	1090000c 	andi	r2,r2,16384
   10560:	10000226 	beq	r2,zero,1056c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   10564:	00bffd44 	movi	r2,-11
   10568:	00000106 	br	10570 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   1056c:	00bffec4 	movi	r2,-5
}
   10570:	e037883a 	mov	sp,fp
   10574:	dfc00117 	ldw	ra,4(sp)
   10578:	df000017 	ldw	fp,0(sp)
   1057c:	dec00204 	addi	sp,sp,8
   10580:	f800283a 	ret

00010584 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10584:	defff304 	addi	sp,sp,-52
   10588:	dfc00c15 	stw	ra,48(sp)
   1058c:	df000b15 	stw	fp,44(sp)
   10590:	df000b04 	addi	fp,sp,44
   10594:	e13ffc15 	stw	r4,-16(fp)
   10598:	e17ffd15 	stw	r5,-12(fp)
   1059c:	e1bffe15 	stw	r6,-8(fp)
   105a0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   105a4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   105a8:	e0bffd17 	ldw	r2,-12(fp)
   105ac:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   105b0:	00003706 	br	10690 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   105b4:	e0bffc17 	ldw	r2,-16(fp)
   105b8:	10800c17 	ldw	r2,48(r2)
   105bc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   105c0:	e0bffc17 	ldw	r2,-16(fp)
   105c4:	10800d17 	ldw	r2,52(r2)
   105c8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   105cc:	e0fff917 	ldw	r3,-28(fp)
   105d0:	e0bff517 	ldw	r2,-44(fp)
   105d4:	1880062e 	bgeu	r3,r2,105f0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   105d8:	e0fff517 	ldw	r3,-44(fp)
   105dc:	e0bff917 	ldw	r2,-28(fp)
   105e0:	1885c83a 	sub	r2,r3,r2
   105e4:	10bfffc4 	addi	r2,r2,-1
   105e8:	e0bff615 	stw	r2,-40(fp)
   105ec:	00000b06 	br	1061c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   105f0:	e0bff517 	ldw	r2,-44(fp)
   105f4:	10000526 	beq	r2,zero,1060c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   105f8:	00c20004 	movi	r3,2048
   105fc:	e0bff917 	ldw	r2,-28(fp)
   10600:	1885c83a 	sub	r2,r3,r2
   10604:	e0bff615 	stw	r2,-40(fp)
   10608:	00000406 	br	1061c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1060c:	00c1ffc4 	movi	r3,2047
   10610:	e0bff917 	ldw	r2,-28(fp)
   10614:	1885c83a 	sub	r2,r3,r2
   10618:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1061c:	e0bff617 	ldw	r2,-40(fp)
   10620:	10001e26 	beq	r2,zero,1069c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10624:	e0fffe17 	ldw	r3,-8(fp)
   10628:	e0bff617 	ldw	r2,-40(fp)
   1062c:	1880022e 	bgeu	r3,r2,10638 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10630:	e0bffe17 	ldw	r2,-8(fp)
   10634:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10638:	e0bffc17 	ldw	r2,-16(fp)
   1063c:	10c20e04 	addi	r3,r2,2104
   10640:	e0bff917 	ldw	r2,-28(fp)
   10644:	1885883a 	add	r2,r3,r2
   10648:	e1bff617 	ldw	r6,-40(fp)
   1064c:	e17ffd17 	ldw	r5,-12(fp)
   10650:	1009883a 	mov	r4,r2
   10654:	0007f780 	call	7f78 <memcpy>
      ptr   += n;
   10658:	e0fffd17 	ldw	r3,-12(fp)
   1065c:	e0bff617 	ldw	r2,-40(fp)
   10660:	1885883a 	add	r2,r3,r2
   10664:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10668:	e0fffe17 	ldw	r3,-8(fp)
   1066c:	e0bff617 	ldw	r2,-40(fp)
   10670:	1885c83a 	sub	r2,r3,r2
   10674:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10678:	e0fff917 	ldw	r3,-28(fp)
   1067c:	e0bff617 	ldw	r2,-40(fp)
   10680:	1885883a 	add	r2,r3,r2
   10684:	10c1ffcc 	andi	r3,r2,2047
   10688:	e0bffc17 	ldw	r2,-16(fp)
   1068c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10690:	e0bffe17 	ldw	r2,-8(fp)
   10694:	00bfc716 	blt	zero,r2,105b4 <__alt_mem_onchip_memory2_0+0xf800f524>
   10698:	00000106 	br	106a0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1069c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106a0:	0005303a 	rdctl	r2,status
   106a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106a8:	e0fffb17 	ldw	r3,-20(fp)
   106ac:	00bfff84 	movi	r2,-2
   106b0:	1884703a 	and	r2,r3,r2
   106b4:	1001703a 	wrctl	status,r2
  
  return context;
   106b8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   106bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   106c0:	e0bffc17 	ldw	r2,-16(fp)
   106c4:	10800817 	ldw	r2,32(r2)
   106c8:	10c00094 	ori	r3,r2,2
   106cc:	e0bffc17 	ldw	r2,-16(fp)
   106d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   106d4:	e0bffc17 	ldw	r2,-16(fp)
   106d8:	10800017 	ldw	r2,0(r2)
   106dc:	10800104 	addi	r2,r2,4
   106e0:	1007883a 	mov	r3,r2
   106e4:	e0bffc17 	ldw	r2,-16(fp)
   106e8:	10800817 	ldw	r2,32(r2)
   106ec:	18800035 	stwio	r2,0(r3)
   106f0:	e0bffa17 	ldw	r2,-24(fp)
   106f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   106f8:	e0bff817 	ldw	r2,-32(fp)
   106fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10700:	e0bffe17 	ldw	r2,-8(fp)
   10704:	0080100e 	bge	zero,r2,10748 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   10708:	e0bfff17 	ldw	r2,-4(fp)
   1070c:	1090000c 	andi	r2,r2,16384
   10710:	1000101e 	bne	r2,zero,10754 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10714:	0001883a 	nop
   10718:	e0bffc17 	ldw	r2,-16(fp)
   1071c:	10c00d17 	ldw	r3,52(r2)
   10720:	e0bff517 	ldw	r2,-44(fp)
   10724:	1880051e 	bne	r3,r2,1073c <altera_avalon_jtag_uart_write+0x1b8>
   10728:	e0bffc17 	ldw	r2,-16(fp)
   1072c:	10c00917 	ldw	r3,36(r2)
   10730:	e0bffc17 	ldw	r2,-16(fp)
   10734:	10800117 	ldw	r2,4(r2)
   10738:	18bff736 	bltu	r3,r2,10718 <__alt_mem_onchip_memory2_0+0xf800f688>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1073c:	e0bffc17 	ldw	r2,-16(fp)
   10740:	10800917 	ldw	r2,36(r2)
   10744:	1000051e 	bne	r2,zero,1075c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   10748:	e0bffe17 	ldw	r2,-8(fp)
   1074c:	00bfd016 	blt	zero,r2,10690 <__alt_mem_onchip_memory2_0+0xf800f600>
   10750:	00000306 	br	10760 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10754:	0001883a 	nop
   10758:	00000106 	br	10760 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1075c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10760:	e0fffd17 	ldw	r3,-12(fp)
   10764:	e0bff717 	ldw	r2,-36(fp)
   10768:	18800426 	beq	r3,r2,1077c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1076c:	e0fffd17 	ldw	r3,-12(fp)
   10770:	e0bff717 	ldw	r2,-36(fp)
   10774:	1885c83a 	sub	r2,r3,r2
   10778:	00000606 	br	10794 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1077c:	e0bfff17 	ldw	r2,-4(fp)
   10780:	1090000c 	andi	r2,r2,16384
   10784:	10000226 	beq	r2,zero,10790 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   10788:	00bffd44 	movi	r2,-11
   1078c:	00000106 	br	10794 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10790:	00bffec4 	movi	r2,-5
}
   10794:	e037883a 	mov	sp,fp
   10798:	dfc00117 	ldw	ra,4(sp)
   1079c:	df000017 	ldw	fp,0(sp)
   107a0:	dec00204 	addi	sp,sp,8
   107a4:	f800283a 	ret

000107a8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   107a8:	defff504 	addi	sp,sp,-44
   107ac:	df000a15 	stw	fp,40(sp)
   107b0:	df000a04 	addi	fp,sp,40
   107b4:	e13ffc15 	stw	r4,-16(fp)
   107b8:	e17ffd15 	stw	r5,-12(fp)
   107bc:	e1bffe15 	stw	r6,-8(fp)
   107c0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   107c4:	e03ff615 	stw	zero,-40(fp)
   107c8:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
   107cc:	10003c26 	beq	r2,zero,108c0 <alt_alarm_start+0x118>
  {
    if (alarm)
   107d0:	e0bffc17 	ldw	r2,-16(fp)
   107d4:	10003826 	beq	r2,zero,108b8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   107d8:	e0bffc17 	ldw	r2,-16(fp)
   107dc:	e0fffe17 	ldw	r3,-8(fp)
   107e0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   107e4:	e0bffc17 	ldw	r2,-16(fp)
   107e8:	e0ffff17 	ldw	r3,-4(fp)
   107ec:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107f0:	0005303a 	rdctl	r2,status
   107f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107f8:	e0fff917 	ldw	r3,-28(fp)
   107fc:	00bfff84 	movi	r2,-2
   10800:	1884703a 	and	r2,r3,r2
   10804:	1001703a 	wrctl	status,r2
  
  return context;
   10808:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1080c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10810:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
   10814:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10818:	e0fffd17 	ldw	r3,-12(fp)
   1081c:	e0bff617 	ldw	r2,-40(fp)
   10820:	1885883a 	add	r2,r3,r2
   10824:	10c00044 	addi	r3,r2,1
   10828:	e0bffc17 	ldw	r2,-16(fp)
   1082c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10830:	e0bffc17 	ldw	r2,-16(fp)
   10834:	10c00217 	ldw	r3,8(r2)
   10838:	e0bff617 	ldw	r2,-40(fp)
   1083c:	1880042e 	bgeu	r3,r2,10850 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10840:	e0bffc17 	ldw	r2,-16(fp)
   10844:	00c00044 	movi	r3,1
   10848:	10c00405 	stb	r3,16(r2)
   1084c:	00000206 	br	10858 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10850:	e0bffc17 	ldw	r2,-16(fp)
   10854:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10858:	e0bffc17 	ldw	r2,-16(fp)
   1085c:	d0e00e04 	addi	r3,gp,-32712
   10860:	e0fffa15 	stw	r3,-24(fp)
   10864:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10868:	e0bffb17 	ldw	r2,-20(fp)
   1086c:	e0fffa17 	ldw	r3,-24(fp)
   10870:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10874:	e0bffa17 	ldw	r2,-24(fp)
   10878:	10c00017 	ldw	r3,0(r2)
   1087c:	e0bffb17 	ldw	r2,-20(fp)
   10880:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10884:	e0bffa17 	ldw	r2,-24(fp)
   10888:	10800017 	ldw	r2,0(r2)
   1088c:	e0fffb17 	ldw	r3,-20(fp)
   10890:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10894:	e0bffa17 	ldw	r2,-24(fp)
   10898:	e0fffb17 	ldw	r3,-20(fp)
   1089c:	10c00015 	stw	r3,0(r2)
   108a0:	e0bff817 	ldw	r2,-32(fp)
   108a4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   108a8:	e0bff717 	ldw	r2,-36(fp)
   108ac:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   108b0:	0005883a 	mov	r2,zero
   108b4:	00000306 	br	108c4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   108b8:	00bffa84 	movi	r2,-22
   108bc:	00000106 	br	108c4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   108c0:	00bfde84 	movi	r2,-134
  }
}
   108c4:	e037883a 	mov	sp,fp
   108c8:	df000017 	ldw	fp,0(sp)
   108cc:	dec00104 	addi	sp,sp,4
   108d0:	f800283a 	ret

000108d4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   108d4:	defffa04 	addi	sp,sp,-24
   108d8:	dfc00515 	stw	ra,20(sp)
   108dc:	df000415 	stw	fp,16(sp)
   108e0:	df000404 	addi	fp,sp,16
   108e4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   108e8:	00800244 	movi	r2,9
   108ec:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   108f0:	014003f4 	movhi	r5,15
   108f4:	29509004 	addi	r5,r5,16960
   108f8:	e13ffd17 	ldw	r4,-12(fp)
   108fc:	000c9f80 	call	c9f8 <__mulsi3>
   10900:	100b883a 	mov	r5,r2
   10904:	0100bef4 	movhi	r4,763
   10908:	213c2004 	addi	r4,r4,-3968
   1090c:	000c93c0 	call	c93c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10910:	100b883a 	mov	r5,r2
   10914:	01200034 	movhi	r4,32768
   10918:	213fffc4 	addi	r4,r4,-1
   1091c:	000c93c0 	call	c93c <__udivsi3>
   10920:	100b883a 	mov	r5,r2
   10924:	e13fff17 	ldw	r4,-4(fp)
   10928:	000c93c0 	call	c93c <__udivsi3>
   1092c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10930:	e0bffe17 	ldw	r2,-8(fp)
   10934:	10002a26 	beq	r2,zero,109e0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10938:	e03ffc15 	stw	zero,-16(fp)
   1093c:	00001706 	br	1099c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10940:	00a00034 	movhi	r2,32768
   10944:	10bfffc4 	addi	r2,r2,-1
   10948:	10bfffc4 	addi	r2,r2,-1
   1094c:	103ffe1e 	bne	r2,zero,10948 <__alt_mem_onchip_memory2_0+0xf800f8b8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10950:	014003f4 	movhi	r5,15
   10954:	29509004 	addi	r5,r5,16960
   10958:	e13ffd17 	ldw	r4,-12(fp)
   1095c:	000c9f80 	call	c9f8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10960:	100b883a 	mov	r5,r2
   10964:	0100bef4 	movhi	r4,763
   10968:	213c2004 	addi	r4,r4,-3968
   1096c:	000c93c0 	call	c93c <__udivsi3>
   10970:	100b883a 	mov	r5,r2
   10974:	01200034 	movhi	r4,32768
   10978:	213fffc4 	addi	r4,r4,-1
   1097c:	000c93c0 	call	c93c <__udivsi3>
   10980:	1007883a 	mov	r3,r2
   10984:	e0bfff17 	ldw	r2,-4(fp)
   10988:	10c5c83a 	sub	r2,r2,r3
   1098c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10990:	e0bffc17 	ldw	r2,-16(fp)
   10994:	10800044 	addi	r2,r2,1
   10998:	e0bffc15 	stw	r2,-16(fp)
   1099c:	e0fffc17 	ldw	r3,-16(fp)
   109a0:	e0bffe17 	ldw	r2,-8(fp)
   109a4:	18bfe616 	blt	r3,r2,10940 <__alt_mem_onchip_memory2_0+0xf800f8b0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   109a8:	014003f4 	movhi	r5,15
   109ac:	29509004 	addi	r5,r5,16960
   109b0:	e13ffd17 	ldw	r4,-12(fp)
   109b4:	000c9f80 	call	c9f8 <__mulsi3>
   109b8:	100b883a 	mov	r5,r2
   109bc:	0100bef4 	movhi	r4,763
   109c0:	213c2004 	addi	r4,r4,-3968
   109c4:	000c93c0 	call	c93c <__udivsi3>
   109c8:	e17fff17 	ldw	r5,-4(fp)
   109cc:	1009883a 	mov	r4,r2
   109d0:	000c9f80 	call	c9f8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   109d4:	10bfffc4 	addi	r2,r2,-1
   109d8:	103ffe1e 	bne	r2,zero,109d4 <__alt_mem_onchip_memory2_0+0xf800f944>
   109dc:	00000d06 	br	10a14 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   109e0:	014003f4 	movhi	r5,15
   109e4:	29509004 	addi	r5,r5,16960
   109e8:	e13ffd17 	ldw	r4,-12(fp)
   109ec:	000c9f80 	call	c9f8 <__mulsi3>
   109f0:	100b883a 	mov	r5,r2
   109f4:	0100bef4 	movhi	r4,763
   109f8:	213c2004 	addi	r4,r4,-3968
   109fc:	000c93c0 	call	c93c <__udivsi3>
   10a00:	e17fff17 	ldw	r5,-4(fp)
   10a04:	1009883a 	mov	r4,r2
   10a08:	000c9f80 	call	c9f8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10a0c:	10bfffc4 	addi	r2,r2,-1
   10a10:	00bffe16 	blt	zero,r2,10a0c <__alt_mem_onchip_memory2_0+0xf800f97c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10a14:	0005883a 	mov	r2,zero
}
   10a18:	e037883a 	mov	sp,fp
   10a1c:	dfc00117 	ldw	ra,4(sp)
   10a20:	df000017 	ldw	fp,0(sp)
   10a24:	dec00204 	addi	sp,sp,8
   10a28:	f800283a 	ret

00010a2c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10a2c:	deffff04 	addi	sp,sp,-4
   10a30:	df000015 	stw	fp,0(sp)
   10a34:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10a38:	0001883a 	nop
   10a3c:	e037883a 	mov	sp,fp
   10a40:	df000017 	ldw	fp,0(sp)
   10a44:	dec00104 	addi	sp,sp,4
   10a48:	f800283a 	ret

00010a4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10a4c:	defffe04 	addi	sp,sp,-8
   10a50:	dfc00115 	stw	ra,4(sp)
   10a54:	df000015 	stw	fp,0(sp)
   10a58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10a5c:	d0a00b17 	ldw	r2,-32724(gp)
   10a60:	10000326 	beq	r2,zero,10a70 <alt_get_errno+0x24>
   10a64:	d0a00b17 	ldw	r2,-32724(gp)
   10a68:	103ee83a 	callr	r2
   10a6c:	00000106 	br	10a74 <alt_get_errno+0x28>
   10a70:	d0a6d204 	addi	r2,gp,-25784
}
   10a74:	e037883a 	mov	sp,fp
   10a78:	dfc00117 	ldw	ra,4(sp)
   10a7c:	df000017 	ldw	fp,0(sp)
   10a80:	dec00204 	addi	sp,sp,8
   10a84:	f800283a 	ret

00010a88 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10a88:	defffa04 	addi	sp,sp,-24
   10a8c:	dfc00515 	stw	ra,20(sp)
   10a90:	df000415 	stw	fp,16(sp)
   10a94:	df000404 	addi	fp,sp,16
   10a98:	e13ffe15 	stw	r4,-8(fp)
   10a9c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10aa0:	e0bffe17 	ldw	r2,-8(fp)
   10aa4:	10000326 	beq	r2,zero,10ab4 <alt_dev_llist_insert+0x2c>
   10aa8:	e0bffe17 	ldw	r2,-8(fp)
   10aac:	10800217 	ldw	r2,8(r2)
   10ab0:	1000061e 	bne	r2,zero,10acc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10ab4:	0010a4c0 	call	10a4c <alt_get_errno>
   10ab8:	1007883a 	mov	r3,r2
   10abc:	00800584 	movi	r2,22
   10ac0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10ac4:	00bffa84 	movi	r2,-22
   10ac8:	00001306 	br	10b18 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10acc:	e0bffe17 	ldw	r2,-8(fp)
   10ad0:	e0ffff17 	ldw	r3,-4(fp)
   10ad4:	e0fffc15 	stw	r3,-16(fp)
   10ad8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10adc:	e0bffd17 	ldw	r2,-12(fp)
   10ae0:	e0fffc17 	ldw	r3,-16(fp)
   10ae4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10ae8:	e0bffc17 	ldw	r2,-16(fp)
   10aec:	10c00017 	ldw	r3,0(r2)
   10af0:	e0bffd17 	ldw	r2,-12(fp)
   10af4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10af8:	e0bffc17 	ldw	r2,-16(fp)
   10afc:	10800017 	ldw	r2,0(r2)
   10b00:	e0fffd17 	ldw	r3,-12(fp)
   10b04:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10b08:	e0bffc17 	ldw	r2,-16(fp)
   10b0c:	e0fffd17 	ldw	r3,-12(fp)
   10b10:	10c00015 	stw	r3,0(r2)

  return 0;  
   10b14:	0005883a 	mov	r2,zero
}
   10b18:	e037883a 	mov	sp,fp
   10b1c:	dfc00117 	ldw	ra,4(sp)
   10b20:	df000017 	ldw	fp,0(sp)
   10b24:	dec00204 	addi	sp,sp,8
   10b28:	f800283a 	ret

00010b2c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10b2c:	defffd04 	addi	sp,sp,-12
   10b30:	dfc00215 	stw	ra,8(sp)
   10b34:	df000115 	stw	fp,4(sp)
   10b38:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10b3c:	00800074 	movhi	r2,1
   10b40:	1086b804 	addi	r2,r2,6880
   10b44:	e0bfff15 	stw	r2,-4(fp)
   10b48:	00000606 	br	10b64 <_do_ctors+0x38>
        (*ctor) (); 
   10b4c:	e0bfff17 	ldw	r2,-4(fp)
   10b50:	10800017 	ldw	r2,0(r2)
   10b54:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10b58:	e0bfff17 	ldw	r2,-4(fp)
   10b5c:	10bfff04 	addi	r2,r2,-4
   10b60:	e0bfff15 	stw	r2,-4(fp)
   10b64:	e0ffff17 	ldw	r3,-4(fp)
   10b68:	00800074 	movhi	r2,1
   10b6c:	1086b904 	addi	r2,r2,6884
   10b70:	18bff62e 	bgeu	r3,r2,10b4c <__alt_mem_onchip_memory2_0+0xf800fabc>
        (*ctor) (); 
}
   10b74:	0001883a 	nop
   10b78:	e037883a 	mov	sp,fp
   10b7c:	dfc00117 	ldw	ra,4(sp)
   10b80:	df000017 	ldw	fp,0(sp)
   10b84:	dec00204 	addi	sp,sp,8
   10b88:	f800283a 	ret

00010b8c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10b8c:	defffd04 	addi	sp,sp,-12
   10b90:	dfc00215 	stw	ra,8(sp)
   10b94:	df000115 	stw	fp,4(sp)
   10b98:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10b9c:	00800074 	movhi	r2,1
   10ba0:	1086b804 	addi	r2,r2,6880
   10ba4:	e0bfff15 	stw	r2,-4(fp)
   10ba8:	00000606 	br	10bc4 <_do_dtors+0x38>
        (*dtor) (); 
   10bac:	e0bfff17 	ldw	r2,-4(fp)
   10bb0:	10800017 	ldw	r2,0(r2)
   10bb4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10bb8:	e0bfff17 	ldw	r2,-4(fp)
   10bbc:	10bfff04 	addi	r2,r2,-4
   10bc0:	e0bfff15 	stw	r2,-4(fp)
   10bc4:	e0ffff17 	ldw	r3,-4(fp)
   10bc8:	00800074 	movhi	r2,1
   10bcc:	1086b904 	addi	r2,r2,6884
   10bd0:	18bff62e 	bgeu	r3,r2,10bac <__alt_mem_onchip_memory2_0+0xf800fb1c>
        (*dtor) (); 
}
   10bd4:	0001883a 	nop
   10bd8:	e037883a 	mov	sp,fp
   10bdc:	dfc00117 	ldw	ra,4(sp)
   10be0:	df000017 	ldw	fp,0(sp)
   10be4:	dec00204 	addi	sp,sp,8
   10be8:	f800283a 	ret

00010bec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10bec:	deffff04 	addi	sp,sp,-4
   10bf0:	df000015 	stw	fp,0(sp)
   10bf4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   10bf8:	0001883a 	nop
   10bfc:	e037883a 	mov	sp,fp
   10c00:	df000017 	ldw	fp,0(sp)
   10c04:	dec00104 	addi	sp,sp,4
   10c08:	f800283a 	ret

00010c0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10c0c:	defff904 	addi	sp,sp,-28
   10c10:	dfc00615 	stw	ra,24(sp)
   10c14:	df000515 	stw	fp,20(sp)
   10c18:	df000504 	addi	fp,sp,20
   10c1c:	e13ffc15 	stw	r4,-16(fp)
   10c20:	e17ffd15 	stw	r5,-12(fp)
   10c24:	e1bffe15 	stw	r6,-8(fp)
   10c28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10c2c:	e0800217 	ldw	r2,8(fp)
   10c30:	d8800015 	stw	r2,0(sp)
   10c34:	e1ffff17 	ldw	r7,-4(fp)
   10c38:	e1bffe17 	ldw	r6,-8(fp)
   10c3c:	e17ffd17 	ldw	r5,-12(fp)
   10c40:	e13ffc17 	ldw	r4,-16(fp)
   10c44:	0010dbc0 	call	10dbc <alt_iic_isr_register>
}  
   10c48:	e037883a 	mov	sp,fp
   10c4c:	dfc00117 	ldw	ra,4(sp)
   10c50:	df000017 	ldw	fp,0(sp)
   10c54:	dec00204 	addi	sp,sp,8
   10c58:	f800283a 	ret

00010c5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10c5c:	defff904 	addi	sp,sp,-28
   10c60:	df000615 	stw	fp,24(sp)
   10c64:	df000604 	addi	fp,sp,24
   10c68:	e13ffe15 	stw	r4,-8(fp)
   10c6c:	e17fff15 	stw	r5,-4(fp)
   10c70:	e0bfff17 	ldw	r2,-4(fp)
   10c74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c78:	0005303a 	rdctl	r2,status
   10c7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c80:	e0fffb17 	ldw	r3,-20(fp)
   10c84:	00bfff84 	movi	r2,-2
   10c88:	1884703a 	and	r2,r3,r2
   10c8c:	1001703a 	wrctl	status,r2
  
  return context;
   10c90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10c94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10c98:	00c00044 	movi	r3,1
   10c9c:	e0bffa17 	ldw	r2,-24(fp)
   10ca0:	1884983a 	sll	r2,r3,r2
   10ca4:	1007883a 	mov	r3,r2
   10ca8:	d0a6d617 	ldw	r2,-25768(gp)
   10cac:	1884b03a 	or	r2,r3,r2
   10cb0:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10cb4:	d0a6d617 	ldw	r2,-25768(gp)
   10cb8:	100170fa 	wrctl	ienable,r2
   10cbc:	e0bffc17 	ldw	r2,-16(fp)
   10cc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cc4:	e0bffd17 	ldw	r2,-12(fp)
   10cc8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10ccc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10cd0:	0001883a 	nop
}
   10cd4:	e037883a 	mov	sp,fp
   10cd8:	df000017 	ldw	fp,0(sp)
   10cdc:	dec00104 	addi	sp,sp,4
   10ce0:	f800283a 	ret

00010ce4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10ce4:	defff904 	addi	sp,sp,-28
   10ce8:	df000615 	stw	fp,24(sp)
   10cec:	df000604 	addi	fp,sp,24
   10cf0:	e13ffe15 	stw	r4,-8(fp)
   10cf4:	e17fff15 	stw	r5,-4(fp)
   10cf8:	e0bfff17 	ldw	r2,-4(fp)
   10cfc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d00:	0005303a 	rdctl	r2,status
   10d04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d08:	e0fffb17 	ldw	r3,-20(fp)
   10d0c:	00bfff84 	movi	r2,-2
   10d10:	1884703a 	and	r2,r3,r2
   10d14:	1001703a 	wrctl	status,r2
  
  return context;
   10d18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10d1c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10d20:	00c00044 	movi	r3,1
   10d24:	e0bffa17 	ldw	r2,-24(fp)
   10d28:	1884983a 	sll	r2,r3,r2
   10d2c:	0084303a 	nor	r2,zero,r2
   10d30:	1007883a 	mov	r3,r2
   10d34:	d0a6d617 	ldw	r2,-25768(gp)
   10d38:	1884703a 	and	r2,r3,r2
   10d3c:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10d40:	d0a6d617 	ldw	r2,-25768(gp)
   10d44:	100170fa 	wrctl	ienable,r2
   10d48:	e0bffc17 	ldw	r2,-16(fp)
   10d4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d50:	e0bffd17 	ldw	r2,-12(fp)
   10d54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10d58:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10d5c:	0001883a 	nop
}
   10d60:	e037883a 	mov	sp,fp
   10d64:	df000017 	ldw	fp,0(sp)
   10d68:	dec00104 	addi	sp,sp,4
   10d6c:	f800283a 	ret

00010d70 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10d70:	defffc04 	addi	sp,sp,-16
   10d74:	df000315 	stw	fp,12(sp)
   10d78:	df000304 	addi	fp,sp,12
   10d7c:	e13ffe15 	stw	r4,-8(fp)
   10d80:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10d84:	000530fa 	rdctl	r2,ienable
   10d88:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10d8c:	00c00044 	movi	r3,1
   10d90:	e0bfff17 	ldw	r2,-4(fp)
   10d94:	1884983a 	sll	r2,r3,r2
   10d98:	1007883a 	mov	r3,r2
   10d9c:	e0bffd17 	ldw	r2,-12(fp)
   10da0:	1884703a 	and	r2,r3,r2
   10da4:	1004c03a 	cmpne	r2,r2,zero
   10da8:	10803fcc 	andi	r2,r2,255
}
   10dac:	e037883a 	mov	sp,fp
   10db0:	df000017 	ldw	fp,0(sp)
   10db4:	dec00104 	addi	sp,sp,4
   10db8:	f800283a 	ret

00010dbc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10dbc:	defff504 	addi	sp,sp,-44
   10dc0:	dfc00a15 	stw	ra,40(sp)
   10dc4:	df000915 	stw	fp,36(sp)
   10dc8:	df000904 	addi	fp,sp,36
   10dcc:	e13ffc15 	stw	r4,-16(fp)
   10dd0:	e17ffd15 	stw	r5,-12(fp)
   10dd4:	e1bffe15 	stw	r6,-8(fp)
   10dd8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10ddc:	00bffa84 	movi	r2,-22
   10de0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10de4:	e0bffd17 	ldw	r2,-12(fp)
   10de8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10dec:	e0bff817 	ldw	r2,-32(fp)
   10df0:	10800808 	cmpgei	r2,r2,32
   10df4:	1000271e 	bne	r2,zero,10e94 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10df8:	0005303a 	rdctl	r2,status
   10dfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e00:	e0fffb17 	ldw	r3,-20(fp)
   10e04:	00bfff84 	movi	r2,-2
   10e08:	1884703a 	and	r2,r3,r2
   10e0c:	1001703a 	wrctl	status,r2
  
  return context;
   10e10:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10e14:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10e18:	00800074 	movhi	r2,1
   10e1c:	1096f004 	addi	r2,r2,23488
   10e20:	e0fff817 	ldw	r3,-32(fp)
   10e24:	180690fa 	slli	r3,r3,3
   10e28:	10c5883a 	add	r2,r2,r3
   10e2c:	e0fffe17 	ldw	r3,-8(fp)
   10e30:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10e34:	00800074 	movhi	r2,1
   10e38:	1096f004 	addi	r2,r2,23488
   10e3c:	e0fff817 	ldw	r3,-32(fp)
   10e40:	180690fa 	slli	r3,r3,3
   10e44:	10c5883a 	add	r2,r2,r3
   10e48:	10800104 	addi	r2,r2,4
   10e4c:	e0ffff17 	ldw	r3,-4(fp)
   10e50:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10e54:	e0bffe17 	ldw	r2,-8(fp)
   10e58:	10000526 	beq	r2,zero,10e70 <alt_iic_isr_register+0xb4>
   10e5c:	e0bff817 	ldw	r2,-32(fp)
   10e60:	100b883a 	mov	r5,r2
   10e64:	e13ffc17 	ldw	r4,-16(fp)
   10e68:	0010c5c0 	call	10c5c <alt_ic_irq_enable>
   10e6c:	00000406 	br	10e80 <alt_iic_isr_register+0xc4>
   10e70:	e0bff817 	ldw	r2,-32(fp)
   10e74:	100b883a 	mov	r5,r2
   10e78:	e13ffc17 	ldw	r4,-16(fp)
   10e7c:	0010ce40 	call	10ce4 <alt_ic_irq_disable>
   10e80:	e0bff715 	stw	r2,-36(fp)
   10e84:	e0bffa17 	ldw	r2,-24(fp)
   10e88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e8c:	e0bff917 	ldw	r2,-28(fp)
   10e90:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10e94:	e0bff717 	ldw	r2,-36(fp)
}
   10e98:	e037883a 	mov	sp,fp
   10e9c:	dfc00117 	ldw	ra,4(sp)
   10ea0:	df000017 	ldw	fp,0(sp)
   10ea4:	dec00204 	addi	sp,sp,8
   10ea8:	f800283a 	ret

00010eac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10eac:	defff804 	addi	sp,sp,-32
   10eb0:	dfc00715 	stw	ra,28(sp)
   10eb4:	df000615 	stw	fp,24(sp)
   10eb8:	dc000515 	stw	r16,20(sp)
   10ebc:	df000604 	addi	fp,sp,24
   10ec0:	e13ffb15 	stw	r4,-20(fp)
   10ec4:	e17ffc15 	stw	r5,-16(fp)
   10ec8:	e1bffd15 	stw	r6,-12(fp)
   10ecc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   10ed0:	e1bffe17 	ldw	r6,-8(fp)
   10ed4:	e17ffd17 	ldw	r5,-12(fp)
   10ed8:	e13ffc17 	ldw	r4,-16(fp)
   10edc:	00111340 	call	11134 <open>
   10ee0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   10ee4:	e0bffa17 	ldw	r2,-24(fp)
   10ee8:	10002216 	blt	r2,zero,10f74 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   10eec:	04000074 	movhi	r16,1
   10ef0:	840b9404 	addi	r16,r16,11856
   10ef4:	e0bffa17 	ldw	r2,-24(fp)
   10ef8:	01400304 	movi	r5,12
   10efc:	1009883a 	mov	r4,r2
   10f00:	000c9f80 	call	c9f8 <__mulsi3>
   10f04:	8085883a 	add	r2,r16,r2
   10f08:	10c00017 	ldw	r3,0(r2)
   10f0c:	e0bffb17 	ldw	r2,-20(fp)
   10f10:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10f14:	04000074 	movhi	r16,1
   10f18:	840b9404 	addi	r16,r16,11856
   10f1c:	e0bffa17 	ldw	r2,-24(fp)
   10f20:	01400304 	movi	r5,12
   10f24:	1009883a 	mov	r4,r2
   10f28:	000c9f80 	call	c9f8 <__mulsi3>
   10f2c:	8085883a 	add	r2,r16,r2
   10f30:	10800104 	addi	r2,r2,4
   10f34:	10c00017 	ldw	r3,0(r2)
   10f38:	e0bffb17 	ldw	r2,-20(fp)
   10f3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10f40:	04000074 	movhi	r16,1
   10f44:	840b9404 	addi	r16,r16,11856
   10f48:	e0bffa17 	ldw	r2,-24(fp)
   10f4c:	01400304 	movi	r5,12
   10f50:	1009883a 	mov	r4,r2
   10f54:	000c9f80 	call	c9f8 <__mulsi3>
   10f58:	8085883a 	add	r2,r16,r2
   10f5c:	10800204 	addi	r2,r2,8
   10f60:	10c00017 	ldw	r3,0(r2)
   10f64:	e0bffb17 	ldw	r2,-20(fp)
   10f68:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10f6c:	e13ffa17 	ldw	r4,-24(fp)
   10f70:	000f9e80 	call	f9e8 <alt_release_fd>
  }
} 
   10f74:	0001883a 	nop
   10f78:	e6ffff04 	addi	sp,fp,-4
   10f7c:	dfc00217 	ldw	ra,8(sp)
   10f80:	df000117 	ldw	fp,4(sp)
   10f84:	dc000017 	ldw	r16,0(sp)
   10f88:	dec00304 	addi	sp,sp,12
   10f8c:	f800283a 	ret

00010f90 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10f90:	defffb04 	addi	sp,sp,-20
   10f94:	dfc00415 	stw	ra,16(sp)
   10f98:	df000315 	stw	fp,12(sp)
   10f9c:	df000304 	addi	fp,sp,12
   10fa0:	e13ffd15 	stw	r4,-12(fp)
   10fa4:	e17ffe15 	stw	r5,-8(fp)
   10fa8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10fac:	01c07fc4 	movi	r7,511
   10fb0:	01800044 	movi	r6,1
   10fb4:	e17ffd17 	ldw	r5,-12(fp)
   10fb8:	01000074 	movhi	r4,1
   10fbc:	210b9704 	addi	r4,r4,11868
   10fc0:	0010eac0 	call	10eac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10fc4:	01c07fc4 	movi	r7,511
   10fc8:	000d883a 	mov	r6,zero
   10fcc:	e17ffe17 	ldw	r5,-8(fp)
   10fd0:	01000074 	movhi	r4,1
   10fd4:	210b9404 	addi	r4,r4,11856
   10fd8:	0010eac0 	call	10eac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10fdc:	01c07fc4 	movi	r7,511
   10fe0:	01800044 	movi	r6,1
   10fe4:	e17fff17 	ldw	r5,-4(fp)
   10fe8:	01000074 	movhi	r4,1
   10fec:	210b9a04 	addi	r4,r4,11880
   10ff0:	0010eac0 	call	10eac <alt_open_fd>
}  
   10ff4:	0001883a 	nop
   10ff8:	e037883a 	mov	sp,fp
   10ffc:	dfc00117 	ldw	ra,4(sp)
   11000:	df000017 	ldw	fp,0(sp)
   11004:	dec00204 	addi	sp,sp,8
   11008:	f800283a 	ret

0001100c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1100c:	defffe04 	addi	sp,sp,-8
   11010:	dfc00115 	stw	ra,4(sp)
   11014:	df000015 	stw	fp,0(sp)
   11018:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1101c:	d0a00b17 	ldw	r2,-32724(gp)
   11020:	10000326 	beq	r2,zero,11030 <alt_get_errno+0x24>
   11024:	d0a00b17 	ldw	r2,-32724(gp)
   11028:	103ee83a 	callr	r2
   1102c:	00000106 	br	11034 <alt_get_errno+0x28>
   11030:	d0a6d204 	addi	r2,gp,-25784
}
   11034:	e037883a 	mov	sp,fp
   11038:	dfc00117 	ldw	ra,4(sp)
   1103c:	df000017 	ldw	fp,0(sp)
   11040:	dec00204 	addi	sp,sp,8
   11044:	f800283a 	ret

00011048 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11048:	defffb04 	addi	sp,sp,-20
   1104c:	dfc00415 	stw	ra,16(sp)
   11050:	df000315 	stw	fp,12(sp)
   11054:	dc000215 	stw	r16,8(sp)
   11058:	df000304 	addi	fp,sp,12
   1105c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11060:	e0bffe17 	ldw	r2,-8(fp)
   11064:	10800217 	ldw	r2,8(r2)
   11068:	10d00034 	orhi	r3,r2,16384
   1106c:	e0bffe17 	ldw	r2,-8(fp)
   11070:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11074:	e03ffd15 	stw	zero,-12(fp)
   11078:	00002306 	br	11108 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1107c:	04000074 	movhi	r16,1
   11080:	840b9404 	addi	r16,r16,11856
   11084:	e0bffd17 	ldw	r2,-12(fp)
   11088:	01400304 	movi	r5,12
   1108c:	1009883a 	mov	r4,r2
   11090:	000c9f80 	call	c9f8 <__mulsi3>
   11094:	8085883a 	add	r2,r16,r2
   11098:	10c00017 	ldw	r3,0(r2)
   1109c:	e0bffe17 	ldw	r2,-8(fp)
   110a0:	10800017 	ldw	r2,0(r2)
   110a4:	1880151e 	bne	r3,r2,110fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   110a8:	04000074 	movhi	r16,1
   110ac:	840b9404 	addi	r16,r16,11856
   110b0:	e0bffd17 	ldw	r2,-12(fp)
   110b4:	01400304 	movi	r5,12
   110b8:	1009883a 	mov	r4,r2
   110bc:	000c9f80 	call	c9f8 <__mulsi3>
   110c0:	8085883a 	add	r2,r16,r2
   110c4:	10800204 	addi	r2,r2,8
   110c8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   110cc:	10000b0e 	bge	r2,zero,110fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   110d0:	01400304 	movi	r5,12
   110d4:	e13ffd17 	ldw	r4,-12(fp)
   110d8:	000c9f80 	call	c9f8 <__mulsi3>
   110dc:	1007883a 	mov	r3,r2
   110e0:	00800074 	movhi	r2,1
   110e4:	108b9404 	addi	r2,r2,11856
   110e8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   110ec:	e0bffe17 	ldw	r2,-8(fp)
   110f0:	18800226 	beq	r3,r2,110fc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   110f4:	00bffcc4 	movi	r2,-13
   110f8:	00000806 	br	1111c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   110fc:	e0bffd17 	ldw	r2,-12(fp)
   11100:	10800044 	addi	r2,r2,1
   11104:	e0bffd15 	stw	r2,-12(fp)
   11108:	d0a00a17 	ldw	r2,-32728(gp)
   1110c:	1007883a 	mov	r3,r2
   11110:	e0bffd17 	ldw	r2,-12(fp)
   11114:	18bfd92e 	bgeu	r3,r2,1107c <__alt_mem_onchip_memory2_0+0xf800ffec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11118:	0005883a 	mov	r2,zero
}
   1111c:	e6ffff04 	addi	sp,fp,-4
   11120:	dfc00217 	ldw	ra,8(sp)
   11124:	df000117 	ldw	fp,4(sp)
   11128:	dc000017 	ldw	r16,0(sp)
   1112c:	dec00304 	addi	sp,sp,12
   11130:	f800283a 	ret

00011134 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11134:	defff604 	addi	sp,sp,-40
   11138:	dfc00915 	stw	ra,36(sp)
   1113c:	df000815 	stw	fp,32(sp)
   11140:	df000804 	addi	fp,sp,32
   11144:	e13ffd15 	stw	r4,-12(fp)
   11148:	e17ffe15 	stw	r5,-8(fp)
   1114c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11150:	00bfffc4 	movi	r2,-1
   11154:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11158:	00bffb44 	movi	r2,-19
   1115c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11160:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11164:	d1600804 	addi	r5,gp,-32736
   11168:	e13ffd17 	ldw	r4,-12(fp)
   1116c:	00114580 	call	11458 <alt_find_dev>
   11170:	e0bff815 	stw	r2,-32(fp)
   11174:	e0bff817 	ldw	r2,-32(fp)
   11178:	1000051e 	bne	r2,zero,11190 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1117c:	e13ffd17 	ldw	r4,-12(fp)
   11180:	00114e80 	call	114e8 <alt_find_file>
   11184:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11188:	00800044 	movi	r2,1
   1118c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11190:	e0bff817 	ldw	r2,-32(fp)
   11194:	10002b26 	beq	r2,zero,11244 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11198:	e13ff817 	ldw	r4,-32(fp)
   1119c:	00115f00 	call	115f0 <alt_get_fd>
   111a0:	e0bff915 	stw	r2,-28(fp)
   111a4:	e0bff917 	ldw	r2,-28(fp)
   111a8:	1000030e 	bge	r2,zero,111b8 <open+0x84>
    {
      status = index;
   111ac:	e0bff917 	ldw	r2,-28(fp)
   111b0:	e0bffa15 	stw	r2,-24(fp)
   111b4:	00002506 	br	1124c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   111b8:	01400304 	movi	r5,12
   111bc:	e13ff917 	ldw	r4,-28(fp)
   111c0:	000c9f80 	call	c9f8 <__mulsi3>
   111c4:	1007883a 	mov	r3,r2
   111c8:	00800074 	movhi	r2,1
   111cc:	108b9404 	addi	r2,r2,11856
   111d0:	1885883a 	add	r2,r3,r2
   111d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   111d8:	e0fffe17 	ldw	r3,-8(fp)
   111dc:	00900034 	movhi	r2,16384
   111e0:	10bfffc4 	addi	r2,r2,-1
   111e4:	1886703a 	and	r3,r3,r2
   111e8:	e0bffc17 	ldw	r2,-16(fp)
   111ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   111f0:	e0bffb17 	ldw	r2,-20(fp)
   111f4:	1000051e 	bne	r2,zero,1120c <open+0xd8>
   111f8:	e13ffc17 	ldw	r4,-16(fp)
   111fc:	00110480 	call	11048 <alt_file_locked>
   11200:	e0bffa15 	stw	r2,-24(fp)
   11204:	e0bffa17 	ldw	r2,-24(fp)
   11208:	10001016 	blt	r2,zero,1124c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1120c:	e0bff817 	ldw	r2,-32(fp)
   11210:	10800317 	ldw	r2,12(r2)
   11214:	10000826 	beq	r2,zero,11238 <open+0x104>
   11218:	e0bff817 	ldw	r2,-32(fp)
   1121c:	10800317 	ldw	r2,12(r2)
   11220:	e1ffff17 	ldw	r7,-4(fp)
   11224:	e1bffe17 	ldw	r6,-8(fp)
   11228:	e17ffd17 	ldw	r5,-12(fp)
   1122c:	e13ffc17 	ldw	r4,-16(fp)
   11230:	103ee83a 	callr	r2
   11234:	00000106 	br	1123c <open+0x108>
   11238:	0005883a 	mov	r2,zero
   1123c:	e0bffa15 	stw	r2,-24(fp)
   11240:	00000206 	br	1124c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11244:	00bffb44 	movi	r2,-19
   11248:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1124c:	e0bffa17 	ldw	r2,-24(fp)
   11250:	1000090e 	bge	r2,zero,11278 <open+0x144>
  {
    alt_release_fd (index);  
   11254:	e13ff917 	ldw	r4,-28(fp)
   11258:	000f9e80 	call	f9e8 <alt_release_fd>
    ALT_ERRNO = -status;
   1125c:	001100c0 	call	1100c <alt_get_errno>
   11260:	1007883a 	mov	r3,r2
   11264:	e0bffa17 	ldw	r2,-24(fp)
   11268:	0085c83a 	sub	r2,zero,r2
   1126c:	18800015 	stw	r2,0(r3)
    return -1;
   11270:	00bfffc4 	movi	r2,-1
   11274:	00000106 	br	1127c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   11278:	e0bff917 	ldw	r2,-28(fp)
}
   1127c:	e037883a 	mov	sp,fp
   11280:	dfc00117 	ldw	ra,4(sp)
   11284:	df000017 	ldw	fp,0(sp)
   11288:	dec00204 	addi	sp,sp,8
   1128c:	f800283a 	ret

00011290 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11290:	defffa04 	addi	sp,sp,-24
   11294:	df000515 	stw	fp,20(sp)
   11298:	df000504 	addi	fp,sp,20
   1129c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   112a0:	0005303a 	rdctl	r2,status
   112a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   112a8:	e0fffc17 	ldw	r3,-16(fp)
   112ac:	00bfff84 	movi	r2,-2
   112b0:	1884703a 	and	r2,r3,r2
   112b4:	1001703a 	wrctl	status,r2
  
  return context;
   112b8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   112bc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   112c0:	e0bfff17 	ldw	r2,-4(fp)
   112c4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   112c8:	e0bffd17 	ldw	r2,-12(fp)
   112cc:	10800017 	ldw	r2,0(r2)
   112d0:	e0fffd17 	ldw	r3,-12(fp)
   112d4:	18c00117 	ldw	r3,4(r3)
   112d8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   112dc:	e0bffd17 	ldw	r2,-12(fp)
   112e0:	10800117 	ldw	r2,4(r2)
   112e4:	e0fffd17 	ldw	r3,-12(fp)
   112e8:	18c00017 	ldw	r3,0(r3)
   112ec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   112f0:	e0bffd17 	ldw	r2,-12(fp)
   112f4:	e0fffd17 	ldw	r3,-12(fp)
   112f8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   112fc:	e0bffd17 	ldw	r2,-12(fp)
   11300:	e0fffd17 	ldw	r3,-12(fp)
   11304:	10c00015 	stw	r3,0(r2)
   11308:	e0bffb17 	ldw	r2,-20(fp)
   1130c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11310:	e0bffe17 	ldw	r2,-8(fp)
   11314:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11318:	0001883a 	nop
   1131c:	e037883a 	mov	sp,fp
   11320:	df000017 	ldw	fp,0(sp)
   11324:	dec00104 	addi	sp,sp,4
   11328:	f800283a 	ret

0001132c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1132c:	defffb04 	addi	sp,sp,-20
   11330:	dfc00415 	stw	ra,16(sp)
   11334:	df000315 	stw	fp,12(sp)
   11338:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1133c:	d0a00e17 	ldw	r2,-32712(gp)
   11340:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11344:	d0a6d817 	ldw	r2,-25760(gp)
   11348:	10800044 	addi	r2,r2,1
   1134c:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11350:	00002e06 	br	1140c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11354:	e0bffd17 	ldw	r2,-12(fp)
   11358:	10800017 	ldw	r2,0(r2)
   1135c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11360:	e0bffd17 	ldw	r2,-12(fp)
   11364:	10800403 	ldbu	r2,16(r2)
   11368:	10803fcc 	andi	r2,r2,255
   1136c:	10000426 	beq	r2,zero,11380 <alt_tick+0x54>
   11370:	d0a6d817 	ldw	r2,-25760(gp)
   11374:	1000021e 	bne	r2,zero,11380 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11378:	e0bffd17 	ldw	r2,-12(fp)
   1137c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11380:	e0bffd17 	ldw	r2,-12(fp)
   11384:	10800217 	ldw	r2,8(r2)
   11388:	d0e6d817 	ldw	r3,-25760(gp)
   1138c:	18801d36 	bltu	r3,r2,11404 <alt_tick+0xd8>
   11390:	e0bffd17 	ldw	r2,-12(fp)
   11394:	10800403 	ldbu	r2,16(r2)
   11398:	10803fcc 	andi	r2,r2,255
   1139c:	1000191e 	bne	r2,zero,11404 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   113a0:	e0bffd17 	ldw	r2,-12(fp)
   113a4:	10800317 	ldw	r2,12(r2)
   113a8:	e0fffd17 	ldw	r3,-12(fp)
   113ac:	18c00517 	ldw	r3,20(r3)
   113b0:	1809883a 	mov	r4,r3
   113b4:	103ee83a 	callr	r2
   113b8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   113bc:	e0bfff17 	ldw	r2,-4(fp)
   113c0:	1000031e 	bne	r2,zero,113d0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   113c4:	e13ffd17 	ldw	r4,-12(fp)
   113c8:	00112900 	call	11290 <alt_alarm_stop>
   113cc:	00000d06 	br	11404 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   113d0:	e0bffd17 	ldw	r2,-12(fp)
   113d4:	10c00217 	ldw	r3,8(r2)
   113d8:	e0bfff17 	ldw	r2,-4(fp)
   113dc:	1887883a 	add	r3,r3,r2
   113e0:	e0bffd17 	ldw	r2,-12(fp)
   113e4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   113e8:	e0bffd17 	ldw	r2,-12(fp)
   113ec:	10c00217 	ldw	r3,8(r2)
   113f0:	d0a6d817 	ldw	r2,-25760(gp)
   113f4:	1880032e 	bgeu	r3,r2,11404 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   113f8:	e0bffd17 	ldw	r2,-12(fp)
   113fc:	00c00044 	movi	r3,1
   11400:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11404:	e0bffe17 	ldw	r2,-8(fp)
   11408:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1140c:	e0fffd17 	ldw	r3,-12(fp)
   11410:	d0a00e04 	addi	r2,gp,-32712
   11414:	18bfcf1e 	bne	r3,r2,11354 <__alt_mem_onchip_memory2_0+0xf80102c4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11418:	0001883a 	nop
}
   1141c:	0001883a 	nop
   11420:	e037883a 	mov	sp,fp
   11424:	dfc00117 	ldw	ra,4(sp)
   11428:	df000017 	ldw	fp,0(sp)
   1142c:	dec00204 	addi	sp,sp,8
   11430:	f800283a 	ret

00011434 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11434:	deffff04 	addi	sp,sp,-4
   11438:	df000015 	stw	fp,0(sp)
   1143c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11440:	000170fa 	wrctl	ienable,zero
}
   11444:	0001883a 	nop
   11448:	e037883a 	mov	sp,fp
   1144c:	df000017 	ldw	fp,0(sp)
   11450:	dec00104 	addi	sp,sp,4
   11454:	f800283a 	ret

00011458 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11458:	defffa04 	addi	sp,sp,-24
   1145c:	dfc00515 	stw	ra,20(sp)
   11460:	df000415 	stw	fp,16(sp)
   11464:	df000404 	addi	fp,sp,16
   11468:	e13ffe15 	stw	r4,-8(fp)
   1146c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11470:	e0bfff17 	ldw	r2,-4(fp)
   11474:	10800017 	ldw	r2,0(r2)
   11478:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1147c:	e13ffe17 	ldw	r4,-8(fp)
   11480:	00024c40 	call	24c4 <strlen>
   11484:	10800044 	addi	r2,r2,1
   11488:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1148c:	00000d06 	br	114c4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11490:	e0bffc17 	ldw	r2,-16(fp)
   11494:	10800217 	ldw	r2,8(r2)
   11498:	e0fffd17 	ldw	r3,-12(fp)
   1149c:	180d883a 	mov	r6,r3
   114a0:	e17ffe17 	ldw	r5,-8(fp)
   114a4:	1009883a 	mov	r4,r2
   114a8:	001179c0 	call	1179c <memcmp>
   114ac:	1000021e 	bne	r2,zero,114b8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   114b0:	e0bffc17 	ldw	r2,-16(fp)
   114b4:	00000706 	br	114d4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   114b8:	e0bffc17 	ldw	r2,-16(fp)
   114bc:	10800017 	ldw	r2,0(r2)
   114c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   114c4:	e0fffc17 	ldw	r3,-16(fp)
   114c8:	e0bfff17 	ldw	r2,-4(fp)
   114cc:	18bff01e 	bne	r3,r2,11490 <__alt_mem_onchip_memory2_0+0xf8010400>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   114d0:	0005883a 	mov	r2,zero
}
   114d4:	e037883a 	mov	sp,fp
   114d8:	dfc00117 	ldw	ra,4(sp)
   114dc:	df000017 	ldw	fp,0(sp)
   114e0:	dec00204 	addi	sp,sp,8
   114e4:	f800283a 	ret

000114e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   114e8:	defffb04 	addi	sp,sp,-20
   114ec:	dfc00415 	stw	ra,16(sp)
   114f0:	df000315 	stw	fp,12(sp)
   114f4:	df000304 	addi	fp,sp,12
   114f8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   114fc:	d0a00617 	ldw	r2,-32744(gp)
   11500:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11504:	00003106 	br	115cc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11508:	e0bffd17 	ldw	r2,-12(fp)
   1150c:	10800217 	ldw	r2,8(r2)
   11510:	1009883a 	mov	r4,r2
   11514:	00024c40 	call	24c4 <strlen>
   11518:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1151c:	e0bffd17 	ldw	r2,-12(fp)
   11520:	10c00217 	ldw	r3,8(r2)
   11524:	e0bffe17 	ldw	r2,-8(fp)
   11528:	10bfffc4 	addi	r2,r2,-1
   1152c:	1885883a 	add	r2,r3,r2
   11530:	10800003 	ldbu	r2,0(r2)
   11534:	10803fcc 	andi	r2,r2,255
   11538:	1080201c 	xori	r2,r2,128
   1153c:	10bfe004 	addi	r2,r2,-128
   11540:	10800bd8 	cmpnei	r2,r2,47
   11544:	1000031e 	bne	r2,zero,11554 <alt_find_file+0x6c>
    {
      len -= 1;
   11548:	e0bffe17 	ldw	r2,-8(fp)
   1154c:	10bfffc4 	addi	r2,r2,-1
   11550:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11554:	e0bffe17 	ldw	r2,-8(fp)
   11558:	e0ffff17 	ldw	r3,-4(fp)
   1155c:	1885883a 	add	r2,r3,r2
   11560:	10800003 	ldbu	r2,0(r2)
   11564:	10803fcc 	andi	r2,r2,255
   11568:	1080201c 	xori	r2,r2,128
   1156c:	10bfe004 	addi	r2,r2,-128
   11570:	10800be0 	cmpeqi	r2,r2,47
   11574:	1000081e 	bne	r2,zero,11598 <alt_find_file+0xb0>
   11578:	e0bffe17 	ldw	r2,-8(fp)
   1157c:	e0ffff17 	ldw	r3,-4(fp)
   11580:	1885883a 	add	r2,r3,r2
   11584:	10800003 	ldbu	r2,0(r2)
   11588:	10803fcc 	andi	r2,r2,255
   1158c:	1080201c 	xori	r2,r2,128
   11590:	10bfe004 	addi	r2,r2,-128
   11594:	10000a1e 	bne	r2,zero,115c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11598:	e0bffd17 	ldw	r2,-12(fp)
   1159c:	10800217 	ldw	r2,8(r2)
   115a0:	e0fffe17 	ldw	r3,-8(fp)
   115a4:	180d883a 	mov	r6,r3
   115a8:	e17fff17 	ldw	r5,-4(fp)
   115ac:	1009883a 	mov	r4,r2
   115b0:	001179c0 	call	1179c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   115b4:	1000021e 	bne	r2,zero,115c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   115b8:	e0bffd17 	ldw	r2,-12(fp)
   115bc:	00000706 	br	115dc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   115c0:	e0bffd17 	ldw	r2,-12(fp)
   115c4:	10800017 	ldw	r2,0(r2)
   115c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   115cc:	e0fffd17 	ldw	r3,-12(fp)
   115d0:	d0a00604 	addi	r2,gp,-32744
   115d4:	18bfcc1e 	bne	r3,r2,11508 <__alt_mem_onchip_memory2_0+0xf8010478>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   115d8:	0005883a 	mov	r2,zero
}
   115dc:	e037883a 	mov	sp,fp
   115e0:	dfc00117 	ldw	ra,4(sp)
   115e4:	df000017 	ldw	fp,0(sp)
   115e8:	dec00204 	addi	sp,sp,8
   115ec:	f800283a 	ret

000115f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   115f0:	defffa04 	addi	sp,sp,-24
   115f4:	dfc00515 	stw	ra,20(sp)
   115f8:	df000415 	stw	fp,16(sp)
   115fc:	dc000315 	stw	r16,12(sp)
   11600:	df000404 	addi	fp,sp,16
   11604:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   11608:	00bffa04 	movi	r2,-24
   1160c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11610:	e03ffc15 	stw	zero,-16(fp)
   11614:	00001d06 	br	1168c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   11618:	04000074 	movhi	r16,1
   1161c:	840b9404 	addi	r16,r16,11856
   11620:	e0bffc17 	ldw	r2,-16(fp)
   11624:	01400304 	movi	r5,12
   11628:	1009883a 	mov	r4,r2
   1162c:	000c9f80 	call	c9f8 <__mulsi3>
   11630:	8085883a 	add	r2,r16,r2
   11634:	10800017 	ldw	r2,0(r2)
   11638:	1000111e 	bne	r2,zero,11680 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   1163c:	04000074 	movhi	r16,1
   11640:	840b9404 	addi	r16,r16,11856
   11644:	e0bffc17 	ldw	r2,-16(fp)
   11648:	01400304 	movi	r5,12
   1164c:	1009883a 	mov	r4,r2
   11650:	000c9f80 	call	c9f8 <__mulsi3>
   11654:	8085883a 	add	r2,r16,r2
   11658:	e0fffe17 	ldw	r3,-8(fp)
   1165c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11660:	d0e00a17 	ldw	r3,-32728(gp)
   11664:	e0bffc17 	ldw	r2,-16(fp)
   11668:	1880020e 	bge	r3,r2,11674 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   1166c:	e0bffc17 	ldw	r2,-16(fp)
   11670:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   11674:	e0bffc17 	ldw	r2,-16(fp)
   11678:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1167c:	00000606 	br	11698 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11680:	e0bffc17 	ldw	r2,-16(fp)
   11684:	10800044 	addi	r2,r2,1
   11688:	e0bffc15 	stw	r2,-16(fp)
   1168c:	e0bffc17 	ldw	r2,-16(fp)
   11690:	10800810 	cmplti	r2,r2,32
   11694:	103fe01e 	bne	r2,zero,11618 <__alt_mem_onchip_memory2_0+0xf8010588>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11698:	e0bffd17 	ldw	r2,-12(fp)
}
   1169c:	e6ffff04 	addi	sp,fp,-4
   116a0:	dfc00217 	ldw	ra,8(sp)
   116a4:	df000117 	ldw	fp,4(sp)
   116a8:	dc000017 	ldw	r16,0(sp)
   116ac:	dec00304 	addi	sp,sp,12
   116b0:	f800283a 	ret

000116b4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   116b4:	defffe04 	addi	sp,sp,-8
   116b8:	df000115 	stw	fp,4(sp)
   116bc:	df000104 	addi	fp,sp,4
   116c0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   116c4:	e0bfff17 	ldw	r2,-4(fp)
   116c8:	10bffe84 	addi	r2,r2,-6
   116cc:	10c00428 	cmpgeui	r3,r2,16
   116d0:	18001a1e 	bne	r3,zero,1173c <alt_exception_cause_generated_bad_addr+0x88>
   116d4:	100690ba 	slli	r3,r2,2
   116d8:	00800074 	movhi	r2,1
   116dc:	1085bb04 	addi	r2,r2,5868
   116e0:	1885883a 	add	r2,r3,r2
   116e4:	10800017 	ldw	r2,0(r2)
   116e8:	1000683a 	jmp	r2
   116ec:	0001172c 	andhi	zero,zero,1116
   116f0:	0001172c 	andhi	zero,zero,1116
   116f4:	0001173c 	xorhi	zero,zero,1116
   116f8:	0001173c 	xorhi	zero,zero,1116
   116fc:	0001173c 	xorhi	zero,zero,1116
   11700:	0001172c 	andhi	zero,zero,1116
   11704:	00011734 	movhi	zero,1116
   11708:	0001173c 	xorhi	zero,zero,1116
   1170c:	0001172c 	andhi	zero,zero,1116
   11710:	0001172c 	andhi	zero,zero,1116
   11714:	0001173c 	xorhi	zero,zero,1116
   11718:	0001172c 	andhi	zero,zero,1116
   1171c:	00011734 	movhi	zero,1116
   11720:	0001173c 	xorhi	zero,zero,1116
   11724:	0001173c 	xorhi	zero,zero,1116
   11728:	0001172c 	andhi	zero,zero,1116
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1172c:	00800044 	movi	r2,1
   11730:	00000306 	br	11740 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11734:	0005883a 	mov	r2,zero
   11738:	00000106 	br	11740 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1173c:	0005883a 	mov	r2,zero
  }
}
   11740:	e037883a 	mov	sp,fp
   11744:	df000017 	ldw	fp,0(sp)
   11748:	dec00104 	addi	sp,sp,4
   1174c:	f800283a 	ret

00011750 <atexit>:
   11750:	200b883a 	mov	r5,r4
   11754:	000f883a 	mov	r7,zero
   11758:	000d883a 	mov	r6,zero
   1175c:	0009883a 	mov	r4,zero
   11760:	00118181 	jmpi	11818 <__register_exitproc>

00011764 <exit>:
   11764:	defffe04 	addi	sp,sp,-8
   11768:	000b883a 	mov	r5,zero
   1176c:	dc000015 	stw	r16,0(sp)
   11770:	dfc00115 	stw	ra,4(sp)
   11774:	2021883a 	mov	r16,r4
   11778:	00119300 	call	11930 <__call_exitprocs>
   1177c:	00800074 	movhi	r2,1
   11780:	10900c04 	addi	r2,r2,16432
   11784:	11000017 	ldw	r4,0(r2)
   11788:	20800f17 	ldw	r2,60(r4)
   1178c:	10000126 	beq	r2,zero,11794 <exit+0x30>
   11790:	103ee83a 	callr	r2
   11794:	8009883a 	mov	r4,r16
   11798:	0011ab00 	call	11ab0 <_exit>

0001179c <memcmp>:
   1179c:	01c000c4 	movi	r7,3
   117a0:	3980192e 	bgeu	r7,r6,11808 <memcmp+0x6c>
   117a4:	2144b03a 	or	r2,r4,r5
   117a8:	11c4703a 	and	r2,r2,r7
   117ac:	10000f26 	beq	r2,zero,117ec <memcmp+0x50>
   117b0:	20800003 	ldbu	r2,0(r4)
   117b4:	28c00003 	ldbu	r3,0(r5)
   117b8:	10c0151e 	bne	r2,r3,11810 <memcmp+0x74>
   117bc:	31bfff84 	addi	r6,r6,-2
   117c0:	01ffffc4 	movi	r7,-1
   117c4:	00000406 	br	117d8 <memcmp+0x3c>
   117c8:	20800003 	ldbu	r2,0(r4)
   117cc:	28c00003 	ldbu	r3,0(r5)
   117d0:	31bfffc4 	addi	r6,r6,-1
   117d4:	10c00e1e 	bne	r2,r3,11810 <memcmp+0x74>
   117d8:	21000044 	addi	r4,r4,1
   117dc:	29400044 	addi	r5,r5,1
   117e0:	31fff91e 	bne	r6,r7,117c8 <__alt_mem_onchip_memory2_0+0xf8010738>
   117e4:	0005883a 	mov	r2,zero
   117e8:	f800283a 	ret
   117ec:	20c00017 	ldw	r3,0(r4)
   117f0:	28800017 	ldw	r2,0(r5)
   117f4:	18bfee1e 	bne	r3,r2,117b0 <__alt_mem_onchip_memory2_0+0xf8010720>
   117f8:	31bfff04 	addi	r6,r6,-4
   117fc:	21000104 	addi	r4,r4,4
   11800:	29400104 	addi	r5,r5,4
   11804:	39bff936 	bltu	r7,r6,117ec <__alt_mem_onchip_memory2_0+0xf801075c>
   11808:	303fe91e 	bne	r6,zero,117b0 <__alt_mem_onchip_memory2_0+0xf8010720>
   1180c:	003ff506 	br	117e4 <__alt_mem_onchip_memory2_0+0xf8010754>
   11810:	10c5c83a 	sub	r2,r2,r3
   11814:	f800283a 	ret

00011818 <__register_exitproc>:
   11818:	defffa04 	addi	sp,sp,-24
   1181c:	dc000315 	stw	r16,12(sp)
   11820:	04000074 	movhi	r16,1
   11824:	84100c04 	addi	r16,r16,16432
   11828:	80c00017 	ldw	r3,0(r16)
   1182c:	dc400415 	stw	r17,16(sp)
   11830:	dfc00515 	stw	ra,20(sp)
   11834:	18805217 	ldw	r2,328(r3)
   11838:	2023883a 	mov	r17,r4
   1183c:	10003726 	beq	r2,zero,1191c <__register_exitproc+0x104>
   11840:	10c00117 	ldw	r3,4(r2)
   11844:	010007c4 	movi	r4,31
   11848:	20c00e16 	blt	r4,r3,11884 <__register_exitproc+0x6c>
   1184c:	1a000044 	addi	r8,r3,1
   11850:	8800221e 	bne	r17,zero,118dc <__register_exitproc+0xc4>
   11854:	18c00084 	addi	r3,r3,2
   11858:	18c7883a 	add	r3,r3,r3
   1185c:	18c7883a 	add	r3,r3,r3
   11860:	12000115 	stw	r8,4(r2)
   11864:	10c7883a 	add	r3,r2,r3
   11868:	19400015 	stw	r5,0(r3)
   1186c:	0005883a 	mov	r2,zero
   11870:	dfc00517 	ldw	ra,20(sp)
   11874:	dc400417 	ldw	r17,16(sp)
   11878:	dc000317 	ldw	r16,12(sp)
   1187c:	dec00604 	addi	sp,sp,24
   11880:	f800283a 	ret
   11884:	00800034 	movhi	r2,0
   11888:	10800004 	addi	r2,r2,0
   1188c:	10002626 	beq	r2,zero,11928 <__register_exitproc+0x110>
   11890:	01006404 	movi	r4,400
   11894:	d9400015 	stw	r5,0(sp)
   11898:	d9800115 	stw	r6,4(sp)
   1189c:	d9c00215 	stw	r7,8(sp)
   118a0:	00000000 	call	0 <__alt_mem_sdram>
   118a4:	d9400017 	ldw	r5,0(sp)
   118a8:	d9800117 	ldw	r6,4(sp)
   118ac:	d9c00217 	ldw	r7,8(sp)
   118b0:	10001d26 	beq	r2,zero,11928 <__register_exitproc+0x110>
   118b4:	81000017 	ldw	r4,0(r16)
   118b8:	10000115 	stw	zero,4(r2)
   118bc:	02000044 	movi	r8,1
   118c0:	22405217 	ldw	r9,328(r4)
   118c4:	0007883a 	mov	r3,zero
   118c8:	12400015 	stw	r9,0(r2)
   118cc:	20805215 	stw	r2,328(r4)
   118d0:	10006215 	stw	zero,392(r2)
   118d4:	10006315 	stw	zero,396(r2)
   118d8:	883fde26 	beq	r17,zero,11854 <__alt_mem_onchip_memory2_0+0xf80107c4>
   118dc:	18c9883a 	add	r4,r3,r3
   118e0:	2109883a 	add	r4,r4,r4
   118e4:	1109883a 	add	r4,r2,r4
   118e8:	21802215 	stw	r6,136(r4)
   118ec:	01800044 	movi	r6,1
   118f0:	12406217 	ldw	r9,392(r2)
   118f4:	30cc983a 	sll	r6,r6,r3
   118f8:	4992b03a 	or	r9,r9,r6
   118fc:	12406215 	stw	r9,392(r2)
   11900:	21c04215 	stw	r7,264(r4)
   11904:	01000084 	movi	r4,2
   11908:	893fd21e 	bne	r17,r4,11854 <__alt_mem_onchip_memory2_0+0xf80107c4>
   1190c:	11006317 	ldw	r4,396(r2)
   11910:	218cb03a 	or	r6,r4,r6
   11914:	11806315 	stw	r6,396(r2)
   11918:	003fce06 	br	11854 <__alt_mem_onchip_memory2_0+0xf80107c4>
   1191c:	18805304 	addi	r2,r3,332
   11920:	18805215 	stw	r2,328(r3)
   11924:	003fc606 	br	11840 <__alt_mem_onchip_memory2_0+0xf80107b0>
   11928:	00bfffc4 	movi	r2,-1
   1192c:	003fd006 	br	11870 <__alt_mem_onchip_memory2_0+0xf80107e0>

00011930 <__call_exitprocs>:
   11930:	defff504 	addi	sp,sp,-44
   11934:	df000915 	stw	fp,36(sp)
   11938:	dd400615 	stw	r21,24(sp)
   1193c:	dc800315 	stw	r18,12(sp)
   11940:	dfc00a15 	stw	ra,40(sp)
   11944:	ddc00815 	stw	r23,32(sp)
   11948:	dd800715 	stw	r22,28(sp)
   1194c:	dd000515 	stw	r20,20(sp)
   11950:	dcc00415 	stw	r19,16(sp)
   11954:	dc400215 	stw	r17,8(sp)
   11958:	dc000115 	stw	r16,4(sp)
   1195c:	d9000015 	stw	r4,0(sp)
   11960:	2839883a 	mov	fp,r5
   11964:	04800044 	movi	r18,1
   11968:	057fffc4 	movi	r21,-1
   1196c:	00800074 	movhi	r2,1
   11970:	10900c04 	addi	r2,r2,16432
   11974:	12000017 	ldw	r8,0(r2)
   11978:	45005217 	ldw	r20,328(r8)
   1197c:	44c05204 	addi	r19,r8,328
   11980:	a0001c26 	beq	r20,zero,119f4 <__call_exitprocs+0xc4>
   11984:	a0800117 	ldw	r2,4(r20)
   11988:	15ffffc4 	addi	r23,r2,-1
   1198c:	b8000d16 	blt	r23,zero,119c4 <__call_exitprocs+0x94>
   11990:	14000044 	addi	r16,r2,1
   11994:	8421883a 	add	r16,r16,r16
   11998:	8421883a 	add	r16,r16,r16
   1199c:	84402004 	addi	r17,r16,128
   119a0:	a463883a 	add	r17,r20,r17
   119a4:	a421883a 	add	r16,r20,r16
   119a8:	e0001e26 	beq	fp,zero,11a24 <__call_exitprocs+0xf4>
   119ac:	80804017 	ldw	r2,256(r16)
   119b0:	e0801c26 	beq	fp,r2,11a24 <__call_exitprocs+0xf4>
   119b4:	bdffffc4 	addi	r23,r23,-1
   119b8:	843fff04 	addi	r16,r16,-4
   119bc:	8c7fff04 	addi	r17,r17,-4
   119c0:	bd7ff91e 	bne	r23,r21,119a8 <__alt_mem_onchip_memory2_0+0xf8010918>
   119c4:	00800034 	movhi	r2,0
   119c8:	10800004 	addi	r2,r2,0
   119cc:	10000926 	beq	r2,zero,119f4 <__call_exitprocs+0xc4>
   119d0:	a0800117 	ldw	r2,4(r20)
   119d4:	1000301e 	bne	r2,zero,11a98 <__call_exitprocs+0x168>
   119d8:	a0800017 	ldw	r2,0(r20)
   119dc:	10003226 	beq	r2,zero,11aa8 <__call_exitprocs+0x178>
   119e0:	a009883a 	mov	r4,r20
   119e4:	98800015 	stw	r2,0(r19)
   119e8:	00000000 	call	0 <__alt_mem_sdram>
   119ec:	9d000017 	ldw	r20,0(r19)
   119f0:	a03fe41e 	bne	r20,zero,11984 <__alt_mem_onchip_memory2_0+0xf80108f4>
   119f4:	dfc00a17 	ldw	ra,40(sp)
   119f8:	df000917 	ldw	fp,36(sp)
   119fc:	ddc00817 	ldw	r23,32(sp)
   11a00:	dd800717 	ldw	r22,28(sp)
   11a04:	dd400617 	ldw	r21,24(sp)
   11a08:	dd000517 	ldw	r20,20(sp)
   11a0c:	dcc00417 	ldw	r19,16(sp)
   11a10:	dc800317 	ldw	r18,12(sp)
   11a14:	dc400217 	ldw	r17,8(sp)
   11a18:	dc000117 	ldw	r16,4(sp)
   11a1c:	dec00b04 	addi	sp,sp,44
   11a20:	f800283a 	ret
   11a24:	a0800117 	ldw	r2,4(r20)
   11a28:	80c00017 	ldw	r3,0(r16)
   11a2c:	10bfffc4 	addi	r2,r2,-1
   11a30:	15c01426 	beq	r2,r23,11a84 <__call_exitprocs+0x154>
   11a34:	80000015 	stw	zero,0(r16)
   11a38:	183fde26 	beq	r3,zero,119b4 <__alt_mem_onchip_memory2_0+0xf8010924>
   11a3c:	95c8983a 	sll	r4,r18,r23
   11a40:	a0806217 	ldw	r2,392(r20)
   11a44:	a5800117 	ldw	r22,4(r20)
   11a48:	2084703a 	and	r2,r4,r2
   11a4c:	10000b26 	beq	r2,zero,11a7c <__call_exitprocs+0x14c>
   11a50:	a0806317 	ldw	r2,396(r20)
   11a54:	2088703a 	and	r4,r4,r2
   11a58:	20000c1e 	bne	r4,zero,11a8c <__call_exitprocs+0x15c>
   11a5c:	89400017 	ldw	r5,0(r17)
   11a60:	d9000017 	ldw	r4,0(sp)
   11a64:	183ee83a 	callr	r3
   11a68:	a0800117 	ldw	r2,4(r20)
   11a6c:	15bfbf1e 	bne	r2,r22,1196c <__alt_mem_onchip_memory2_0+0xf80108dc>
   11a70:	98800017 	ldw	r2,0(r19)
   11a74:	153fcf26 	beq	r2,r20,119b4 <__alt_mem_onchip_memory2_0+0xf8010924>
   11a78:	003fbc06 	br	1196c <__alt_mem_onchip_memory2_0+0xf80108dc>
   11a7c:	183ee83a 	callr	r3
   11a80:	003ff906 	br	11a68 <__alt_mem_onchip_memory2_0+0xf80109d8>
   11a84:	a5c00115 	stw	r23,4(r20)
   11a88:	003feb06 	br	11a38 <__alt_mem_onchip_memory2_0+0xf80109a8>
   11a8c:	89000017 	ldw	r4,0(r17)
   11a90:	183ee83a 	callr	r3
   11a94:	003ff406 	br	11a68 <__alt_mem_onchip_memory2_0+0xf80109d8>
   11a98:	a0800017 	ldw	r2,0(r20)
   11a9c:	a027883a 	mov	r19,r20
   11aa0:	1029883a 	mov	r20,r2
   11aa4:	003fb606 	br	11980 <__alt_mem_onchip_memory2_0+0xf80108f0>
   11aa8:	0005883a 	mov	r2,zero
   11aac:	003ffb06 	br	11a9c <__alt_mem_onchip_memory2_0+0xf8010a0c>

00011ab0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11ab0:	defffd04 	addi	sp,sp,-12
   11ab4:	df000215 	stw	fp,8(sp)
   11ab8:	df000204 	addi	fp,sp,8
   11abc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11ac0:	0001883a 	nop
   11ac4:	e0bfff17 	ldw	r2,-4(fp)
   11ac8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11acc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11ad0:	10000226 	beq	r2,zero,11adc <_exit+0x2c>
    ALT_SIM_FAIL();
   11ad4:	002af070 	cmpltui	zero,zero,43969
   11ad8:	00000106 	br	11ae0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11adc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11ae0:	003fff06 	br	11ae0 <__alt_mem_onchip_memory2_0+0xf8010a50>
